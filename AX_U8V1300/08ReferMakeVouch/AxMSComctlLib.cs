//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Reflection.AssemblyVersion("2.1.0.0")]
[assembly: System.Windows.Forms.AxHost.TypeLibraryTimeStamp("06/06/2012 08:49:52")]

namespace AxMSComctlLib {
    
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{1efb6596-857c-11d1-b16a-00c0f0283628}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("BeforeClick")]
    public class AxTabStrip : System.Windows.Forms.AxHost {
        
        private MSComctlLib.ITabStrip ocx;
        
        private AxTabStripEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxTabStrip() : 
                base("1efb6596-857c-11d1-b16a-00c0f0283628") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual MSComctlLib.Tabs Tabs {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Tabs", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Tabs;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Tabs", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Tabs = value;
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-514)]
        [System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
        public override bool Enabled {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return this.ocx.Enabled;
                }
                else {
                    return base.Enabled;
                }
            }
            set {
                base.Enabled = value;
                if ((this.ocx != null)) {
                    this.ocx.Enabled = value;
                }
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-512)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IFontDisp")]
        [System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
        public override System.Drawing.Font Font {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetFontFromIFont(this.ocx.Font);
                }
                else {
                    return base.Font;
                }
            }
            set {
                base.Font = value;
                if ((this.ocx != null)) {
                    this.ocx.Font = ((stdole.IFontDisp)(GetIFontFromFont(value)));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-515)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.Int32")]
        public virtual int hWnd {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("hWnd", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return (this.ocx.hWnd);
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("hWnd", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.hWnd = ((int)((value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IPictureDisp")]
        public virtual System.Drawing.Image MouseIcon {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MouseIcon", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetPictureFromIPicture(this.ocx.MouseIcon);
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MouseIcon", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MouseIcon = ((stdole.IPictureDisp)(GetIPictureFromPicture(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual bool MultiRow {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiRow", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MultiRow;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiRow", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MultiRow = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual MSComctlLib.TabStyleConstants Style {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Style", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Style;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Style", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Style = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual short TabFixedWidth {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TabFixedWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.TabFixedWidth;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TabFixedWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.TabFixedWidth = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        public virtual MSComctlLib.TabWidthStyleConstants TabWidthStyle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TabWidthStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.TabWidthStyle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TabWidthStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.TabWidthStyle = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual float ClientTop {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClientTop", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ClientTop;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClientTop", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ClientTop = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        public virtual float ClientLeft {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClientLeft", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ClientLeft;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClientLeft", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ClientLeft = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        public virtual float ClientHeight {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClientHeight", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ClientHeight;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClientHeight", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ClientHeight = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(12)]
        public virtual float ClientWidth {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClientWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ClientWidth;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClientWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ClientWidth = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual MSComctlLib.MousePointerConstants MousePointer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MousePointer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MousePointer;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MousePointer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MousePointer = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        public virtual object ImageList {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImageList", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ImageList;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImageList", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ImageList = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(14)]
        public virtual short TabFixedHeight {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TabFixedHeight", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.TabFixedHeight;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TabFixedHeight", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.TabFixedHeight = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual bool ShowTips {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowTips", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ShowTips;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowTips", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ShowTips = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(15)]
        public virtual MSComctlLib.Tab SelectedItem {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelectedItem", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SelectedItem;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelectedItem", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SelectedItem = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1551)]
        public virtual MSComctlLib.OLEDropConstants OLEDropMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDropMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.OLEDropMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDropMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.OLEDropMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(16)]
        [System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
        public virtual bool HotTracking {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HotTracking", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.HotTracking;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HotTracking", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.HotTracking = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(17)]
        [System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
        public virtual bool MultiSelect {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiSelect", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MultiSelect;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiSelect", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MultiSelect = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(18)]
        public virtual MSComctlLib.PlacementConstants Placement {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Placement", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Placement;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Placement", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Placement = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(19)]
        [System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
        public virtual bool Separators {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Separators", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Separators;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Separators", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Separators = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(20)]
        public virtual float TabMinWidth {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TabMinWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.TabMinWidth;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TabMinWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.TabMinWidth = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(21)]
        public virtual MSComctlLib.TabSelStyleConstants TabStyle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TabStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.TabStyle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TabStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.TabStyle = value;
            }
        }
        
        public event System.EventHandler ClickEvent;
        
        public event ITabStripEvents_KeyDownEventHandler KeyDownEvent;
        
        public event ITabStripEvents_KeyPressEventHandler KeyPressEvent;
        
        public event ITabStripEvents_KeyUpEventHandler KeyUpEvent;
        
        public event ITabStripEvents_MouseDownEventHandler MouseDownEvent;
        
        public event ITabStripEvents_MouseMoveEventHandler MouseMoveEvent;
        
        public event ITabStripEvents_MouseUpEventHandler MouseUpEvent;
        
        public event ITabStripEvents_BeforeClickEventHandler BeforeClick;
        
        public event ITabStripEvents_OLEStartDragEventHandler OLEStartDrag;
        
        public event ITabStripEvents_OLEGiveFeedbackEventHandler OLEGiveFeedback;
        
        public event ITabStripEvents_OLESetDataEventHandler OLESetData;
        
        public event ITabStripEvents_OLECompleteDragEventHandler OLECompleteDrag;
        
        public event ITabStripEvents_OLEDragOverEventHandler OLEDragOver;
        
        public event ITabStripEvents_OLEDragDropEventHandler OLEDragDrop;
        
        public virtual void Refresh() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Refresh", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Refresh();
        }
        
        public virtual void OLEDrag() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDrag", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.OLEDrag();
        }
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        public virtual void DeselectAll() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DeselectAll", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DeselectAll();
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxTabStripEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(MSComctlLib.ITabStripEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((MSComctlLib.ITabStrip)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnClickEvent(object sender, System.EventArgs e) {
            if ((this.ClickEvent != null)) {
                this.ClickEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyDownEvent(object sender, ITabStripEvents_KeyDownEvent e) {
            if ((this.KeyDownEvent != null)) {
                this.KeyDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyPressEvent(object sender, ITabStripEvents_KeyPressEvent e) {
            if ((this.KeyPressEvent != null)) {
                this.KeyPressEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyUpEvent(object sender, ITabStripEvents_KeyUpEvent e) {
            if ((this.KeyUpEvent != null)) {
                this.KeyUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseDownEvent(object sender, ITabStripEvents_MouseDownEvent e) {
            if ((this.MouseDownEvent != null)) {
                this.MouseDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseMoveEvent(object sender, ITabStripEvents_MouseMoveEvent e) {
            if ((this.MouseMoveEvent != null)) {
                this.MouseMoveEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseUpEvent(object sender, ITabStripEvents_MouseUpEvent e) {
            if ((this.MouseUpEvent != null)) {
                this.MouseUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnBeforeClick(object sender, ITabStripEvents_BeforeClickEvent e) {
            if ((this.BeforeClick != null)) {
                this.BeforeClick(sender, e);
            }
        }
        
        internal void RaiseOnOLEStartDrag(object sender, ITabStripEvents_OLEStartDragEvent e) {
            if ((this.OLEStartDrag != null)) {
                this.OLEStartDrag(sender, e);
            }
        }
        
        internal void RaiseOnOLEGiveFeedback(object sender, ITabStripEvents_OLEGiveFeedbackEvent e) {
            if ((this.OLEGiveFeedback != null)) {
                this.OLEGiveFeedback(sender, e);
            }
        }
        
        internal void RaiseOnOLESetData(object sender, ITabStripEvents_OLESetDataEvent e) {
            if ((this.OLESetData != null)) {
                this.OLESetData(sender, e);
            }
        }
        
        internal void RaiseOnOLECompleteDrag(object sender, ITabStripEvents_OLECompleteDragEvent e) {
            if ((this.OLECompleteDrag != null)) {
                this.OLECompleteDrag(sender, e);
            }
        }
        
        internal void RaiseOnOLEDragOver(object sender, ITabStripEvents_OLEDragOverEvent e) {
            if ((this.OLEDragOver != null)) {
                this.OLEDragOver(sender, e);
            }
        }
        
        internal void RaiseOnOLEDragDrop(object sender, ITabStripEvents_OLEDragDropEvent e) {
            if ((this.OLEDragDrop != null)) {
                this.OLEDragDrop(sender, e);
            }
        }
    }
    
    public delegate void ITabStripEvents_KeyDownEventHandler(object sender, ITabStripEvents_KeyDownEvent e);
    
    public class ITabStripEvents_KeyDownEvent {
        
        public short keyCode;
        
        public short shift;
        
        public ITabStripEvents_KeyDownEvent(short keyCode, short shift) {
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void ITabStripEvents_KeyPressEventHandler(object sender, ITabStripEvents_KeyPressEvent e);
    
    public class ITabStripEvents_KeyPressEvent {
        
        public short keyAscii;
        
        public ITabStripEvents_KeyPressEvent(short keyAscii) {
            this.keyAscii = keyAscii;
        }
    }
    
    public delegate void ITabStripEvents_KeyUpEventHandler(object sender, ITabStripEvents_KeyUpEvent e);
    
    public class ITabStripEvents_KeyUpEvent {
        
        public short keyCode;
        
        public short shift;
        
        public ITabStripEvents_KeyUpEvent(short keyCode, short shift) {
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void ITabStripEvents_MouseDownEventHandler(object sender, ITabStripEvents_MouseDownEvent e);
    
    public class ITabStripEvents_MouseDownEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public ITabStripEvents_MouseDownEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void ITabStripEvents_MouseMoveEventHandler(object sender, ITabStripEvents_MouseMoveEvent e);
    
    public class ITabStripEvents_MouseMoveEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public ITabStripEvents_MouseMoveEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void ITabStripEvents_MouseUpEventHandler(object sender, ITabStripEvents_MouseUpEvent e);
    
    public class ITabStripEvents_MouseUpEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public ITabStripEvents_MouseUpEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void ITabStripEvents_BeforeClickEventHandler(object sender, ITabStripEvents_BeforeClickEvent e);
    
    public class ITabStripEvents_BeforeClickEvent {
        
        public short cancel;
        
        public ITabStripEvents_BeforeClickEvent(short cancel) {
            this.cancel = cancel;
        }
    }
    
    public delegate void ITabStripEvents_OLEStartDragEventHandler(object sender, ITabStripEvents_OLEStartDragEvent e);
    
    public class ITabStripEvents_OLEStartDragEvent {
        
        public MSComctlLib.DataObject data;
        
        public int allowedEffects;
        
        public ITabStripEvents_OLEStartDragEvent(MSComctlLib.DataObject data, int allowedEffects) {
            this.data = data;
            this.allowedEffects = allowedEffects;
        }
    }
    
    public delegate void ITabStripEvents_OLEGiveFeedbackEventHandler(object sender, ITabStripEvents_OLEGiveFeedbackEvent e);
    
    public class ITabStripEvents_OLEGiveFeedbackEvent {
        
        public int effect;
        
        public bool defaultCursors;
        
        public ITabStripEvents_OLEGiveFeedbackEvent(int effect, bool defaultCursors) {
            this.effect = effect;
            this.defaultCursors = defaultCursors;
        }
    }
    
    public delegate void ITabStripEvents_OLESetDataEventHandler(object sender, ITabStripEvents_OLESetDataEvent e);
    
    public class ITabStripEvents_OLESetDataEvent {
        
        public MSComctlLib.DataObject data;
        
        public short dataFormat;
        
        public ITabStripEvents_OLESetDataEvent(MSComctlLib.DataObject data, short dataFormat) {
            this.data = data;
            this.dataFormat = dataFormat;
        }
    }
    
    public delegate void ITabStripEvents_OLECompleteDragEventHandler(object sender, ITabStripEvents_OLECompleteDragEvent e);
    
    public class ITabStripEvents_OLECompleteDragEvent {
        
        public int effect;
        
        public ITabStripEvents_OLECompleteDragEvent(int effect) {
            this.effect = effect;
        }
    }
    
    public delegate void ITabStripEvents_OLEDragOverEventHandler(object sender, ITabStripEvents_OLEDragOverEvent e);
    
    public class ITabStripEvents_OLEDragOverEvent {
        
        public MSComctlLib.DataObject data;
        
        public int effect;
        
        public short button;
        
        public short shift;
        
        public float x;
        
        public float y;
        
        public short state;
        
        public ITabStripEvents_OLEDragOverEvent(MSComctlLib.DataObject data, int effect, short button, short shift, float x, float y, short state) {
            this.data = data;
            this.effect = effect;
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
            this.state = state;
        }
    }
    
    public delegate void ITabStripEvents_OLEDragDropEventHandler(object sender, ITabStripEvents_OLEDragDropEvent e);
    
    public class ITabStripEvents_OLEDragDropEvent {
        
        public MSComctlLib.DataObject data;
        
        public int effect;
        
        public short button;
        
        public short shift;
        
        public float x;
        
        public float y;
        
        public ITabStripEvents_OLEDragDropEvent(MSComctlLib.DataObject data, int effect, short button, short shift, float x, float y) {
            this.data = data;
            this.effect = effect;
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxTabStripEventMulticaster : MSComctlLib.ITabStripEvents {
        
        private AxTabStrip parent;
        
        public AxTabStripEventMulticaster(AxTabStrip parent) {
            this.parent = parent;
        }
        
        public virtual void Click() {
            System.EventArgs clickEvent = new System.EventArgs();
            this.parent.RaiseOnClickEvent(this.parent, clickEvent);
        }
        
        public virtual void KeyDown(ref short keyCode, short shift) {
            ITabStripEvents_KeyDownEvent keydownEvent = new ITabStripEvents_KeyDownEvent(keyCode, shift);
            this.parent.RaiseOnKeyDownEvent(this.parent, keydownEvent);
            keyCode = keydownEvent.keyCode;
        }
        
        public virtual void KeyPress(ref short keyAscii) {
            ITabStripEvents_KeyPressEvent keypressEvent = new ITabStripEvents_KeyPressEvent(keyAscii);
            this.parent.RaiseOnKeyPressEvent(this.parent, keypressEvent);
            keyAscii = keypressEvent.keyAscii;
        }
        
        public virtual void KeyUp(ref short keyCode, short shift) {
            ITabStripEvents_KeyUpEvent keyupEvent = new ITabStripEvents_KeyUpEvent(keyCode, shift);
            this.parent.RaiseOnKeyUpEvent(this.parent, keyupEvent);
            keyCode = keyupEvent.keyCode;
        }
        
        public virtual void MouseDown(short button, short shift, int x, int y) {
            ITabStripEvents_MouseDownEvent mousedownEvent = new ITabStripEvents_MouseDownEvent(button, shift, x, y);
            this.parent.RaiseOnMouseDownEvent(this.parent, mousedownEvent);
        }
        
        public virtual void MouseMove(short button, short shift, int x, int y) {
            ITabStripEvents_MouseMoveEvent mousemoveEvent = new ITabStripEvents_MouseMoveEvent(button, shift, x, y);
            this.parent.RaiseOnMouseMoveEvent(this.parent, mousemoveEvent);
        }
        
        public virtual void MouseUp(short button, short shift, int x, int y) {
            ITabStripEvents_MouseUpEvent mouseupEvent = new ITabStripEvents_MouseUpEvent(button, shift, x, y);
            this.parent.RaiseOnMouseUpEvent(this.parent, mouseupEvent);
        }
        
        public virtual void BeforeClick(ref short cancel) {
            ITabStripEvents_BeforeClickEvent beforeclickEvent = new ITabStripEvents_BeforeClickEvent(cancel);
            this.parent.RaiseOnBeforeClick(this.parent, beforeclickEvent);
            cancel = beforeclickEvent.cancel;
        }
        
        public virtual void OLEStartDrag(ref MSComctlLib.DataObject data, ref int allowedEffects) {
            ITabStripEvents_OLEStartDragEvent olestartdragEvent = new ITabStripEvents_OLEStartDragEvent(data, allowedEffects);
            this.parent.RaiseOnOLEStartDrag(this.parent, olestartdragEvent);
            data = olestartdragEvent.data;
            allowedEffects = olestartdragEvent.allowedEffects;
        }
        
        public virtual void OLEGiveFeedback(ref int effect, ref bool defaultCursors) {
            ITabStripEvents_OLEGiveFeedbackEvent olegivefeedbackEvent = new ITabStripEvents_OLEGiveFeedbackEvent(effect, defaultCursors);
            this.parent.RaiseOnOLEGiveFeedback(this.parent, olegivefeedbackEvent);
            effect = olegivefeedbackEvent.effect;
            defaultCursors = olegivefeedbackEvent.defaultCursors;
        }
        
        public virtual void OLESetData(ref MSComctlLib.DataObject data, ref short dataFormat) {
            ITabStripEvents_OLESetDataEvent olesetdataEvent = new ITabStripEvents_OLESetDataEvent(data, dataFormat);
            this.parent.RaiseOnOLESetData(this.parent, olesetdataEvent);
            data = olesetdataEvent.data;
            dataFormat = olesetdataEvent.dataFormat;
        }
        
        public virtual void OLECompleteDrag(ref int effect) {
            ITabStripEvents_OLECompleteDragEvent olecompletedragEvent = new ITabStripEvents_OLECompleteDragEvent(effect);
            this.parent.RaiseOnOLECompleteDrag(this.parent, olecompletedragEvent);
            effect = olecompletedragEvent.effect;
        }
        
        public virtual void OLEDragOver(ref MSComctlLib.DataObject data, ref int effect, ref short button, ref short shift, ref float x, ref float y, ref short state) {
            ITabStripEvents_OLEDragOverEvent oledragoverEvent = new ITabStripEvents_OLEDragOverEvent(data, effect, button, shift, x, y, state);
            this.parent.RaiseOnOLEDragOver(this.parent, oledragoverEvent);
            data = oledragoverEvent.data;
            effect = oledragoverEvent.effect;
            button = oledragoverEvent.button;
            shift = oledragoverEvent.shift;
            x = oledragoverEvent.x;
            y = oledragoverEvent.y;
            state = oledragoverEvent.state;
        }
        
        public virtual void OLEDragDrop(ref MSComctlLib.DataObject data, ref int effect, ref short button, ref short shift, ref float x, ref float y) {
            ITabStripEvents_OLEDragDropEvent oledragdropEvent = new ITabStripEvents_OLEDragDropEvent(data, effect, button, shift, x, y);
            this.parent.RaiseOnOLEDragDrop(this.parent, oledragdropEvent);
            data = oledragdropEvent.data;
            effect = oledragdropEvent.effect;
            button = oledragdropEvent.button;
            shift = oledragdropEvent.shift;
            x = oledragdropEvent.x;
            y = oledragdropEvent.y;
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{66833fe6-8583-11d1-b16a-00c0f0283628}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("ButtonClick")]
    public class AxToolbar : System.Windows.Forms.AxHost {
        
        private MSComctlLib.IToolbar ocx;
        
        private AxToolbarEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxToolbar() : 
                base("66833fe6-8583-11d1-b16a-00c0f0283628") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-520)]
        public virtual MSComctlLib.AppearanceConstants Appearance {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Appearance", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Appearance;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Appearance", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Appearance = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual bool AllowCustomize {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AllowCustomize", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AllowCustomize;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AllowCustomize", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AllowCustomize = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual MSComctlLib.Buttons Buttons {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Buttons", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Buttons;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Buttons", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Buttons = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(15)]
        public virtual MSComctlLib.Controls CtlControls {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlControls", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Controls;
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-514)]
        [System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
        public override bool Enabled {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return this.ocx.Enabled;
                }
                else {
                    return base.Enabled;
                }
            }
            set {
                base.Enabled = value;
                if ((this.ocx != null)) {
                    this.ocx.Enabled = value;
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-515)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.Int32")]
        public virtual int hWnd {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("hWnd", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return (this.ocx.hWnd);
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("hWnd", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.hWnd = ((int)((value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IPictureDisp")]
        public virtual System.Drawing.Image MouseIcon {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MouseIcon", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetPictureFromIPicture(this.ocx.MouseIcon);
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MouseIcon", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MouseIcon = ((stdole.IPictureDisp)(GetIPictureFromPicture(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual MSComctlLib.MousePointerConstants MousePointer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MousePointer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MousePointer;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MousePointer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MousePointer = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual object ImageList {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImageList", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ImageList;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImageList", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ImageList = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual bool ShowTips {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowTips", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ShowTips;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowTips", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ShowTips = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-504)]
        [System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
        public virtual MSComctlLib.BorderStyleConstants BorderStyle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BorderStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.BorderStyle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BorderStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BorderStyle = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual bool Wrappable {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Wrappable", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Wrappable;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Wrappable", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Wrappable = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        public virtual float ButtonHeight {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ButtonHeight", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ButtonHeight;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ButtonHeight", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ButtonHeight = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual float ButtonWidth {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ButtonWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ButtonWidth;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ButtonWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ButtonWidth = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        public virtual int HelpContextID {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HelpContextID", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.HelpContextID;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HelpContextID", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.HelpContextID = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(14)]
        public virtual string HelpFile {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HelpFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.HelpFile;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HelpFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.HelpFile = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1551)]
        public virtual MSComctlLib.OLEDropConstants OLEDropMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDropMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.OLEDropMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDropMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.OLEDropMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(17)]
        public virtual object DisabledImageList {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DisabledImageList", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DisabledImageList;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DisabledImageList", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.DisabledImageList = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(18)]
        public virtual object HotImageList {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HotImageList", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.HotImageList;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HotImageList", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.HotImageList = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(16)]
        public virtual MSComctlLib.ToolbarStyleConstants Style {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Style", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Style;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Style", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Style = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(19)]
        public virtual MSComctlLib.ToolbarTextAlignConstants TextAlignment {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TextAlignment", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.TextAlignment;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TextAlignment", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.TextAlignment = value;
            }
        }
        
        public event IToolbarEvents_ButtonClickEventHandler ButtonClick;
        
        public event System.EventHandler Change;
        
        public event System.EventHandler ClickEvent;
        
        public event IToolbarEvents_MouseDownEventHandler MouseDownEvent;
        
        public event IToolbarEvents_MouseMoveEventHandler MouseMoveEvent;
        
        public event IToolbarEvents_MouseUpEventHandler MouseUpEvent;
        
        public event System.EventHandler DblClick;
        
        public event IToolbarEvents_OLEStartDragEventHandler OLEStartDrag;
        
        public event IToolbarEvents_OLEGiveFeedbackEventHandler OLEGiveFeedback;
        
        public event IToolbarEvents_OLESetDataEventHandler OLESetData;
        
        public event IToolbarEvents_OLECompleteDragEventHandler OLECompleteDrag;
        
        public event IToolbarEvents_OLEDragOverEventHandler OLEDragOver;
        
        public event IToolbarEvents_OLEDragDropEventHandler OLEDragDrop;
        
        public event IToolbarEvents_ButtonMenuClickEventHandler ButtonMenuClick;
        
        public event IToolbarEvents_ButtonDropDownEventHandler ButtonDropDown;
        
        public virtual void Refresh() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Refresh", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Refresh();
        }
        
        public virtual void Customize() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Customize", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Customize();
        }
        
        public virtual void SaveToolbar(string key, string subkey, string value) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SaveToolbar", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SaveToolbar(key, subkey, value);
        }
        
        public virtual void RestoreToolbar(string key, string subkey, string value) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RestoreToolbar", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.RestoreToolbar(key, subkey, value);
        }
        
        public virtual void OLEDrag() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDrag", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.OLEDrag();
        }
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxToolbarEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(MSComctlLib.IToolbarEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((MSComctlLib.IToolbar)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnButtonClick(object sender, IToolbarEvents_ButtonClickEvent e) {
            if ((this.ButtonClick != null)) {
                this.ButtonClick(sender, e);
            }
        }
        
        internal void RaiseOnChange(object sender, System.EventArgs e) {
            if ((this.Change != null)) {
                this.Change(sender, e);
            }
        }
        
        internal void RaiseOnClickEvent(object sender, System.EventArgs e) {
            if ((this.ClickEvent != null)) {
                this.ClickEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseDownEvent(object sender, IToolbarEvents_MouseDownEvent e) {
            if ((this.MouseDownEvent != null)) {
                this.MouseDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseMoveEvent(object sender, IToolbarEvents_MouseMoveEvent e) {
            if ((this.MouseMoveEvent != null)) {
                this.MouseMoveEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseUpEvent(object sender, IToolbarEvents_MouseUpEvent e) {
            if ((this.MouseUpEvent != null)) {
                this.MouseUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnDblClick(object sender, System.EventArgs e) {
            if ((this.DblClick != null)) {
                this.DblClick(sender, e);
            }
        }
        
        internal void RaiseOnOLEStartDrag(object sender, IToolbarEvents_OLEStartDragEvent e) {
            if ((this.OLEStartDrag != null)) {
                this.OLEStartDrag(sender, e);
            }
        }
        
        internal void RaiseOnOLEGiveFeedback(object sender, IToolbarEvents_OLEGiveFeedbackEvent e) {
            if ((this.OLEGiveFeedback != null)) {
                this.OLEGiveFeedback(sender, e);
            }
        }
        
        internal void RaiseOnOLESetData(object sender, IToolbarEvents_OLESetDataEvent e) {
            if ((this.OLESetData != null)) {
                this.OLESetData(sender, e);
            }
        }
        
        internal void RaiseOnOLECompleteDrag(object sender, IToolbarEvents_OLECompleteDragEvent e) {
            if ((this.OLECompleteDrag != null)) {
                this.OLECompleteDrag(sender, e);
            }
        }
        
        internal void RaiseOnOLEDragOver(object sender, IToolbarEvents_OLEDragOverEvent e) {
            if ((this.OLEDragOver != null)) {
                this.OLEDragOver(sender, e);
            }
        }
        
        internal void RaiseOnOLEDragDrop(object sender, IToolbarEvents_OLEDragDropEvent e) {
            if ((this.OLEDragDrop != null)) {
                this.OLEDragDrop(sender, e);
            }
        }
        
        internal void RaiseOnButtonMenuClick(object sender, IToolbarEvents_ButtonMenuClickEvent e) {
            if ((this.ButtonMenuClick != null)) {
                this.ButtonMenuClick(sender, e);
            }
        }
        
        internal void RaiseOnButtonDropDown(object sender, IToolbarEvents_ButtonDropDownEvent e) {
            if ((this.ButtonDropDown != null)) {
                this.ButtonDropDown(sender, e);
            }
        }
    }
    
    public delegate void IToolbarEvents_ButtonClickEventHandler(object sender, IToolbarEvents_ButtonClickEvent e);
    
    public class IToolbarEvents_ButtonClickEvent {
        
        public MSComctlLib.Button button;
        
        public IToolbarEvents_ButtonClickEvent(MSComctlLib.Button button) {
            this.button = button;
        }
    }
    
    public delegate void IToolbarEvents_MouseDownEventHandler(object sender, IToolbarEvents_MouseDownEvent e);
    
    public class IToolbarEvents_MouseDownEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public IToolbarEvents_MouseDownEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void IToolbarEvents_MouseMoveEventHandler(object sender, IToolbarEvents_MouseMoveEvent e);
    
    public class IToolbarEvents_MouseMoveEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public IToolbarEvents_MouseMoveEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void IToolbarEvents_MouseUpEventHandler(object sender, IToolbarEvents_MouseUpEvent e);
    
    public class IToolbarEvents_MouseUpEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public IToolbarEvents_MouseUpEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void IToolbarEvents_OLEStartDragEventHandler(object sender, IToolbarEvents_OLEStartDragEvent e);
    
    public class IToolbarEvents_OLEStartDragEvent {
        
        public MSComctlLib.DataObject data;
        
        public int allowedEffects;
        
        public IToolbarEvents_OLEStartDragEvent(MSComctlLib.DataObject data, int allowedEffects) {
            this.data = data;
            this.allowedEffects = allowedEffects;
        }
    }
    
    public delegate void IToolbarEvents_OLEGiveFeedbackEventHandler(object sender, IToolbarEvents_OLEGiveFeedbackEvent e);
    
    public class IToolbarEvents_OLEGiveFeedbackEvent {
        
        public int effect;
        
        public bool defaultCursors;
        
        public IToolbarEvents_OLEGiveFeedbackEvent(int effect, bool defaultCursors) {
            this.effect = effect;
            this.defaultCursors = defaultCursors;
        }
    }
    
    public delegate void IToolbarEvents_OLESetDataEventHandler(object sender, IToolbarEvents_OLESetDataEvent e);
    
    public class IToolbarEvents_OLESetDataEvent {
        
        public MSComctlLib.DataObject data;
        
        public short dataFormat;
        
        public IToolbarEvents_OLESetDataEvent(MSComctlLib.DataObject data, short dataFormat) {
            this.data = data;
            this.dataFormat = dataFormat;
        }
    }
    
    public delegate void IToolbarEvents_OLECompleteDragEventHandler(object sender, IToolbarEvents_OLECompleteDragEvent e);
    
    public class IToolbarEvents_OLECompleteDragEvent {
        
        public int effect;
        
        public IToolbarEvents_OLECompleteDragEvent(int effect) {
            this.effect = effect;
        }
    }
    
    public delegate void IToolbarEvents_OLEDragOverEventHandler(object sender, IToolbarEvents_OLEDragOverEvent e);
    
    public class IToolbarEvents_OLEDragOverEvent {
        
        public MSComctlLib.DataObject data;
        
        public int effect;
        
        public short button;
        
        public short shift;
        
        public float x;
        
        public float y;
        
        public short state;
        
        public IToolbarEvents_OLEDragOverEvent(MSComctlLib.DataObject data, int effect, short button, short shift, float x, float y, short state) {
            this.data = data;
            this.effect = effect;
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
            this.state = state;
        }
    }
    
    public delegate void IToolbarEvents_OLEDragDropEventHandler(object sender, IToolbarEvents_OLEDragDropEvent e);
    
    public class IToolbarEvents_OLEDragDropEvent {
        
        public MSComctlLib.DataObject data;
        
        public int effect;
        
        public short button;
        
        public short shift;
        
        public float x;
        
        public float y;
        
        public IToolbarEvents_OLEDragDropEvent(MSComctlLib.DataObject data, int effect, short button, short shift, float x, float y) {
            this.data = data;
            this.effect = effect;
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void IToolbarEvents_ButtonMenuClickEventHandler(object sender, IToolbarEvents_ButtonMenuClickEvent e);
    
    public class IToolbarEvents_ButtonMenuClickEvent {
        
        public MSComctlLib.ButtonMenu buttonMenu;
        
        public IToolbarEvents_ButtonMenuClickEvent(MSComctlLib.ButtonMenu buttonMenu) {
            this.buttonMenu = buttonMenu;
        }
    }
    
    public delegate void IToolbarEvents_ButtonDropDownEventHandler(object sender, IToolbarEvents_ButtonDropDownEvent e);
    
    public class IToolbarEvents_ButtonDropDownEvent {
        
        public MSComctlLib.Button button;
        
        public IToolbarEvents_ButtonDropDownEvent(MSComctlLib.Button button) {
            this.button = button;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxToolbarEventMulticaster : MSComctlLib.IToolbarEvents {
        
        private AxToolbar parent;
        
        public AxToolbarEventMulticaster(AxToolbar parent) {
            this.parent = parent;
        }
        
        public virtual void ButtonClick(MSComctlLib.Button button) {
            IToolbarEvents_ButtonClickEvent buttonclickEvent = new IToolbarEvents_ButtonClickEvent(button);
            this.parent.RaiseOnButtonClick(this.parent, buttonclickEvent);
        }
        
        public virtual void Change() {
            System.EventArgs changeEvent = new System.EventArgs();
            this.parent.RaiseOnChange(this.parent, changeEvent);
        }
        
        public virtual void Click() {
            System.EventArgs clickEvent = new System.EventArgs();
            this.parent.RaiseOnClickEvent(this.parent, clickEvent);
        }
        
        public virtual void MouseDown(short button, short shift, int x, int y) {
            IToolbarEvents_MouseDownEvent mousedownEvent = new IToolbarEvents_MouseDownEvent(button, shift, x, y);
            this.parent.RaiseOnMouseDownEvent(this.parent, mousedownEvent);
        }
        
        public virtual void MouseMove(short button, short shift, int x, int y) {
            IToolbarEvents_MouseMoveEvent mousemoveEvent = new IToolbarEvents_MouseMoveEvent(button, shift, x, y);
            this.parent.RaiseOnMouseMoveEvent(this.parent, mousemoveEvent);
        }
        
        public virtual void MouseUp(short button, short shift, int x, int y) {
            IToolbarEvents_MouseUpEvent mouseupEvent = new IToolbarEvents_MouseUpEvent(button, shift, x, y);
            this.parent.RaiseOnMouseUpEvent(this.parent, mouseupEvent);
        }
        
        public virtual void DblClick() {
            System.EventArgs dblclickEvent = new System.EventArgs();
            this.parent.RaiseOnDblClick(this.parent, dblclickEvent);
        }
        
        public virtual void OLEStartDrag(ref MSComctlLib.DataObject data, ref int allowedEffects) {
            IToolbarEvents_OLEStartDragEvent olestartdragEvent = new IToolbarEvents_OLEStartDragEvent(data, allowedEffects);
            this.parent.RaiseOnOLEStartDrag(this.parent, olestartdragEvent);
            data = olestartdragEvent.data;
            allowedEffects = olestartdragEvent.allowedEffects;
        }
        
        public virtual void OLEGiveFeedback(ref int effect, ref bool defaultCursors) {
            IToolbarEvents_OLEGiveFeedbackEvent olegivefeedbackEvent = new IToolbarEvents_OLEGiveFeedbackEvent(effect, defaultCursors);
            this.parent.RaiseOnOLEGiveFeedback(this.parent, olegivefeedbackEvent);
            effect = olegivefeedbackEvent.effect;
            defaultCursors = olegivefeedbackEvent.defaultCursors;
        }
        
        public virtual void OLESetData(ref MSComctlLib.DataObject data, ref short dataFormat) {
            IToolbarEvents_OLESetDataEvent olesetdataEvent = new IToolbarEvents_OLESetDataEvent(data, dataFormat);
            this.parent.RaiseOnOLESetData(this.parent, olesetdataEvent);
            data = olesetdataEvent.data;
            dataFormat = olesetdataEvent.dataFormat;
        }
        
        public virtual void OLECompleteDrag(ref int effect) {
            IToolbarEvents_OLECompleteDragEvent olecompletedragEvent = new IToolbarEvents_OLECompleteDragEvent(effect);
            this.parent.RaiseOnOLECompleteDrag(this.parent, olecompletedragEvent);
            effect = olecompletedragEvent.effect;
        }
        
        public virtual void OLEDragOver(ref MSComctlLib.DataObject data, ref int effect, ref short button, ref short shift, ref float x, ref float y, ref short state) {
            IToolbarEvents_OLEDragOverEvent oledragoverEvent = new IToolbarEvents_OLEDragOverEvent(data, effect, button, shift, x, y, state);
            this.parent.RaiseOnOLEDragOver(this.parent, oledragoverEvent);
            data = oledragoverEvent.data;
            effect = oledragoverEvent.effect;
            button = oledragoverEvent.button;
            shift = oledragoverEvent.shift;
            x = oledragoverEvent.x;
            y = oledragoverEvent.y;
            state = oledragoverEvent.state;
        }
        
        public virtual void OLEDragDrop(ref MSComctlLib.DataObject data, ref int effect, ref short button, ref short shift, ref float x, ref float y) {
            IToolbarEvents_OLEDragDropEvent oledragdropEvent = new IToolbarEvents_OLEDragDropEvent(data, effect, button, shift, x, y);
            this.parent.RaiseOnOLEDragDrop(this.parent, oledragdropEvent);
            data = oledragdropEvent.data;
            effect = oledragdropEvent.effect;
            button = oledragdropEvent.button;
            shift = oledragdropEvent.shift;
            x = oledragdropEvent.x;
            y = oledragdropEvent.y;
        }
        
        public virtual void ButtonMenuClick(MSComctlLib.ButtonMenu buttonMenu) {
            IToolbarEvents_ButtonMenuClickEvent buttonmenuclickEvent = new IToolbarEvents_ButtonMenuClickEvent(buttonMenu);
            this.parent.RaiseOnButtonMenuClick(this.parent, buttonmenuclickEvent);
        }
        
        public virtual void ButtonDropDown(MSComctlLib.Button button) {
            IToolbarEvents_ButtonDropDownEvent buttondropdownEvent = new IToolbarEvents_ButtonDropDownEvent(button);
            this.parent.RaiseOnButtonDropDown(this.parent, buttondropdownEvent);
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{8e3867a3-8586-11d1-b16a-00c0f0283628}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("PanelClick")]
    public class AxStatusBar : System.Windows.Forms.AxHost {
        
        private MSComctlLib.IStatusBar ocx;
        
        private AxStatusBarEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxStatusBar() : 
                base("8e3867a3-8586-11d1-b16a-00c0f0283628") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual string SimpleText {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SimpleText", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SimpleText;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SimpleText", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SimpleText = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual MSComctlLib.SbarStyleConstants Style {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Style", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Style;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Style", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Style = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual MSComctlLib.Panels Panels {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Panels", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Panels;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Panels", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Panels = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual MSComctlLib.MousePointerConstants MousePointer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MousePointer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MousePointer;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MousePointer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MousePointer = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IPictureDisp")]
        public virtual System.Drawing.Image MouseIcon {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MouseIcon", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetPictureFromIPicture(this.ocx.MouseIcon);
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MouseIcon", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MouseIcon = ((stdole.IPictureDisp)(GetIPictureFromPicture(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual bool ShowTips {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowTips", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ShowTips;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowTips", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ShowTips = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual string PanelProperties {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PanelProperties", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.PanelProperties;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PanelProperties", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.PanelProperties = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1551)]
        public virtual MSComctlLib.OLEDropConstants OLEDropMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDropMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.OLEDropMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDropMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.OLEDropMode = value;
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-514)]
        public override bool Enabled {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return this.ocx.Enabled;
                }
                else {
                    return base.Enabled;
                }
            }
            set {
                base.Enabled = value;
                if ((this.ocx != null)) {
                    this.ocx.Enabled = value;
                }
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-512)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IFontDisp")]
        public override System.Drawing.Font Font {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetFontFromIFont(this.ocx.Font);
                }
                else {
                    return base.Font;
                }
            }
            set {
                base.Font = value;
                if ((this.ocx != null)) {
                    this.ocx.Font = ((stdole.IFontDisp)(GetIFontFromFont(value)));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-515)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.Int32")]
        public virtual int hWnd {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("hWnd", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return (this.ocx.hWnd);
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("hWnd", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.hWnd = ((int)((value)));
            }
        }
        
        public event IStatusBarEvents_PanelClickEventHandler PanelClick;
        
        public event IStatusBarEvents_PanelDblClickEventHandler PanelDblClick;
        
        public event IStatusBarEvents_MouseDownEventHandler MouseDownEvent;
        
        public event IStatusBarEvents_MouseMoveEventHandler MouseMoveEvent;
        
        public event IStatusBarEvents_MouseUpEventHandler MouseUpEvent;
        
        public event System.EventHandler ClickEvent;
        
        public event System.EventHandler DblClick;
        
        public event IStatusBarEvents_OLEStartDragEventHandler OLEStartDrag;
        
        public event IStatusBarEvents_OLEGiveFeedbackEventHandler OLEGiveFeedback;
        
        public event IStatusBarEvents_OLESetDataEventHandler OLESetData;
        
        public event IStatusBarEvents_OLECompleteDragEventHandler OLECompleteDrag;
        
        public event IStatusBarEvents_OLEDragOverEventHandler OLEDragOver;
        
        public event IStatusBarEvents_OLEDragDropEventHandler OLEDragDrop;
        
        public virtual void Refresh() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Refresh", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Refresh();
        }
        
        public virtual void OLEDrag() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDrag", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.OLEDrag();
        }
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxStatusBarEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(MSComctlLib.IStatusBarEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((MSComctlLib.IStatusBar)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnPanelClick(object sender, IStatusBarEvents_PanelClickEvent e) {
            if ((this.PanelClick != null)) {
                this.PanelClick(sender, e);
            }
        }
        
        internal void RaiseOnPanelDblClick(object sender, IStatusBarEvents_PanelDblClickEvent e) {
            if ((this.PanelDblClick != null)) {
                this.PanelDblClick(sender, e);
            }
        }
        
        internal void RaiseOnMouseDownEvent(object sender, IStatusBarEvents_MouseDownEvent e) {
            if ((this.MouseDownEvent != null)) {
                this.MouseDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseMoveEvent(object sender, IStatusBarEvents_MouseMoveEvent e) {
            if ((this.MouseMoveEvent != null)) {
                this.MouseMoveEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseUpEvent(object sender, IStatusBarEvents_MouseUpEvent e) {
            if ((this.MouseUpEvent != null)) {
                this.MouseUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnClickEvent(object sender, System.EventArgs e) {
            if ((this.ClickEvent != null)) {
                this.ClickEvent(sender, e);
            }
        }
        
        internal void RaiseOnDblClick(object sender, System.EventArgs e) {
            if ((this.DblClick != null)) {
                this.DblClick(sender, e);
            }
        }
        
        internal void RaiseOnOLEStartDrag(object sender, IStatusBarEvents_OLEStartDragEvent e) {
            if ((this.OLEStartDrag != null)) {
                this.OLEStartDrag(sender, e);
            }
        }
        
        internal void RaiseOnOLEGiveFeedback(object sender, IStatusBarEvents_OLEGiveFeedbackEvent e) {
            if ((this.OLEGiveFeedback != null)) {
                this.OLEGiveFeedback(sender, e);
            }
        }
        
        internal void RaiseOnOLESetData(object sender, IStatusBarEvents_OLESetDataEvent e) {
            if ((this.OLESetData != null)) {
                this.OLESetData(sender, e);
            }
        }
        
        internal void RaiseOnOLECompleteDrag(object sender, IStatusBarEvents_OLECompleteDragEvent e) {
            if ((this.OLECompleteDrag != null)) {
                this.OLECompleteDrag(sender, e);
            }
        }
        
        internal void RaiseOnOLEDragOver(object sender, IStatusBarEvents_OLEDragOverEvent e) {
            if ((this.OLEDragOver != null)) {
                this.OLEDragOver(sender, e);
            }
        }
        
        internal void RaiseOnOLEDragDrop(object sender, IStatusBarEvents_OLEDragDropEvent e) {
            if ((this.OLEDragDrop != null)) {
                this.OLEDragDrop(sender, e);
            }
        }
    }
    
    public delegate void IStatusBarEvents_PanelClickEventHandler(object sender, IStatusBarEvents_PanelClickEvent e);
    
    public class IStatusBarEvents_PanelClickEvent {
        
        public MSComctlLib.Panel panel;
        
        public IStatusBarEvents_PanelClickEvent(MSComctlLib.Panel panel) {
            this.panel = panel;
        }
    }
    
    public delegate void IStatusBarEvents_PanelDblClickEventHandler(object sender, IStatusBarEvents_PanelDblClickEvent e);
    
    public class IStatusBarEvents_PanelDblClickEvent {
        
        public MSComctlLib.Panel panel;
        
        public IStatusBarEvents_PanelDblClickEvent(MSComctlLib.Panel panel) {
            this.panel = panel;
        }
    }
    
    public delegate void IStatusBarEvents_MouseDownEventHandler(object sender, IStatusBarEvents_MouseDownEvent e);
    
    public class IStatusBarEvents_MouseDownEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public IStatusBarEvents_MouseDownEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void IStatusBarEvents_MouseMoveEventHandler(object sender, IStatusBarEvents_MouseMoveEvent e);
    
    public class IStatusBarEvents_MouseMoveEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public IStatusBarEvents_MouseMoveEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void IStatusBarEvents_MouseUpEventHandler(object sender, IStatusBarEvents_MouseUpEvent e);
    
    public class IStatusBarEvents_MouseUpEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public IStatusBarEvents_MouseUpEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void IStatusBarEvents_OLEStartDragEventHandler(object sender, IStatusBarEvents_OLEStartDragEvent e);
    
    public class IStatusBarEvents_OLEStartDragEvent {
        
        public MSComctlLib.DataObject data;
        
        public int allowedEffects;
        
        public IStatusBarEvents_OLEStartDragEvent(MSComctlLib.DataObject data, int allowedEffects) {
            this.data = data;
            this.allowedEffects = allowedEffects;
        }
    }
    
    public delegate void IStatusBarEvents_OLEGiveFeedbackEventHandler(object sender, IStatusBarEvents_OLEGiveFeedbackEvent e);
    
    public class IStatusBarEvents_OLEGiveFeedbackEvent {
        
        public int effect;
        
        public bool defaultCursors;
        
        public IStatusBarEvents_OLEGiveFeedbackEvent(int effect, bool defaultCursors) {
            this.effect = effect;
            this.defaultCursors = defaultCursors;
        }
    }
    
    public delegate void IStatusBarEvents_OLESetDataEventHandler(object sender, IStatusBarEvents_OLESetDataEvent e);
    
    public class IStatusBarEvents_OLESetDataEvent {
        
        public MSComctlLib.DataObject data;
        
        public short dataFormat;
        
        public IStatusBarEvents_OLESetDataEvent(MSComctlLib.DataObject data, short dataFormat) {
            this.data = data;
            this.dataFormat = dataFormat;
        }
    }
    
    public delegate void IStatusBarEvents_OLECompleteDragEventHandler(object sender, IStatusBarEvents_OLECompleteDragEvent e);
    
    public class IStatusBarEvents_OLECompleteDragEvent {
        
        public int effect;
        
        public IStatusBarEvents_OLECompleteDragEvent(int effect) {
            this.effect = effect;
        }
    }
    
    public delegate void IStatusBarEvents_OLEDragOverEventHandler(object sender, IStatusBarEvents_OLEDragOverEvent e);
    
    public class IStatusBarEvents_OLEDragOverEvent {
        
        public MSComctlLib.DataObject data;
        
        public int effect;
        
        public short button;
        
        public short shift;
        
        public float x;
        
        public float y;
        
        public short state;
        
        public IStatusBarEvents_OLEDragOverEvent(MSComctlLib.DataObject data, int effect, short button, short shift, float x, float y, short state) {
            this.data = data;
            this.effect = effect;
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
            this.state = state;
        }
    }
    
    public delegate void IStatusBarEvents_OLEDragDropEventHandler(object sender, IStatusBarEvents_OLEDragDropEvent e);
    
    public class IStatusBarEvents_OLEDragDropEvent {
        
        public MSComctlLib.DataObject data;
        
        public int effect;
        
        public short button;
        
        public short shift;
        
        public float x;
        
        public float y;
        
        public IStatusBarEvents_OLEDragDropEvent(MSComctlLib.DataObject data, int effect, short button, short shift, float x, float y) {
            this.data = data;
            this.effect = effect;
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxStatusBarEventMulticaster : MSComctlLib.IStatusBarEvents {
        
        private AxStatusBar parent;
        
        public AxStatusBarEventMulticaster(AxStatusBar parent) {
            this.parent = parent;
        }
        
        public virtual void PanelClick(MSComctlLib.Panel panel) {
            IStatusBarEvents_PanelClickEvent panelclickEvent = new IStatusBarEvents_PanelClickEvent(panel);
            this.parent.RaiseOnPanelClick(this.parent, panelclickEvent);
        }
        
        public virtual void PanelDblClick(MSComctlLib.Panel panel) {
            IStatusBarEvents_PanelDblClickEvent paneldblclickEvent = new IStatusBarEvents_PanelDblClickEvent(panel);
            this.parent.RaiseOnPanelDblClick(this.parent, paneldblclickEvent);
        }
        
        public virtual void MouseDown(short button, short shift, int x, int y) {
            IStatusBarEvents_MouseDownEvent mousedownEvent = new IStatusBarEvents_MouseDownEvent(button, shift, x, y);
            this.parent.RaiseOnMouseDownEvent(this.parent, mousedownEvent);
        }
        
        public virtual void MouseMove(short button, short shift, int x, int y) {
            IStatusBarEvents_MouseMoveEvent mousemoveEvent = new IStatusBarEvents_MouseMoveEvent(button, shift, x, y);
            this.parent.RaiseOnMouseMoveEvent(this.parent, mousemoveEvent);
        }
        
        public virtual void MouseUp(short button, short shift, int x, int y) {
            IStatusBarEvents_MouseUpEvent mouseupEvent = new IStatusBarEvents_MouseUpEvent(button, shift, x, y);
            this.parent.RaiseOnMouseUpEvent(this.parent, mouseupEvent);
        }
        
        public virtual void Click() {
            System.EventArgs clickEvent = new System.EventArgs();
            this.parent.RaiseOnClickEvent(this.parent, clickEvent);
        }
        
        public virtual void DblClick() {
            System.EventArgs dblclickEvent = new System.EventArgs();
            this.parent.RaiseOnDblClick(this.parent, dblclickEvent);
        }
        
        public virtual void OLEStartDrag(ref MSComctlLib.DataObject data, ref int allowedEffects) {
            IStatusBarEvents_OLEStartDragEvent olestartdragEvent = new IStatusBarEvents_OLEStartDragEvent(data, allowedEffects);
            this.parent.RaiseOnOLEStartDrag(this.parent, olestartdragEvent);
            data = olestartdragEvent.data;
            allowedEffects = olestartdragEvent.allowedEffects;
        }
        
        public virtual void OLEGiveFeedback(ref int effect, ref bool defaultCursors) {
            IStatusBarEvents_OLEGiveFeedbackEvent olegivefeedbackEvent = new IStatusBarEvents_OLEGiveFeedbackEvent(effect, defaultCursors);
            this.parent.RaiseOnOLEGiveFeedback(this.parent, olegivefeedbackEvent);
            effect = olegivefeedbackEvent.effect;
            defaultCursors = olegivefeedbackEvent.defaultCursors;
        }
        
        public virtual void OLESetData(ref MSComctlLib.DataObject data, ref short dataFormat) {
            IStatusBarEvents_OLESetDataEvent olesetdataEvent = new IStatusBarEvents_OLESetDataEvent(data, dataFormat);
            this.parent.RaiseOnOLESetData(this.parent, olesetdataEvent);
            data = olesetdataEvent.data;
            dataFormat = olesetdataEvent.dataFormat;
        }
        
        public virtual void OLECompleteDrag(ref int effect) {
            IStatusBarEvents_OLECompleteDragEvent olecompletedragEvent = new IStatusBarEvents_OLECompleteDragEvent(effect);
            this.parent.RaiseOnOLECompleteDrag(this.parent, olecompletedragEvent);
            effect = olecompletedragEvent.effect;
        }
        
        public virtual void OLEDragOver(ref MSComctlLib.DataObject data, ref int effect, ref short button, ref short shift, ref float x, ref float y, ref short state) {
            IStatusBarEvents_OLEDragOverEvent oledragoverEvent = new IStatusBarEvents_OLEDragOverEvent(data, effect, button, shift, x, y, state);
            this.parent.RaiseOnOLEDragOver(this.parent, oledragoverEvent);
            data = oledragoverEvent.data;
            effect = oledragoverEvent.effect;
            button = oledragoverEvent.button;
            shift = oledragoverEvent.shift;
            x = oledragoverEvent.x;
            y = oledragoverEvent.y;
            state = oledragoverEvent.state;
        }
        
        public virtual void OLEDragDrop(ref MSComctlLib.DataObject data, ref int effect, ref short button, ref short shift, ref float x, ref float y) {
            IStatusBarEvents_OLEDragDropEvent oledragdropEvent = new IStatusBarEvents_OLEDragDropEvent(data, effect, button, shift, x, y);
            this.parent.RaiseOnOLEDragDrop(this.parent, oledragdropEvent);
            data = oledragdropEvent.data;
            effect = oledragdropEvent.effect;
            button = oledragdropEvent.button;
            shift = oledragdropEvent.shift;
            x = oledragdropEvent.x;
            y = oledragdropEvent.y;
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{35053a22-8589-11d1-b16a-00c0f0283628}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultProperty("ControlDefault")]
    public class AxProgressBar : System.Windows.Forms.AxHost {
        
        private MSComctlLib.IProgressBar ocx;
        
        private AxProgressBarEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxProgressBar() : 
                base("35053a22-8589-11d1-b16a-00c0f0283628") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(0)]
        public virtual float ControlDefault {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ControlDefault", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ControlDefault;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ControlDefault", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ControlDefault = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual float Max {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Max", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Max;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Max", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Max = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual float Min {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Min", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Min;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Min", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Min = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual MSComctlLib.MousePointerConstants MousePointer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MousePointer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MousePointer;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MousePointer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MousePointer = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IPictureDisp")]
        public virtual System.Drawing.Image MouseIcon {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MouseIcon", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetPictureFromIPicture(this.ocx.MouseIcon);
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MouseIcon", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MouseIcon = ((stdole.IPictureDisp)(GetIPictureFromPicture(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual float Value {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Value", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Value;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Value", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Value = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1551)]
        public virtual MSComctlLib.OLEDropConstants OLEDropMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDropMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.OLEDropMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDropMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.OLEDropMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-520)]
        public virtual MSComctlLib.AppearanceConstants Appearance {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Appearance", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Appearance;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Appearance", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Appearance = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-504)]
        public virtual MSComctlLib.BorderStyleConstants BorderStyle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BorderStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.BorderStyle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BorderStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BorderStyle = value;
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-514)]
        public override bool Enabled {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return this.ocx.Enabled;
                }
                else {
                    return base.Enabled;
                }
            }
            set {
                base.Enabled = value;
                if ((this.ocx != null)) {
                    this.ocx.Enabled = value;
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-515)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.Int32")]
        public virtual int hWnd {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("hWnd", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return (this.ocx.hWnd);
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual MSComctlLib.OrientationConstants Orientation {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Orientation", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Orientation;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Orientation", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Orientation = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual MSComctlLib.ScrollingConstants Scrolling {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Scrolling", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Scrolling;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Scrolling", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Scrolling = value;
            }
        }
        
        public event IProgressBarEvents_MouseDownEventHandler MouseDownEvent;
        
        public event IProgressBarEvents_MouseMoveEventHandler MouseMoveEvent;
        
        public event IProgressBarEvents_MouseUpEventHandler MouseUpEvent;
        
        public event System.EventHandler ClickEvent;
        
        public event IProgressBarEvents_OLEStartDragEventHandler OLEStartDrag;
        
        public event IProgressBarEvents_OLEGiveFeedbackEventHandler OLEGiveFeedback;
        
        public event IProgressBarEvents_OLESetDataEventHandler OLESetData;
        
        public event IProgressBarEvents_OLECompleteDragEventHandler OLECompleteDrag;
        
        public event IProgressBarEvents_OLEDragOverEventHandler OLEDragOver;
        
        public event IProgressBarEvents_OLEDragDropEventHandler OLEDragDrop;
        
        public virtual void OLEDrag() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDrag", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.OLEDrag();
        }
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        public virtual void Refresh() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Refresh", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Refresh();
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxProgressBarEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(MSComctlLib.IProgressBarEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((MSComctlLib.IProgressBar)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnMouseDownEvent(object sender, IProgressBarEvents_MouseDownEvent e) {
            if ((this.MouseDownEvent != null)) {
                this.MouseDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseMoveEvent(object sender, IProgressBarEvents_MouseMoveEvent e) {
            if ((this.MouseMoveEvent != null)) {
                this.MouseMoveEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseUpEvent(object sender, IProgressBarEvents_MouseUpEvent e) {
            if ((this.MouseUpEvent != null)) {
                this.MouseUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnClickEvent(object sender, System.EventArgs e) {
            if ((this.ClickEvent != null)) {
                this.ClickEvent(sender, e);
            }
        }
        
        internal void RaiseOnOLEStartDrag(object sender, IProgressBarEvents_OLEStartDragEvent e) {
            if ((this.OLEStartDrag != null)) {
                this.OLEStartDrag(sender, e);
            }
        }
        
        internal void RaiseOnOLEGiveFeedback(object sender, IProgressBarEvents_OLEGiveFeedbackEvent e) {
            if ((this.OLEGiveFeedback != null)) {
                this.OLEGiveFeedback(sender, e);
            }
        }
        
        internal void RaiseOnOLESetData(object sender, IProgressBarEvents_OLESetDataEvent e) {
            if ((this.OLESetData != null)) {
                this.OLESetData(sender, e);
            }
        }
        
        internal void RaiseOnOLECompleteDrag(object sender, IProgressBarEvents_OLECompleteDragEvent e) {
            if ((this.OLECompleteDrag != null)) {
                this.OLECompleteDrag(sender, e);
            }
        }
        
        internal void RaiseOnOLEDragOver(object sender, IProgressBarEvents_OLEDragOverEvent e) {
            if ((this.OLEDragOver != null)) {
                this.OLEDragOver(sender, e);
            }
        }
        
        internal void RaiseOnOLEDragDrop(object sender, IProgressBarEvents_OLEDragDropEvent e) {
            if ((this.OLEDragDrop != null)) {
                this.OLEDragDrop(sender, e);
            }
        }
    }
    
    public delegate void IProgressBarEvents_MouseDownEventHandler(object sender, IProgressBarEvents_MouseDownEvent e);
    
    public class IProgressBarEvents_MouseDownEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public IProgressBarEvents_MouseDownEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void IProgressBarEvents_MouseMoveEventHandler(object sender, IProgressBarEvents_MouseMoveEvent e);
    
    public class IProgressBarEvents_MouseMoveEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public IProgressBarEvents_MouseMoveEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void IProgressBarEvents_MouseUpEventHandler(object sender, IProgressBarEvents_MouseUpEvent e);
    
    public class IProgressBarEvents_MouseUpEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public IProgressBarEvents_MouseUpEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void IProgressBarEvents_OLEStartDragEventHandler(object sender, IProgressBarEvents_OLEStartDragEvent e);
    
    public class IProgressBarEvents_OLEStartDragEvent {
        
        public MSComctlLib.DataObject data;
        
        public int allowedEffects;
        
        public IProgressBarEvents_OLEStartDragEvent(MSComctlLib.DataObject data, int allowedEffects) {
            this.data = data;
            this.allowedEffects = allowedEffects;
        }
    }
    
    public delegate void IProgressBarEvents_OLEGiveFeedbackEventHandler(object sender, IProgressBarEvents_OLEGiveFeedbackEvent e);
    
    public class IProgressBarEvents_OLEGiveFeedbackEvent {
        
        public int effect;
        
        public bool defaultCursors;
        
        public IProgressBarEvents_OLEGiveFeedbackEvent(int effect, bool defaultCursors) {
            this.effect = effect;
            this.defaultCursors = defaultCursors;
        }
    }
    
    public delegate void IProgressBarEvents_OLESetDataEventHandler(object sender, IProgressBarEvents_OLESetDataEvent e);
    
    public class IProgressBarEvents_OLESetDataEvent {
        
        public MSComctlLib.DataObject data;
        
        public short dataFormat;
        
        public IProgressBarEvents_OLESetDataEvent(MSComctlLib.DataObject data, short dataFormat) {
            this.data = data;
            this.dataFormat = dataFormat;
        }
    }
    
    public delegate void IProgressBarEvents_OLECompleteDragEventHandler(object sender, IProgressBarEvents_OLECompleteDragEvent e);
    
    public class IProgressBarEvents_OLECompleteDragEvent {
        
        public int effect;
        
        public IProgressBarEvents_OLECompleteDragEvent(int effect) {
            this.effect = effect;
        }
    }
    
    public delegate void IProgressBarEvents_OLEDragOverEventHandler(object sender, IProgressBarEvents_OLEDragOverEvent e);
    
    public class IProgressBarEvents_OLEDragOverEvent {
        
        public MSComctlLib.DataObject data;
        
        public int effect;
        
        public short button;
        
        public short shift;
        
        public float x;
        
        public float y;
        
        public short state;
        
        public IProgressBarEvents_OLEDragOverEvent(MSComctlLib.DataObject data, int effect, short button, short shift, float x, float y, short state) {
            this.data = data;
            this.effect = effect;
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
            this.state = state;
        }
    }
    
    public delegate void IProgressBarEvents_OLEDragDropEventHandler(object sender, IProgressBarEvents_OLEDragDropEvent e);
    
    public class IProgressBarEvents_OLEDragDropEvent {
        
        public MSComctlLib.DataObject data;
        
        public int effect;
        
        public short button;
        
        public short shift;
        
        public float x;
        
        public float y;
        
        public IProgressBarEvents_OLEDragDropEvent(MSComctlLib.DataObject data, int effect, short button, short shift, float x, float y) {
            this.data = data;
            this.effect = effect;
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxProgressBarEventMulticaster : MSComctlLib.IProgressBarEvents {
        
        private AxProgressBar parent;
        
        public AxProgressBarEventMulticaster(AxProgressBar parent) {
            this.parent = parent;
        }
        
        public virtual void MouseDown(short button, short shift, int x, int y) {
            IProgressBarEvents_MouseDownEvent mousedownEvent = new IProgressBarEvents_MouseDownEvent(button, shift, x, y);
            this.parent.RaiseOnMouseDownEvent(this.parent, mousedownEvent);
        }
        
        public virtual void MouseMove(short button, short shift, int x, int y) {
            IProgressBarEvents_MouseMoveEvent mousemoveEvent = new IProgressBarEvents_MouseMoveEvent(button, shift, x, y);
            this.parent.RaiseOnMouseMoveEvent(this.parent, mousemoveEvent);
        }
        
        public virtual void MouseUp(short button, short shift, int x, int y) {
            IProgressBarEvents_MouseUpEvent mouseupEvent = new IProgressBarEvents_MouseUpEvent(button, shift, x, y);
            this.parent.RaiseOnMouseUpEvent(this.parent, mouseupEvent);
        }
        
        public virtual void Click() {
            System.EventArgs clickEvent = new System.EventArgs();
            this.parent.RaiseOnClickEvent(this.parent, clickEvent);
        }
        
        public virtual void OLEStartDrag(ref MSComctlLib.DataObject data, ref int allowedEffects) {
            IProgressBarEvents_OLEStartDragEvent olestartdragEvent = new IProgressBarEvents_OLEStartDragEvent(data, allowedEffects);
            this.parent.RaiseOnOLEStartDrag(this.parent, olestartdragEvent);
            data = olestartdragEvent.data;
            allowedEffects = olestartdragEvent.allowedEffects;
        }
        
        public virtual void OLEGiveFeedback(ref int effect, ref bool defaultCursors) {
            IProgressBarEvents_OLEGiveFeedbackEvent olegivefeedbackEvent = new IProgressBarEvents_OLEGiveFeedbackEvent(effect, defaultCursors);
            this.parent.RaiseOnOLEGiveFeedback(this.parent, olegivefeedbackEvent);
            effect = olegivefeedbackEvent.effect;
            defaultCursors = olegivefeedbackEvent.defaultCursors;
        }
        
        public virtual void OLESetData(ref MSComctlLib.DataObject data, ref short dataFormat) {
            IProgressBarEvents_OLESetDataEvent olesetdataEvent = new IProgressBarEvents_OLESetDataEvent(data, dataFormat);
            this.parent.RaiseOnOLESetData(this.parent, olesetdataEvent);
            data = olesetdataEvent.data;
            dataFormat = olesetdataEvent.dataFormat;
        }
        
        public virtual void OLECompleteDrag(ref int effect) {
            IProgressBarEvents_OLECompleteDragEvent olecompletedragEvent = new IProgressBarEvents_OLECompleteDragEvent(effect);
            this.parent.RaiseOnOLECompleteDrag(this.parent, olecompletedragEvent);
            effect = olecompletedragEvent.effect;
        }
        
        public virtual void OLEDragOver(ref MSComctlLib.DataObject data, ref int effect, ref short button, ref short shift, ref float x, ref float y, ref short state) {
            IProgressBarEvents_OLEDragOverEvent oledragoverEvent = new IProgressBarEvents_OLEDragOverEvent(data, effect, button, shift, x, y, state);
            this.parent.RaiseOnOLEDragOver(this.parent, oledragoverEvent);
            data = oledragoverEvent.data;
            effect = oledragoverEvent.effect;
            button = oledragoverEvent.button;
            shift = oledragoverEvent.shift;
            x = oledragoverEvent.x;
            y = oledragoverEvent.y;
            state = oledragoverEvent.state;
        }
        
        public virtual void OLEDragDrop(ref MSComctlLib.DataObject data, ref int effect, ref short button, ref short shift, ref float x, ref float y) {
            IProgressBarEvents_OLEDragDropEvent oledragdropEvent = new IProgressBarEvents_OLEDragDropEvent(data, effect, button, shift, x, y);
            this.parent.RaiseOnOLEDragDrop(this.parent, oledragdropEvent);
            data = oledragdropEvent.data;
            effect = oledragdropEvent.effect;
            button = oledragdropEvent.button;
            shift = oledragdropEvent.shift;
            x = oledragdropEvent.x;
            y = oledragdropEvent.y;
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{c74190b6-8589-11d1-b16a-00c0f0283628}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("BeforeLabelEdit")]
    public class AxTreeView : System.Windows.Forms.AxHost {
        
        private MSComctlLib.ITreeView ocx;
        
        private AxTreeViewEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxTreeView() : 
                base("c74190b6-8589-11d1-b16a-00c0f0283628") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual MSComctlLib.Node DropHighlight {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DropHighlight", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DropHighlight;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DropHighlight", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.DropHighlight = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual bool HideSelection {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HideSelection", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.HideSelection;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HideSelection", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.HideSelection = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual object ImageList {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImageList", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ImageList;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImageList", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ImageList = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual float Indentation {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Indentation", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Indentation;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Indentation", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Indentation = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual MSComctlLib.LabelEditConstants LabelEdit {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LabelEdit", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.LabelEdit;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LabelEdit", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.LabelEdit = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual MSComctlLib.TreeLineStyleConstants LineStyle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LineStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.LineStyle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LineStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.LineStyle = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual MSComctlLib.MousePointerConstants MousePointer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MousePointer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MousePointer;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MousePointer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MousePointer = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IPictureDisp")]
        public virtual System.Drawing.Image MouseIcon {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MouseIcon", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetPictureFromIPicture(this.ocx.MouseIcon);
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MouseIcon", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MouseIcon = ((stdole.IPictureDisp)(GetIPictureFromPicture(value)));
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual MSComctlLib.Nodes Nodes {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Nodes", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Nodes;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Nodes", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Nodes = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        public virtual string PathSeparator {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PathSeparator", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.PathSeparator;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PathSeparator", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.PathSeparator = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        public virtual MSComctlLib.Node SelectedItem {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelectedItem", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SelectedItem;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelectedItem", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SelectedItem = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(12)]
        public virtual bool Sorted {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Sorted", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Sorted;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Sorted", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Sorted = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        public virtual MSComctlLib.TreeStyleConstants Style {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Style", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Style;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Style", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Style = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1550)]
        public virtual MSComctlLib.OLEDragConstants OLEDragMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDragMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.OLEDragMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDragMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.OLEDragMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1551)]
        public virtual MSComctlLib.OLEDropConstants OLEDropMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDropMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.OLEDropMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDropMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.OLEDropMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-520)]
        public virtual MSComctlLib.AppearanceConstants Appearance {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Appearance", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Appearance;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Appearance", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Appearance = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-504)]
        public virtual MSComctlLib.BorderStyleConstants BorderStyle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BorderStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.BorderStyle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BorderStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BorderStyle = value;
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-514)]
        public override bool Enabled {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return this.ocx.Enabled;
                }
                else {
                    return base.Enabled;
                }
            }
            set {
                base.Enabled = value;
                if ((this.ocx != null)) {
                    this.ocx.Enabled = value;
                }
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-512)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IFontDisp")]
        public override System.Drawing.Font Font {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetFontFromIFont(this.ocx.Font);
                }
                else {
                    return base.Font;
                }
            }
            set {
                base.Font = value;
                if ((this.ocx != null)) {
                    this.ocx.Font = ((stdole.IFontDisp)(GetIFontFromFont(value)));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-515)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.Int32")]
        public virtual int hWnd {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("hWnd", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return (this.ocx.hWnd);
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("hWnd", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.hWnd = ((int)((value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(17)]
        public virtual bool Checkboxes {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Checkboxes", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Checkboxes;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Checkboxes", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Checkboxes = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(18)]
        public virtual bool FullRowSelect {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FullRowSelect", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FullRowSelect;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FullRowSelect", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FullRowSelect = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(19)]
        public virtual bool HotTracking {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HotTracking", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.HotTracking;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HotTracking", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.HotTracking = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(20)]
        public virtual bool Scroll {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Scroll", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Scroll;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Scroll", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Scroll = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(21)]
        public virtual bool SingleSel {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SingleSel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SingleSel;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SingleSel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SingleSel = value;
            }
        }
        
        public event ITreeViewEvents_BeforeLabelEditEventHandler BeforeLabelEdit;
        
        public event ITreeViewEvents_AfterLabelEditEventHandler AfterLabelEdit;
        
        public event ITreeViewEvents_CollapseEventHandler Collapse;
        
        public event ITreeViewEvents_ExpandEventHandler Expand;
        
        public event ITreeViewEvents_NodeClickEventHandler NodeClick;
        
        public event ITreeViewEvents_KeyDownEventHandler KeyDownEvent;
        
        public event ITreeViewEvents_KeyUpEventHandler KeyUpEvent;
        
        public event ITreeViewEvents_KeyPressEventHandler KeyPressEvent;
        
        public event ITreeViewEvents_MouseDownEventHandler MouseDownEvent;
        
        public event ITreeViewEvents_MouseMoveEventHandler MouseMoveEvent;
        
        public event ITreeViewEvents_MouseUpEventHandler MouseUpEvent;
        
        public event System.EventHandler ClickEvent;
        
        public event System.EventHandler DblClick;
        
        public event ITreeViewEvents_NodeCheckEventHandler NodeCheck;
        
        public event ITreeViewEvents_OLEStartDragEventHandler OLEStartDrag;
        
        public event ITreeViewEvents_OLEGiveFeedbackEventHandler OLEGiveFeedback;
        
        public event ITreeViewEvents_OLESetDataEventHandler OLESetData;
        
        public event ITreeViewEvents_OLECompleteDragEventHandler OLECompleteDrag;
        
        public event ITreeViewEvents_OLEDragOverEventHandler OLEDragOver;
        
        public event ITreeViewEvents_OLEDragDropEventHandler OLEDragDrop;
        
        public virtual MSComctlLib.Node HitTest(float x, float y) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HitTest", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MSComctlLib.Node returnValue = ((MSComctlLib.Node)(this.ocx.HitTest(x, y)));
            return returnValue;
        }
        
        public virtual int GetVisibleCount() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetVisibleCount", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetVisibleCount()));
            return returnValue;
        }
        
        public virtual void StartLabelEdit() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("StartLabelEdit", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.StartLabelEdit();
        }
        
        public virtual void Refresh() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Refresh", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Refresh();
        }
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        public virtual void OLEDrag() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDrag", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.OLEDrag();
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxTreeViewEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(MSComctlLib.ITreeViewEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((MSComctlLib.ITreeView)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnBeforeLabelEdit(object sender, ITreeViewEvents_BeforeLabelEditEvent e) {
            if ((this.BeforeLabelEdit != null)) {
                this.BeforeLabelEdit(sender, e);
            }
        }
        
        internal void RaiseOnAfterLabelEdit(object sender, ITreeViewEvents_AfterLabelEditEvent e) {
            if ((this.AfterLabelEdit != null)) {
                this.AfterLabelEdit(sender, e);
            }
        }
        
        internal void RaiseOnCollapse(object sender, ITreeViewEvents_CollapseEvent e) {
            if ((this.Collapse != null)) {
                this.Collapse(sender, e);
            }
        }
        
        internal void RaiseOnExpand(object sender, ITreeViewEvents_ExpandEvent e) {
            if ((this.Expand != null)) {
                this.Expand(sender, e);
            }
        }
        
        internal void RaiseOnNodeClick(object sender, ITreeViewEvents_NodeClickEvent e) {
            if ((this.NodeClick != null)) {
                this.NodeClick(sender, e);
            }
        }
        
        internal void RaiseOnKeyDownEvent(object sender, ITreeViewEvents_KeyDownEvent e) {
            if ((this.KeyDownEvent != null)) {
                this.KeyDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyUpEvent(object sender, ITreeViewEvents_KeyUpEvent e) {
            if ((this.KeyUpEvent != null)) {
                this.KeyUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyPressEvent(object sender, ITreeViewEvents_KeyPressEvent e) {
            if ((this.KeyPressEvent != null)) {
                this.KeyPressEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseDownEvent(object sender, ITreeViewEvents_MouseDownEvent e) {
            if ((this.MouseDownEvent != null)) {
                this.MouseDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseMoveEvent(object sender, ITreeViewEvents_MouseMoveEvent e) {
            if ((this.MouseMoveEvent != null)) {
                this.MouseMoveEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseUpEvent(object sender, ITreeViewEvents_MouseUpEvent e) {
            if ((this.MouseUpEvent != null)) {
                this.MouseUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnClickEvent(object sender, System.EventArgs e) {
            if ((this.ClickEvent != null)) {
                this.ClickEvent(sender, e);
            }
        }
        
        internal void RaiseOnDblClick(object sender, System.EventArgs e) {
            if ((this.DblClick != null)) {
                this.DblClick(sender, e);
            }
        }
        
        internal void RaiseOnNodeCheck(object sender, ITreeViewEvents_NodeCheckEvent e) {
            if ((this.NodeCheck != null)) {
                this.NodeCheck(sender, e);
            }
        }
        
        internal void RaiseOnOLEStartDrag(object sender, ITreeViewEvents_OLEStartDragEvent e) {
            if ((this.OLEStartDrag != null)) {
                this.OLEStartDrag(sender, e);
            }
        }
        
        internal void RaiseOnOLEGiveFeedback(object sender, ITreeViewEvents_OLEGiveFeedbackEvent e) {
            if ((this.OLEGiveFeedback != null)) {
                this.OLEGiveFeedback(sender, e);
            }
        }
        
        internal void RaiseOnOLESetData(object sender, ITreeViewEvents_OLESetDataEvent e) {
            if ((this.OLESetData != null)) {
                this.OLESetData(sender, e);
            }
        }
        
        internal void RaiseOnOLECompleteDrag(object sender, ITreeViewEvents_OLECompleteDragEvent e) {
            if ((this.OLECompleteDrag != null)) {
                this.OLECompleteDrag(sender, e);
            }
        }
        
        internal void RaiseOnOLEDragOver(object sender, ITreeViewEvents_OLEDragOverEvent e) {
            if ((this.OLEDragOver != null)) {
                this.OLEDragOver(sender, e);
            }
        }
        
        internal void RaiseOnOLEDragDrop(object sender, ITreeViewEvents_OLEDragDropEvent e) {
            if ((this.OLEDragDrop != null)) {
                this.OLEDragDrop(sender, e);
            }
        }
    }
    
    public delegate void ITreeViewEvents_BeforeLabelEditEventHandler(object sender, ITreeViewEvents_BeforeLabelEditEvent e);
    
    public class ITreeViewEvents_BeforeLabelEditEvent {
        
        public short cancel;
        
        public ITreeViewEvents_BeforeLabelEditEvent(short cancel) {
            this.cancel = cancel;
        }
    }
    
    public delegate void ITreeViewEvents_AfterLabelEditEventHandler(object sender, ITreeViewEvents_AfterLabelEditEvent e);
    
    public class ITreeViewEvents_AfterLabelEditEvent {
        
        public short cancel;
        
        public string newString;
        
        public ITreeViewEvents_AfterLabelEditEvent(short cancel, string newString) {
            this.cancel = cancel;
            this.newString = newString;
        }
    }
    
    public delegate void ITreeViewEvents_CollapseEventHandler(object sender, ITreeViewEvents_CollapseEvent e);
    
    public class ITreeViewEvents_CollapseEvent {
        
        public MSComctlLib.Node node;
        
        public ITreeViewEvents_CollapseEvent(MSComctlLib.Node node) {
            this.node = node;
        }
    }
    
    public delegate void ITreeViewEvents_ExpandEventHandler(object sender, ITreeViewEvents_ExpandEvent e);
    
    public class ITreeViewEvents_ExpandEvent {
        
        public MSComctlLib.Node node;
        
        public ITreeViewEvents_ExpandEvent(MSComctlLib.Node node) {
            this.node = node;
        }
    }
    
    public delegate void ITreeViewEvents_NodeClickEventHandler(object sender, ITreeViewEvents_NodeClickEvent e);
    
    public class ITreeViewEvents_NodeClickEvent {
        
        public MSComctlLib.Node node;
        
        public ITreeViewEvents_NodeClickEvent(MSComctlLib.Node node) {
            this.node = node;
        }
    }
    
    public delegate void ITreeViewEvents_KeyDownEventHandler(object sender, ITreeViewEvents_KeyDownEvent e);
    
    public class ITreeViewEvents_KeyDownEvent {
        
        public short keyCode;
        
        public short shift;
        
        public ITreeViewEvents_KeyDownEvent(short keyCode, short shift) {
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void ITreeViewEvents_KeyUpEventHandler(object sender, ITreeViewEvents_KeyUpEvent e);
    
    public class ITreeViewEvents_KeyUpEvent {
        
        public short keyCode;
        
        public short shift;
        
        public ITreeViewEvents_KeyUpEvent(short keyCode, short shift) {
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void ITreeViewEvents_KeyPressEventHandler(object sender, ITreeViewEvents_KeyPressEvent e);
    
    public class ITreeViewEvents_KeyPressEvent {
        
        public short keyAscii;
        
        public ITreeViewEvents_KeyPressEvent(short keyAscii) {
            this.keyAscii = keyAscii;
        }
    }
    
    public delegate void ITreeViewEvents_MouseDownEventHandler(object sender, ITreeViewEvents_MouseDownEvent e);
    
    public class ITreeViewEvents_MouseDownEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public ITreeViewEvents_MouseDownEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void ITreeViewEvents_MouseMoveEventHandler(object sender, ITreeViewEvents_MouseMoveEvent e);
    
    public class ITreeViewEvents_MouseMoveEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public ITreeViewEvents_MouseMoveEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void ITreeViewEvents_MouseUpEventHandler(object sender, ITreeViewEvents_MouseUpEvent e);
    
    public class ITreeViewEvents_MouseUpEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public ITreeViewEvents_MouseUpEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void ITreeViewEvents_NodeCheckEventHandler(object sender, ITreeViewEvents_NodeCheckEvent e);
    
    public class ITreeViewEvents_NodeCheckEvent {
        
        public MSComctlLib.Node node;
        
        public ITreeViewEvents_NodeCheckEvent(MSComctlLib.Node node) {
            this.node = node;
        }
    }
    
    public delegate void ITreeViewEvents_OLEStartDragEventHandler(object sender, ITreeViewEvents_OLEStartDragEvent e);
    
    public class ITreeViewEvents_OLEStartDragEvent {
        
        public MSComctlLib.DataObject data;
        
        public int allowedEffects;
        
        public ITreeViewEvents_OLEStartDragEvent(MSComctlLib.DataObject data, int allowedEffects) {
            this.data = data;
            this.allowedEffects = allowedEffects;
        }
    }
    
    public delegate void ITreeViewEvents_OLEGiveFeedbackEventHandler(object sender, ITreeViewEvents_OLEGiveFeedbackEvent e);
    
    public class ITreeViewEvents_OLEGiveFeedbackEvent {
        
        public int effect;
        
        public bool defaultCursors;
        
        public ITreeViewEvents_OLEGiveFeedbackEvent(int effect, bool defaultCursors) {
            this.effect = effect;
            this.defaultCursors = defaultCursors;
        }
    }
    
    public delegate void ITreeViewEvents_OLESetDataEventHandler(object sender, ITreeViewEvents_OLESetDataEvent e);
    
    public class ITreeViewEvents_OLESetDataEvent {
        
        public MSComctlLib.DataObject data;
        
        public short dataFormat;
        
        public ITreeViewEvents_OLESetDataEvent(MSComctlLib.DataObject data, short dataFormat) {
            this.data = data;
            this.dataFormat = dataFormat;
        }
    }
    
    public delegate void ITreeViewEvents_OLECompleteDragEventHandler(object sender, ITreeViewEvents_OLECompleteDragEvent e);
    
    public class ITreeViewEvents_OLECompleteDragEvent {
        
        public int effect;
        
        public ITreeViewEvents_OLECompleteDragEvent(int effect) {
            this.effect = effect;
        }
    }
    
    public delegate void ITreeViewEvents_OLEDragOverEventHandler(object sender, ITreeViewEvents_OLEDragOverEvent e);
    
    public class ITreeViewEvents_OLEDragOverEvent {
        
        public MSComctlLib.DataObject data;
        
        public int effect;
        
        public short button;
        
        public short shift;
        
        public float x;
        
        public float y;
        
        public short state;
        
        public ITreeViewEvents_OLEDragOverEvent(MSComctlLib.DataObject data, int effect, short button, short shift, float x, float y, short state) {
            this.data = data;
            this.effect = effect;
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
            this.state = state;
        }
    }
    
    public delegate void ITreeViewEvents_OLEDragDropEventHandler(object sender, ITreeViewEvents_OLEDragDropEvent e);
    
    public class ITreeViewEvents_OLEDragDropEvent {
        
        public MSComctlLib.DataObject data;
        
        public int effect;
        
        public short button;
        
        public short shift;
        
        public float x;
        
        public float y;
        
        public ITreeViewEvents_OLEDragDropEvent(MSComctlLib.DataObject data, int effect, short button, short shift, float x, float y) {
            this.data = data;
            this.effect = effect;
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxTreeViewEventMulticaster : MSComctlLib.ITreeViewEvents {
        
        private AxTreeView parent;
        
        public AxTreeViewEventMulticaster(AxTreeView parent) {
            this.parent = parent;
        }
        
        public virtual void BeforeLabelEdit(ref short cancel) {
            ITreeViewEvents_BeforeLabelEditEvent beforelabeleditEvent = new ITreeViewEvents_BeforeLabelEditEvent(cancel);
            this.parent.RaiseOnBeforeLabelEdit(this.parent, beforelabeleditEvent);
            cancel = beforelabeleditEvent.cancel;
        }
        
        public virtual void AfterLabelEdit(ref short cancel, ref string newString) {
            ITreeViewEvents_AfterLabelEditEvent afterlabeleditEvent = new ITreeViewEvents_AfterLabelEditEvent(cancel, newString);
            this.parent.RaiseOnAfterLabelEdit(this.parent, afterlabeleditEvent);
            cancel = afterlabeleditEvent.cancel;
            newString = afterlabeleditEvent.newString;
        }
        
        public virtual void Collapse(MSComctlLib.Node node) {
            ITreeViewEvents_CollapseEvent collapseEvent = new ITreeViewEvents_CollapseEvent(node);
            this.parent.RaiseOnCollapse(this.parent, collapseEvent);
        }
        
        public virtual void Expand(MSComctlLib.Node node) {
            ITreeViewEvents_ExpandEvent expandEvent = new ITreeViewEvents_ExpandEvent(node);
            this.parent.RaiseOnExpand(this.parent, expandEvent);
        }
        
        public virtual void NodeClick(MSComctlLib.Node node) {
            ITreeViewEvents_NodeClickEvent nodeclickEvent = new ITreeViewEvents_NodeClickEvent(node);
            this.parent.RaiseOnNodeClick(this.parent, nodeclickEvent);
        }
        
        public virtual void KeyDown(ref short keyCode, short shift) {
            ITreeViewEvents_KeyDownEvent keydownEvent = new ITreeViewEvents_KeyDownEvent(keyCode, shift);
            this.parent.RaiseOnKeyDownEvent(this.parent, keydownEvent);
            keyCode = keydownEvent.keyCode;
        }
        
        public virtual void KeyUp(ref short keyCode, short shift) {
            ITreeViewEvents_KeyUpEvent keyupEvent = new ITreeViewEvents_KeyUpEvent(keyCode, shift);
            this.parent.RaiseOnKeyUpEvent(this.parent, keyupEvent);
            keyCode = keyupEvent.keyCode;
        }
        
        public virtual void KeyPress(ref short keyAscii) {
            ITreeViewEvents_KeyPressEvent keypressEvent = new ITreeViewEvents_KeyPressEvent(keyAscii);
            this.parent.RaiseOnKeyPressEvent(this.parent, keypressEvent);
            keyAscii = keypressEvent.keyAscii;
        }
        
        public virtual void MouseDown(short button, short shift, int x, int y) {
            ITreeViewEvents_MouseDownEvent mousedownEvent = new ITreeViewEvents_MouseDownEvent(button, shift, x, y);
            this.parent.RaiseOnMouseDownEvent(this.parent, mousedownEvent);
        }
        
        public virtual void MouseMove(short button, short shift, int x, int y) {
            ITreeViewEvents_MouseMoveEvent mousemoveEvent = new ITreeViewEvents_MouseMoveEvent(button, shift, x, y);
            this.parent.RaiseOnMouseMoveEvent(this.parent, mousemoveEvent);
        }
        
        public virtual void MouseUp(short button, short shift, int x, int y) {
            ITreeViewEvents_MouseUpEvent mouseupEvent = new ITreeViewEvents_MouseUpEvent(button, shift, x, y);
            this.parent.RaiseOnMouseUpEvent(this.parent, mouseupEvent);
        }
        
        public virtual void Click() {
            System.EventArgs clickEvent = new System.EventArgs();
            this.parent.RaiseOnClickEvent(this.parent, clickEvent);
        }
        
        public virtual void DblClick() {
            System.EventArgs dblclickEvent = new System.EventArgs();
            this.parent.RaiseOnDblClick(this.parent, dblclickEvent);
        }
        
        public virtual void NodeCheck(MSComctlLib.Node node) {
            ITreeViewEvents_NodeCheckEvent nodecheckEvent = new ITreeViewEvents_NodeCheckEvent(node);
            this.parent.RaiseOnNodeCheck(this.parent, nodecheckEvent);
        }
        
        public virtual void OLEStartDrag(ref MSComctlLib.DataObject data, ref int allowedEffects) {
            ITreeViewEvents_OLEStartDragEvent olestartdragEvent = new ITreeViewEvents_OLEStartDragEvent(data, allowedEffects);
            this.parent.RaiseOnOLEStartDrag(this.parent, olestartdragEvent);
            data = olestartdragEvent.data;
            allowedEffects = olestartdragEvent.allowedEffects;
        }
        
        public virtual void OLEGiveFeedback(ref int effect, ref bool defaultCursors) {
            ITreeViewEvents_OLEGiveFeedbackEvent olegivefeedbackEvent = new ITreeViewEvents_OLEGiveFeedbackEvent(effect, defaultCursors);
            this.parent.RaiseOnOLEGiveFeedback(this.parent, olegivefeedbackEvent);
            effect = olegivefeedbackEvent.effect;
            defaultCursors = olegivefeedbackEvent.defaultCursors;
        }
        
        public virtual void OLESetData(ref MSComctlLib.DataObject data, ref short dataFormat) {
            ITreeViewEvents_OLESetDataEvent olesetdataEvent = new ITreeViewEvents_OLESetDataEvent(data, dataFormat);
            this.parent.RaiseOnOLESetData(this.parent, olesetdataEvent);
            data = olesetdataEvent.data;
            dataFormat = olesetdataEvent.dataFormat;
        }
        
        public virtual void OLECompleteDrag(ref int effect) {
            ITreeViewEvents_OLECompleteDragEvent olecompletedragEvent = new ITreeViewEvents_OLECompleteDragEvent(effect);
            this.parent.RaiseOnOLECompleteDrag(this.parent, olecompletedragEvent);
            effect = olecompletedragEvent.effect;
        }
        
        public virtual void OLEDragOver(ref MSComctlLib.DataObject data, ref int effect, ref short button, ref short shift, ref float x, ref float y, ref short state) {
            ITreeViewEvents_OLEDragOverEvent oledragoverEvent = new ITreeViewEvents_OLEDragOverEvent(data, effect, button, shift, x, y, state);
            this.parent.RaiseOnOLEDragOver(this.parent, oledragoverEvent);
            data = oledragoverEvent.data;
            effect = oledragoverEvent.effect;
            button = oledragoverEvent.button;
            shift = oledragoverEvent.shift;
            x = oledragoverEvent.x;
            y = oledragoverEvent.y;
            state = oledragoverEvent.state;
        }
        
        public virtual void OLEDragDrop(ref MSComctlLib.DataObject data, ref int effect, ref short button, ref short shift, ref float x, ref float y) {
            ITreeViewEvents_OLEDragDropEvent oledragdropEvent = new ITreeViewEvents_OLEDragDropEvent(data, effect, button, shift, x, y);
            this.parent.RaiseOnOLEDragDrop(this.parent, oledragdropEvent);
            data = oledragdropEvent.data;
            effect = oledragdropEvent.effect;
            button = oledragdropEvent.button;
            shift = oledragdropEvent.shift;
            x = oledragdropEvent.x;
            y = oledragdropEvent.y;
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{bdd1f04b-858b-11d1-b16a-00c0f0283628}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("BeforeLabelEdit")]
    public class AxListView : System.Windows.Forms.AxHost {
        
        private MSComctlLib.IListView ocx;
        
        private AxListViewEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxListView() : 
                base("bdd1f04b-858b-11d1-b16a-00c0f0283628") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual MSComctlLib.ListArrangeConstants Arrange {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Arrange", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Arrange;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Arrange", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Arrange = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual MSComctlLib.ColumnHeaders ColumnHeaders {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ColumnHeaders", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ColumnHeaders;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ColumnHeaders", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ColumnHeaders = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual MSComctlLib.ListItem DropHighlight {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DropHighlight", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DropHighlight;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DropHighlight", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.DropHighlight = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual bool HideColumnHeaders {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HideColumnHeaders", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.HideColumnHeaders;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HideColumnHeaders", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.HideColumnHeaders = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual bool HideSelection {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HideSelection", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.HideSelection;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HideSelection", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.HideSelection = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual object Icons {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Icons", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Icons;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Icons", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Icons = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual MSComctlLib.ListItems ListItems {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ListItems", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ListItems;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ListItems", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ListItems = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        public virtual MSComctlLib.ListLabelEditConstants LabelEdit {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LabelEdit", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.LabelEdit;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LabelEdit", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.LabelEdit = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual bool LabelWrap {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LabelWrap", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.LabelWrap;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LabelWrap", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.LabelWrap = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IPictureDisp")]
        public virtual System.Drawing.Image MouseIcon {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MouseIcon", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetPictureFromIPicture(this.ocx.MouseIcon);
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MouseIcon", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MouseIcon = ((stdole.IPictureDisp)(GetIPictureFromPicture(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        public virtual MSComctlLib.MousePointerConstants MousePointer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MousePointer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MousePointer;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MousePointer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MousePointer = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(12)]
        public virtual bool MultiSelect {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiSelect", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MultiSelect;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiSelect", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MultiSelect = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        public virtual MSComctlLib.ListItem SelectedItem {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelectedItem", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SelectedItem;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelectedItem", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SelectedItem = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(14)]
        public virtual object SmallIcons {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SmallIcons", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SmallIcons;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SmallIcons", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SmallIcons = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(15)]
        public virtual bool Sorted {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Sorted", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Sorted;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Sorted", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Sorted = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(16)]
        public virtual short SortKey {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SortKey", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SortKey;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SortKey", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SortKey = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(17)]
        public virtual MSComctlLib.ListSortOrderConstants SortOrder {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SortOrder", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SortOrder;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SortOrder", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SortOrder = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(18)]
        public virtual MSComctlLib.ListViewConstants View {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("View", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.View;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("View", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.View = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1550)]
        public virtual MSComctlLib.OLEDragConstants OLEDragMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDragMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.OLEDragMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDragMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.OLEDragMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1551)]
        public virtual MSComctlLib.OLEDropConstants OLEDropMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDropMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.OLEDropMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDropMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.OLEDropMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-520)]
        public virtual MSComctlLib.AppearanceConstants Appearance {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Appearance", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Appearance;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Appearance", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Appearance = value;
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-501)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public override System.Drawing.Color BackColor {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetColorFromOleColor(((uint)(this.ocx.BackColor)));
                }
                else {
                    return base.BackColor;
                }
            }
            set {
                base.BackColor = value;
                if ((this.ocx != null)) {
                    this.ocx.BackColor = ((uint)(GetOleColorFromColor(value)));
                }
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-504)]
        public virtual MSComctlLib.BorderStyleConstants BorderStyle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BorderStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.BorderStyle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BorderStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BorderStyle = value;
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-514)]
        public override bool Enabled {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return this.ocx.Enabled;
                }
                else {
                    return base.Enabled;
                }
            }
            set {
                base.Enabled = value;
                if ((this.ocx != null)) {
                    this.ocx.Enabled = value;
                }
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-512)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IFontDisp")]
        public override System.Drawing.Font Font {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetFontFromIFont(this.ocx.Font);
                }
                else {
                    return base.Font;
                }
            }
            set {
                base.Font = value;
                if ((this.ocx != null)) {
                    this.ocx.Font = ((stdole.IFontDisp)(GetIFontFromFont(value)));
                }
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-513)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public override System.Drawing.Color ForeColor {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetColorFromOleColor(((uint)(this.ocx.ForeColor)));
                }
                else {
                    return base.ForeColor;
                }
            }
            set {
                base.ForeColor = value;
                if ((this.ocx != null)) {
                    this.ocx.ForeColor = ((uint)(GetOleColorFromColor(value)));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-515)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.Int32")]
        public virtual int hWnd {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("hWnd", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return (this.ocx.hWnd);
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("hWnd", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.hWnd = ((int)((value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(23)]
        public virtual bool AllowColumnReorder {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AllowColumnReorder", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AllowColumnReorder;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AllowColumnReorder", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AllowColumnReorder = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(24)]
        public virtual bool Checkboxes {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Checkboxes", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Checkboxes;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Checkboxes", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Checkboxes = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(25)]
        public virtual bool FlatScrollBar {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FlatScrollBar", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FlatScrollBar;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FlatScrollBar", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FlatScrollBar = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(26)]
        public virtual bool FullRowSelect {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FullRowSelect", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FullRowSelect;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FullRowSelect", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FullRowSelect = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(27)]
        public virtual bool GridLines {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridLines", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.GridLines;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridLines", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.GridLines = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(28)]
        public virtual bool HotTracking {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HotTracking", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.HotTracking;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HotTracking", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.HotTracking = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(29)]
        public virtual bool HoverSelection {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HoverSelection", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.HoverSelection;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HoverSelection", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.HoverSelection = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(31)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IPictureDisp")]
        public virtual System.Drawing.Image Picture {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Picture", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetPictureFromIPicture(this.ocx.Picture);
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Picture", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Picture = ((stdole.IPictureDisp)(GetIPictureFromPicture(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(30)]
        public virtual MSComctlLib.ListPictureAlignmentConstants PictureAlignment {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PictureAlignment", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.PictureAlignment;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PictureAlignment", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.PictureAlignment = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(32)]
        public virtual object ColumnHeaderIcons {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ColumnHeaderIcons", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ColumnHeaderIcons;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ColumnHeaderIcons", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ColumnHeaderIcons = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(33)]
        public virtual MSComctlLib.ListTextBackgroundConstants TextBackground {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TextBackground", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.TextBackground;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TextBackground", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.TextBackground = value;
            }
        }
        
        public event ListViewEvents_BeforeLabelEditEventHandler BeforeLabelEdit;
        
        public event ListViewEvents_AfterLabelEditEventHandler AfterLabelEdit;
        
        public event ListViewEvents_ColumnClickEventHandler ColumnClick;
        
        public event ListViewEvents_ItemClickEventHandler ItemClick;
        
        public event ListViewEvents_KeyDownEventHandler KeyDownEvent;
        
        public event ListViewEvents_KeyUpEventHandler KeyUpEvent;
        
        public event ListViewEvents_KeyPressEventHandler KeyPressEvent;
        
        public event ListViewEvents_MouseDownEventHandler MouseDownEvent;
        
        public event ListViewEvents_MouseMoveEventHandler MouseMoveEvent;
        
        public event ListViewEvents_MouseUpEventHandler MouseUpEvent;
        
        public event System.EventHandler ClickEvent;
        
        public event System.EventHandler DblClick;
        
        public event ListViewEvents_OLEStartDragEventHandler OLEStartDrag;
        
        public event ListViewEvents_OLEGiveFeedbackEventHandler OLEGiveFeedback;
        
        public event ListViewEvents_OLESetDataEventHandler OLESetData;
        
        public event ListViewEvents_OLECompleteDragEventHandler OLECompleteDrag;
        
        public event ListViewEvents_OLEDragOverEventHandler OLEDragOver;
        
        public event ListViewEvents_OLEDragDropEventHandler OLEDragDrop;
        
        public event ListViewEvents_ItemCheckEventHandler ItemCheck;
        
        public virtual MSComctlLib.ListItem FindItem(string sz) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FindItem", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    sz,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(MSComctlLib.IListView);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("FindItem");
            MSComctlLib.ListItem returnValue = ((MSComctlLib.ListItem)(methodToInvoke.Invoke(this.ocx, paramArray)));
            return returnValue;
        }
        
        public virtual MSComctlLib.ListItem FindItem(string sz, ref object where, ref object index, ref object fPartial) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FindItem", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MSComctlLib.ListItem returnValue = ((MSComctlLib.ListItem)(this.ocx.FindItem(sz, ref where, ref index, ref fPartial)));
            return returnValue;
        }
        
        public virtual MSComctlLib.ListItem GetFirstVisible() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetFirstVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MSComctlLib.ListItem returnValue = ((MSComctlLib.ListItem)(this.ocx.GetFirstVisible()));
            return returnValue;
        }
        
        public virtual MSComctlLib.ListItem HitTest(float x, float y) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HitTest", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MSComctlLib.ListItem returnValue = ((MSComctlLib.ListItem)(this.ocx.HitTest(x, y)));
            return returnValue;
        }
        
        public virtual void StartLabelEdit() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("StartLabelEdit", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.StartLabelEdit();
        }
        
        public virtual void OLEDrag() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDrag", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.OLEDrag();
        }
        
        public virtual void Refresh() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Refresh", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Refresh();
        }
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxListViewEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(MSComctlLib.ListViewEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((MSComctlLib.IListView)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnBeforeLabelEdit(object sender, ListViewEvents_BeforeLabelEditEvent e) {
            if ((this.BeforeLabelEdit != null)) {
                this.BeforeLabelEdit(sender, e);
            }
        }
        
        internal void RaiseOnAfterLabelEdit(object sender, ListViewEvents_AfterLabelEditEvent e) {
            if ((this.AfterLabelEdit != null)) {
                this.AfterLabelEdit(sender, e);
            }
        }
        
        internal void RaiseOnColumnClick(object sender, ListViewEvents_ColumnClickEvent e) {
            if ((this.ColumnClick != null)) {
                this.ColumnClick(sender, e);
            }
        }
        
        internal void RaiseOnItemClick(object sender, ListViewEvents_ItemClickEvent e) {
            if ((this.ItemClick != null)) {
                this.ItemClick(sender, e);
            }
        }
        
        internal void RaiseOnKeyDownEvent(object sender, ListViewEvents_KeyDownEvent e) {
            if ((this.KeyDownEvent != null)) {
                this.KeyDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyUpEvent(object sender, ListViewEvents_KeyUpEvent e) {
            if ((this.KeyUpEvent != null)) {
                this.KeyUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyPressEvent(object sender, ListViewEvents_KeyPressEvent e) {
            if ((this.KeyPressEvent != null)) {
                this.KeyPressEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseDownEvent(object sender, ListViewEvents_MouseDownEvent e) {
            if ((this.MouseDownEvent != null)) {
                this.MouseDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseMoveEvent(object sender, ListViewEvents_MouseMoveEvent e) {
            if ((this.MouseMoveEvent != null)) {
                this.MouseMoveEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseUpEvent(object sender, ListViewEvents_MouseUpEvent e) {
            if ((this.MouseUpEvent != null)) {
                this.MouseUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnClickEvent(object sender, System.EventArgs e) {
            if ((this.ClickEvent != null)) {
                this.ClickEvent(sender, e);
            }
        }
        
        internal void RaiseOnDblClick(object sender, System.EventArgs e) {
            if ((this.DblClick != null)) {
                this.DblClick(sender, e);
            }
        }
        
        internal void RaiseOnOLEStartDrag(object sender, ListViewEvents_OLEStartDragEvent e) {
            if ((this.OLEStartDrag != null)) {
                this.OLEStartDrag(sender, e);
            }
        }
        
        internal void RaiseOnOLEGiveFeedback(object sender, ListViewEvents_OLEGiveFeedbackEvent e) {
            if ((this.OLEGiveFeedback != null)) {
                this.OLEGiveFeedback(sender, e);
            }
        }
        
        internal void RaiseOnOLESetData(object sender, ListViewEvents_OLESetDataEvent e) {
            if ((this.OLESetData != null)) {
                this.OLESetData(sender, e);
            }
        }
        
        internal void RaiseOnOLECompleteDrag(object sender, ListViewEvents_OLECompleteDragEvent e) {
            if ((this.OLECompleteDrag != null)) {
                this.OLECompleteDrag(sender, e);
            }
        }
        
        internal void RaiseOnOLEDragOver(object sender, ListViewEvents_OLEDragOverEvent e) {
            if ((this.OLEDragOver != null)) {
                this.OLEDragOver(sender, e);
            }
        }
        
        internal void RaiseOnOLEDragDrop(object sender, ListViewEvents_OLEDragDropEvent e) {
            if ((this.OLEDragDrop != null)) {
                this.OLEDragDrop(sender, e);
            }
        }
        
        internal void RaiseOnItemCheck(object sender, ListViewEvents_ItemCheckEvent e) {
            if ((this.ItemCheck != null)) {
                this.ItemCheck(sender, e);
            }
        }
    }
    
    public delegate void ListViewEvents_BeforeLabelEditEventHandler(object sender, ListViewEvents_BeforeLabelEditEvent e);
    
    public class ListViewEvents_BeforeLabelEditEvent {
        
        public short cancel;
        
        public ListViewEvents_BeforeLabelEditEvent(short cancel) {
            this.cancel = cancel;
        }
    }
    
    public delegate void ListViewEvents_AfterLabelEditEventHandler(object sender, ListViewEvents_AfterLabelEditEvent e);
    
    public class ListViewEvents_AfterLabelEditEvent {
        
        public short cancel;
        
        public string newString;
        
        public ListViewEvents_AfterLabelEditEvent(short cancel, string newString) {
            this.cancel = cancel;
            this.newString = newString;
        }
    }
    
    public delegate void ListViewEvents_ColumnClickEventHandler(object sender, ListViewEvents_ColumnClickEvent e);
    
    public class ListViewEvents_ColumnClickEvent {
        
        public MSComctlLib.ColumnHeader columnHeader;
        
        public ListViewEvents_ColumnClickEvent(MSComctlLib.ColumnHeader columnHeader) {
            this.columnHeader = columnHeader;
        }
    }
    
    public delegate void ListViewEvents_ItemClickEventHandler(object sender, ListViewEvents_ItemClickEvent e);
    
    public class ListViewEvents_ItemClickEvent {
        
        public MSComctlLib.ListItem item;
        
        public ListViewEvents_ItemClickEvent(MSComctlLib.ListItem item) {
            this.item = item;
        }
    }
    
    public delegate void ListViewEvents_KeyDownEventHandler(object sender, ListViewEvents_KeyDownEvent e);
    
    public class ListViewEvents_KeyDownEvent {
        
        public short keyCode;
        
        public short shift;
        
        public ListViewEvents_KeyDownEvent(short keyCode, short shift) {
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void ListViewEvents_KeyUpEventHandler(object sender, ListViewEvents_KeyUpEvent e);
    
    public class ListViewEvents_KeyUpEvent {
        
        public short keyCode;
        
        public short shift;
        
        public ListViewEvents_KeyUpEvent(short keyCode, short shift) {
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void ListViewEvents_KeyPressEventHandler(object sender, ListViewEvents_KeyPressEvent e);
    
    public class ListViewEvents_KeyPressEvent {
        
        public short keyAscii;
        
        public ListViewEvents_KeyPressEvent(short keyAscii) {
            this.keyAscii = keyAscii;
        }
    }
    
    public delegate void ListViewEvents_MouseDownEventHandler(object sender, ListViewEvents_MouseDownEvent e);
    
    public class ListViewEvents_MouseDownEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public ListViewEvents_MouseDownEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void ListViewEvents_MouseMoveEventHandler(object sender, ListViewEvents_MouseMoveEvent e);
    
    public class ListViewEvents_MouseMoveEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public ListViewEvents_MouseMoveEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void ListViewEvents_MouseUpEventHandler(object sender, ListViewEvents_MouseUpEvent e);
    
    public class ListViewEvents_MouseUpEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public ListViewEvents_MouseUpEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void ListViewEvents_OLEStartDragEventHandler(object sender, ListViewEvents_OLEStartDragEvent e);
    
    public class ListViewEvents_OLEStartDragEvent {
        
        public MSComctlLib.DataObject data;
        
        public int allowedEffects;
        
        public ListViewEvents_OLEStartDragEvent(MSComctlLib.DataObject data, int allowedEffects) {
            this.data = data;
            this.allowedEffects = allowedEffects;
        }
    }
    
    public delegate void ListViewEvents_OLEGiveFeedbackEventHandler(object sender, ListViewEvents_OLEGiveFeedbackEvent e);
    
    public class ListViewEvents_OLEGiveFeedbackEvent {
        
        public int effect;
        
        public bool defaultCursors;
        
        public ListViewEvents_OLEGiveFeedbackEvent(int effect, bool defaultCursors) {
            this.effect = effect;
            this.defaultCursors = defaultCursors;
        }
    }
    
    public delegate void ListViewEvents_OLESetDataEventHandler(object sender, ListViewEvents_OLESetDataEvent e);
    
    public class ListViewEvents_OLESetDataEvent {
        
        public MSComctlLib.DataObject data;
        
        public short dataFormat;
        
        public ListViewEvents_OLESetDataEvent(MSComctlLib.DataObject data, short dataFormat) {
            this.data = data;
            this.dataFormat = dataFormat;
        }
    }
    
    public delegate void ListViewEvents_OLECompleteDragEventHandler(object sender, ListViewEvents_OLECompleteDragEvent e);
    
    public class ListViewEvents_OLECompleteDragEvent {
        
        public int effect;
        
        public ListViewEvents_OLECompleteDragEvent(int effect) {
            this.effect = effect;
        }
    }
    
    public delegate void ListViewEvents_OLEDragOverEventHandler(object sender, ListViewEvents_OLEDragOverEvent e);
    
    public class ListViewEvents_OLEDragOverEvent {
        
        public MSComctlLib.DataObject data;
        
        public int effect;
        
        public short button;
        
        public short shift;
        
        public float x;
        
        public float y;
        
        public short state;
        
        public ListViewEvents_OLEDragOverEvent(MSComctlLib.DataObject data, int effect, short button, short shift, float x, float y, short state) {
            this.data = data;
            this.effect = effect;
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
            this.state = state;
        }
    }
    
    public delegate void ListViewEvents_OLEDragDropEventHandler(object sender, ListViewEvents_OLEDragDropEvent e);
    
    public class ListViewEvents_OLEDragDropEvent {
        
        public MSComctlLib.DataObject data;
        
        public int effect;
        
        public short button;
        
        public short shift;
        
        public float x;
        
        public float y;
        
        public ListViewEvents_OLEDragDropEvent(MSComctlLib.DataObject data, int effect, short button, short shift, float x, float y) {
            this.data = data;
            this.effect = effect;
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void ListViewEvents_ItemCheckEventHandler(object sender, ListViewEvents_ItemCheckEvent e);
    
    public class ListViewEvents_ItemCheckEvent {
        
        public MSComctlLib.ListItem item;
        
        public ListViewEvents_ItemCheckEvent(MSComctlLib.ListItem item) {
            this.item = item;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxListViewEventMulticaster : MSComctlLib.ListViewEvents {
        
        private AxListView parent;
        
        public AxListViewEventMulticaster(AxListView parent) {
            this.parent = parent;
        }
        
        public virtual void BeforeLabelEdit(ref short cancel) {
            ListViewEvents_BeforeLabelEditEvent beforelabeleditEvent = new ListViewEvents_BeforeLabelEditEvent(cancel);
            this.parent.RaiseOnBeforeLabelEdit(this.parent, beforelabeleditEvent);
            cancel = beforelabeleditEvent.cancel;
        }
        
        public virtual void AfterLabelEdit(ref short cancel, ref string newString) {
            ListViewEvents_AfterLabelEditEvent afterlabeleditEvent = new ListViewEvents_AfterLabelEditEvent(cancel, newString);
            this.parent.RaiseOnAfterLabelEdit(this.parent, afterlabeleditEvent);
            cancel = afterlabeleditEvent.cancel;
            newString = afterlabeleditEvent.newString;
        }
        
        public virtual void ColumnClick(MSComctlLib.ColumnHeader columnHeader) {
            ListViewEvents_ColumnClickEvent columnclickEvent = new ListViewEvents_ColumnClickEvent(columnHeader);
            this.parent.RaiseOnColumnClick(this.parent, columnclickEvent);
        }
        
        public virtual void ItemClick(MSComctlLib.ListItem item) {
            ListViewEvents_ItemClickEvent itemclickEvent = new ListViewEvents_ItemClickEvent(item);
            this.parent.RaiseOnItemClick(this.parent, itemclickEvent);
        }
        
        public virtual void KeyDown(ref short keyCode, short shift) {
            ListViewEvents_KeyDownEvent keydownEvent = new ListViewEvents_KeyDownEvent(keyCode, shift);
            this.parent.RaiseOnKeyDownEvent(this.parent, keydownEvent);
            keyCode = keydownEvent.keyCode;
        }
        
        public virtual void KeyUp(ref short keyCode, short shift) {
            ListViewEvents_KeyUpEvent keyupEvent = new ListViewEvents_KeyUpEvent(keyCode, shift);
            this.parent.RaiseOnKeyUpEvent(this.parent, keyupEvent);
            keyCode = keyupEvent.keyCode;
        }
        
        public virtual void KeyPress(ref short keyAscii) {
            ListViewEvents_KeyPressEvent keypressEvent = new ListViewEvents_KeyPressEvent(keyAscii);
            this.parent.RaiseOnKeyPressEvent(this.parent, keypressEvent);
            keyAscii = keypressEvent.keyAscii;
        }
        
        public virtual void MouseDown(short button, short shift, int x, int y) {
            ListViewEvents_MouseDownEvent mousedownEvent = new ListViewEvents_MouseDownEvent(button, shift, x, y);
            this.parent.RaiseOnMouseDownEvent(this.parent, mousedownEvent);
        }
        
        public virtual void MouseMove(short button, short shift, int x, int y) {
            ListViewEvents_MouseMoveEvent mousemoveEvent = new ListViewEvents_MouseMoveEvent(button, shift, x, y);
            this.parent.RaiseOnMouseMoveEvent(this.parent, mousemoveEvent);
        }
        
        public virtual void MouseUp(short button, short shift, int x, int y) {
            ListViewEvents_MouseUpEvent mouseupEvent = new ListViewEvents_MouseUpEvent(button, shift, x, y);
            this.parent.RaiseOnMouseUpEvent(this.parent, mouseupEvent);
        }
        
        public virtual void Click() {
            System.EventArgs clickEvent = new System.EventArgs();
            this.parent.RaiseOnClickEvent(this.parent, clickEvent);
        }
        
        public virtual void DblClick() {
            System.EventArgs dblclickEvent = new System.EventArgs();
            this.parent.RaiseOnDblClick(this.parent, dblclickEvent);
        }
        
        public virtual void OLEStartDrag(ref MSComctlLib.DataObject data, ref int allowedEffects) {
            ListViewEvents_OLEStartDragEvent olestartdragEvent = new ListViewEvents_OLEStartDragEvent(data, allowedEffects);
            this.parent.RaiseOnOLEStartDrag(this.parent, olestartdragEvent);
            data = olestartdragEvent.data;
            allowedEffects = olestartdragEvent.allowedEffects;
        }
        
        public virtual void OLEGiveFeedback(ref int effect, ref bool defaultCursors) {
            ListViewEvents_OLEGiveFeedbackEvent olegivefeedbackEvent = new ListViewEvents_OLEGiveFeedbackEvent(effect, defaultCursors);
            this.parent.RaiseOnOLEGiveFeedback(this.parent, olegivefeedbackEvent);
            effect = olegivefeedbackEvent.effect;
            defaultCursors = olegivefeedbackEvent.defaultCursors;
        }
        
        public virtual void OLESetData(ref MSComctlLib.DataObject data, ref short dataFormat) {
            ListViewEvents_OLESetDataEvent olesetdataEvent = new ListViewEvents_OLESetDataEvent(data, dataFormat);
            this.parent.RaiseOnOLESetData(this.parent, olesetdataEvent);
            data = olesetdataEvent.data;
            dataFormat = olesetdataEvent.dataFormat;
        }
        
        public virtual void OLECompleteDrag(ref int effect) {
            ListViewEvents_OLECompleteDragEvent olecompletedragEvent = new ListViewEvents_OLECompleteDragEvent(effect);
            this.parent.RaiseOnOLECompleteDrag(this.parent, olecompletedragEvent);
            effect = olecompletedragEvent.effect;
        }
        
        public virtual void OLEDragOver(ref MSComctlLib.DataObject data, ref int effect, ref short button, ref short shift, ref float x, ref float y, ref short state) {
            ListViewEvents_OLEDragOverEvent oledragoverEvent = new ListViewEvents_OLEDragOverEvent(data, effect, button, shift, x, y, state);
            this.parent.RaiseOnOLEDragOver(this.parent, oledragoverEvent);
            data = oledragoverEvent.data;
            effect = oledragoverEvent.effect;
            button = oledragoverEvent.button;
            shift = oledragoverEvent.shift;
            x = oledragoverEvent.x;
            y = oledragoverEvent.y;
            state = oledragoverEvent.state;
        }
        
        public virtual void OLEDragDrop(ref MSComctlLib.DataObject data, ref int effect, ref short button, ref short shift, ref float x, ref float y) {
            ListViewEvents_OLEDragDropEvent oledragdropEvent = new ListViewEvents_OLEDragDropEvent(data, effect, button, shift, x, y);
            this.parent.RaiseOnOLEDragDrop(this.parent, oledragdropEvent);
            data = oledragdropEvent.data;
            effect = oledragdropEvent.effect;
            button = oledragdropEvent.button;
            shift = oledragdropEvent.shift;
            x = oledragdropEvent.x;
            y = oledragdropEvent.y;
        }
        
        public virtual void ItemCheck(MSComctlLib.ListItem item) {
            ListViewEvents_ItemCheckEvent itemcheckEvent = new ListViewEvents_ItemCheckEvent(item);
            this.parent.RaiseOnItemCheck(this.parent, itemcheckEvent);
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{2c247f23-8591-11d1-b16a-00c0f0283628}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    public class AxImageList : System.Windows.Forms.AxHost {
        
        private MSComctlLib.IImageList ocx;
        
        private AxImageListEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxImageList() : 
                base("2c247f23-8591-11d1-b16a-00c0f0283628") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual short ImageHeight {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImageHeight", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ImageHeight;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImageHeight", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ImageHeight = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual short ImageWidth {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImageWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ImageWidth;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImageWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ImageWidth = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color MaskColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MaskColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.MaskColor)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MaskColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MaskColor = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual bool UseMaskColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UseMaskColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.UseMaskColor;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UseMaskColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.UseMaskColor = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual MSComctlLib.ListImages ListImages {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ListImages", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ListImages;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ListImages", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ListImages = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.Int32")]
        public virtual int hImageList {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("hImageList", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return (this.ocx.hImageList);
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("hImageList", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.hImageList = ((int)((value)));
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-501)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public override System.Drawing.Color BackColor {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetColorFromOleColor(((uint)(this.ocx.BackColor)));
                }
                else {
                    return base.BackColor;
                }
            }
            set {
                base.BackColor = value;
                if ((this.ocx != null)) {
                    this.ocx.BackColor = ((uint)(GetOleColorFromColor(value)));
                }
            }
        }
        
        public virtual System.Drawing.Image Overlay(ref object key1, ref object key2) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Overlay", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            stdole.IPictureDisp returnValue = ((stdole.IPictureDisp)(this.ocx.Overlay(ref key1, ref key2)));
            return GetPictureFromIPicture(returnValue);
        }
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxImageListEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(MSComctlLib.ImageListEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((MSComctlLib.IImageList)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxImageListEventMulticaster : MSComctlLib.ImageListEvents {
        
        private AxImageList parent;
        
        public AxImageListEventMulticaster(AxImageList parent) {
            this.parent = parent;
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{f08df954-8592-11d1-b16a-00c0f0283628}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("Scroll")]
    [System.ComponentModel.DefaultProperty("_Value")]
    public class AxSlider : System.Windows.Forms.AxHost {
        
        private MSComctlLib.ISlider ocx;
        
        private AxSliderEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxSlider() : 
                base("f08df954-8592-11d1-b16a-00c0f0283628") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(0)]
        public virtual int _Value {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("_Value", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx._Value;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("_Value", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx._Value = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual int LargeChange {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LargeChange", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.LargeChange;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LargeChange", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.LargeChange = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual int SmallChange {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SmallChange", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SmallChange;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SmallChange", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SmallChange = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual int Max {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Max", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Max;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Max", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Max = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual int Min {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Min", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Min;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Min", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Min = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual MSComctlLib.OrientationConstants Orientation {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Orientation", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Orientation;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Orientation", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Orientation = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual bool SelectRange {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelectRange", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SelectRange;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelectRange", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SelectRange = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual int SelStart {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelStart", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SelStart;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelStart", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SelStart = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        public virtual int SelLength {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelLength", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SelLength;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelLength", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SelLength = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual MSComctlLib.TickStyleConstants TickStyle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TickStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.TickStyle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TickStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.TickStyle = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        public virtual int TickFrequency {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TickFrequency", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.TickFrequency;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TickFrequency", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.TickFrequency = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        public virtual int Value {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Value", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Value;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Value", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Value = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(12)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IPictureDisp")]
        public virtual System.Drawing.Image MouseIcon {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MouseIcon", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetPictureFromIPicture(this.ocx.MouseIcon);
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MouseIcon", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MouseIcon = ((stdole.IPictureDisp)(GetIPictureFromPicture(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        public virtual MSComctlLib.MousePointerConstants MousePointer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MousePointer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MousePointer;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MousePointer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MousePointer = value;
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-514)]
        [System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
        public override bool Enabled {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return this.ocx.Enabled;
                }
                else {
                    return base.Enabled;
                }
            }
            set {
                base.Enabled = value;
                if ((this.ocx != null)) {
                    this.ocx.Enabled = value;
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-515)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.Int32")]
        public virtual int hWnd {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("hWnd", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return (this.ocx.hWnd);
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("hWnd", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.hWnd = ((int)((value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-504)]
        public virtual MSComctlLib.BorderStyleConstants BorderStyle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BorderStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.BorderStyle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BorderStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BorderStyle = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1551)]
        public virtual MSComctlLib.OLEDropConstants OLEDropMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDropMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.OLEDropMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDropMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.OLEDropMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(15)]
        public virtual int GetNumTicks {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetNumTicks", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.GetNumTicks;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(16)]
        public virtual string CtlText {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlText", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Text;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlText", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Text = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(17)]
        public virtual MSComctlLib.TextPositionConstants TextPosition {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TextPosition", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.TextPosition;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TextPosition", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.TextPosition = value;
            }
        }
        
        public event System.EventHandler ClickEvent;
        
        public event ISliderEvents_KeyDownEventHandler KeyDownEvent;
        
        public event ISliderEvents_KeyPressEventHandler KeyPressEvent;
        
        public event ISliderEvents_KeyUpEventHandler KeyUpEvent;
        
        public event ISliderEvents_MouseDownEventHandler MouseDownEvent;
        
        public event ISliderEvents_MouseMoveEventHandler MouseMoveEvent;
        
        public event ISliderEvents_MouseUpEventHandler MouseUpEvent;
        
        public event System.EventHandler Scroll;
        
        public event System.EventHandler Change;
        
        public event ISliderEvents_OLEStartDragEventHandler OLEStartDrag;
        
        public event ISliderEvents_OLEGiveFeedbackEventHandler OLEGiveFeedback;
        
        public event ISliderEvents_OLESetDataEventHandler OLESetData;
        
        public event ISliderEvents_OLECompleteDragEventHandler OLECompleteDrag;
        
        public event ISliderEvents_OLEDragOverEventHandler OLEDragOver;
        
        public event ISliderEvents_OLEDragDropEventHandler OLEDragDrop;
        
        public virtual void Refresh() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Refresh", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Refresh();
        }
        
        public virtual void ClearSel() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClearSel", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ClearSel();
        }
        
        public virtual void DoClick() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DoClick", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DoClick();
        }
        
        public virtual void OLEDrag() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDrag", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.OLEDrag();
        }
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxSliderEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(MSComctlLib.ISliderEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((MSComctlLib.ISlider)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnClickEvent(object sender, System.EventArgs e) {
            if ((this.ClickEvent != null)) {
                this.ClickEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyDownEvent(object sender, ISliderEvents_KeyDownEvent e) {
            if ((this.KeyDownEvent != null)) {
                this.KeyDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyPressEvent(object sender, ISliderEvents_KeyPressEvent e) {
            if ((this.KeyPressEvent != null)) {
                this.KeyPressEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyUpEvent(object sender, ISliderEvents_KeyUpEvent e) {
            if ((this.KeyUpEvent != null)) {
                this.KeyUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseDownEvent(object sender, ISliderEvents_MouseDownEvent e) {
            if ((this.MouseDownEvent != null)) {
                this.MouseDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseMoveEvent(object sender, ISliderEvents_MouseMoveEvent e) {
            if ((this.MouseMoveEvent != null)) {
                this.MouseMoveEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseUpEvent(object sender, ISliderEvents_MouseUpEvent e) {
            if ((this.MouseUpEvent != null)) {
                this.MouseUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnScroll(object sender, System.EventArgs e) {
            if ((this.Scroll != null)) {
                this.Scroll(sender, e);
            }
        }
        
        internal void RaiseOnChange(object sender, System.EventArgs e) {
            if ((this.Change != null)) {
                this.Change(sender, e);
            }
        }
        
        internal void RaiseOnOLEStartDrag(object sender, ISliderEvents_OLEStartDragEvent e) {
            if ((this.OLEStartDrag != null)) {
                this.OLEStartDrag(sender, e);
            }
        }
        
        internal void RaiseOnOLEGiveFeedback(object sender, ISliderEvents_OLEGiveFeedbackEvent e) {
            if ((this.OLEGiveFeedback != null)) {
                this.OLEGiveFeedback(sender, e);
            }
        }
        
        internal void RaiseOnOLESetData(object sender, ISliderEvents_OLESetDataEvent e) {
            if ((this.OLESetData != null)) {
                this.OLESetData(sender, e);
            }
        }
        
        internal void RaiseOnOLECompleteDrag(object sender, ISliderEvents_OLECompleteDragEvent e) {
            if ((this.OLECompleteDrag != null)) {
                this.OLECompleteDrag(sender, e);
            }
        }
        
        internal void RaiseOnOLEDragOver(object sender, ISliderEvents_OLEDragOverEvent e) {
            if ((this.OLEDragOver != null)) {
                this.OLEDragOver(sender, e);
            }
        }
        
        internal void RaiseOnOLEDragDrop(object sender, ISliderEvents_OLEDragDropEvent e) {
            if ((this.OLEDragDrop != null)) {
                this.OLEDragDrop(sender, e);
            }
        }
    }
    
    public delegate void ISliderEvents_KeyDownEventHandler(object sender, ISliderEvents_KeyDownEvent e);
    
    public class ISliderEvents_KeyDownEvent {
        
        public short keyCode;
        
        public short shift;
        
        public ISliderEvents_KeyDownEvent(short keyCode, short shift) {
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void ISliderEvents_KeyPressEventHandler(object sender, ISliderEvents_KeyPressEvent e);
    
    public class ISliderEvents_KeyPressEvent {
        
        public short keyAscii;
        
        public ISliderEvents_KeyPressEvent(short keyAscii) {
            this.keyAscii = keyAscii;
        }
    }
    
    public delegate void ISliderEvents_KeyUpEventHandler(object sender, ISliderEvents_KeyUpEvent e);
    
    public class ISliderEvents_KeyUpEvent {
        
        public short keyCode;
        
        public short shift;
        
        public ISliderEvents_KeyUpEvent(short keyCode, short shift) {
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void ISliderEvents_MouseDownEventHandler(object sender, ISliderEvents_MouseDownEvent e);
    
    public class ISliderEvents_MouseDownEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public ISliderEvents_MouseDownEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void ISliderEvents_MouseMoveEventHandler(object sender, ISliderEvents_MouseMoveEvent e);
    
    public class ISliderEvents_MouseMoveEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public ISliderEvents_MouseMoveEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void ISliderEvents_MouseUpEventHandler(object sender, ISliderEvents_MouseUpEvent e);
    
    public class ISliderEvents_MouseUpEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public ISliderEvents_MouseUpEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void ISliderEvents_OLEStartDragEventHandler(object sender, ISliderEvents_OLEStartDragEvent e);
    
    public class ISliderEvents_OLEStartDragEvent {
        
        public MSComctlLib.DataObject data;
        
        public int allowedEffects;
        
        public ISliderEvents_OLEStartDragEvent(MSComctlLib.DataObject data, int allowedEffects) {
            this.data = data;
            this.allowedEffects = allowedEffects;
        }
    }
    
    public delegate void ISliderEvents_OLEGiveFeedbackEventHandler(object sender, ISliderEvents_OLEGiveFeedbackEvent e);
    
    public class ISliderEvents_OLEGiveFeedbackEvent {
        
        public int effect;
        
        public bool defaultCursors;
        
        public ISliderEvents_OLEGiveFeedbackEvent(int effect, bool defaultCursors) {
            this.effect = effect;
            this.defaultCursors = defaultCursors;
        }
    }
    
    public delegate void ISliderEvents_OLESetDataEventHandler(object sender, ISliderEvents_OLESetDataEvent e);
    
    public class ISliderEvents_OLESetDataEvent {
        
        public MSComctlLib.DataObject data;
        
        public short dataFormat;
        
        public ISliderEvents_OLESetDataEvent(MSComctlLib.DataObject data, short dataFormat) {
            this.data = data;
            this.dataFormat = dataFormat;
        }
    }
    
    public delegate void ISliderEvents_OLECompleteDragEventHandler(object sender, ISliderEvents_OLECompleteDragEvent e);
    
    public class ISliderEvents_OLECompleteDragEvent {
        
        public int effect;
        
        public ISliderEvents_OLECompleteDragEvent(int effect) {
            this.effect = effect;
        }
    }
    
    public delegate void ISliderEvents_OLEDragOverEventHandler(object sender, ISliderEvents_OLEDragOverEvent e);
    
    public class ISliderEvents_OLEDragOverEvent {
        
        public MSComctlLib.DataObject data;
        
        public int effect;
        
        public short button;
        
        public short shift;
        
        public float x;
        
        public float y;
        
        public short state;
        
        public ISliderEvents_OLEDragOverEvent(MSComctlLib.DataObject data, int effect, short button, short shift, float x, float y, short state) {
            this.data = data;
            this.effect = effect;
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
            this.state = state;
        }
    }
    
    public delegate void ISliderEvents_OLEDragDropEventHandler(object sender, ISliderEvents_OLEDragDropEvent e);
    
    public class ISliderEvents_OLEDragDropEvent {
        
        public MSComctlLib.DataObject data;
        
        public int effect;
        
        public short button;
        
        public short shift;
        
        public float x;
        
        public float y;
        
        public ISliderEvents_OLEDragDropEvent(MSComctlLib.DataObject data, int effect, short button, short shift, float x, float y) {
            this.data = data;
            this.effect = effect;
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxSliderEventMulticaster : MSComctlLib.ISliderEvents {
        
        private AxSlider parent;
        
        public AxSliderEventMulticaster(AxSlider parent) {
            this.parent = parent;
        }
        
        public virtual void Click() {
            System.EventArgs clickEvent = new System.EventArgs();
            this.parent.RaiseOnClickEvent(this.parent, clickEvent);
        }
        
        public virtual void KeyDown(ref short keyCode, short shift) {
            ISliderEvents_KeyDownEvent keydownEvent = new ISliderEvents_KeyDownEvent(keyCode, shift);
            this.parent.RaiseOnKeyDownEvent(this.parent, keydownEvent);
            keyCode = keydownEvent.keyCode;
        }
        
        public virtual void KeyPress(ref short keyAscii) {
            ISliderEvents_KeyPressEvent keypressEvent = new ISliderEvents_KeyPressEvent(keyAscii);
            this.parent.RaiseOnKeyPressEvent(this.parent, keypressEvent);
            keyAscii = keypressEvent.keyAscii;
        }
        
        public virtual void KeyUp(ref short keyCode, short shift) {
            ISliderEvents_KeyUpEvent keyupEvent = new ISliderEvents_KeyUpEvent(keyCode, shift);
            this.parent.RaiseOnKeyUpEvent(this.parent, keyupEvent);
            keyCode = keyupEvent.keyCode;
        }
        
        public virtual void MouseDown(short button, short shift, int x, int y) {
            ISliderEvents_MouseDownEvent mousedownEvent = new ISliderEvents_MouseDownEvent(button, shift, x, y);
            this.parent.RaiseOnMouseDownEvent(this.parent, mousedownEvent);
        }
        
        public virtual void MouseMove(short button, short shift, int x, int y) {
            ISliderEvents_MouseMoveEvent mousemoveEvent = new ISliderEvents_MouseMoveEvent(button, shift, x, y);
            this.parent.RaiseOnMouseMoveEvent(this.parent, mousemoveEvent);
        }
        
        public virtual void MouseUp(short button, short shift, int x, int y) {
            ISliderEvents_MouseUpEvent mouseupEvent = new ISliderEvents_MouseUpEvent(button, shift, x, y);
            this.parent.RaiseOnMouseUpEvent(this.parent, mouseupEvent);
        }
        
        public virtual void Scroll() {
            System.EventArgs scrollEvent = new System.EventArgs();
            this.parent.RaiseOnScroll(this.parent, scrollEvent);
        }
        
        public virtual void Change() {
            System.EventArgs changeEvent = new System.EventArgs();
            this.parent.RaiseOnChange(this.parent, changeEvent);
        }
        
        public virtual void OLEStartDrag(ref MSComctlLib.DataObject data, ref int allowedEffects) {
            ISliderEvents_OLEStartDragEvent olestartdragEvent = new ISliderEvents_OLEStartDragEvent(data, allowedEffects);
            this.parent.RaiseOnOLEStartDrag(this.parent, olestartdragEvent);
            data = olestartdragEvent.data;
            allowedEffects = olestartdragEvent.allowedEffects;
        }
        
        public virtual void OLEGiveFeedback(ref int effect, ref bool defaultCursors) {
            ISliderEvents_OLEGiveFeedbackEvent olegivefeedbackEvent = new ISliderEvents_OLEGiveFeedbackEvent(effect, defaultCursors);
            this.parent.RaiseOnOLEGiveFeedback(this.parent, olegivefeedbackEvent);
            effect = olegivefeedbackEvent.effect;
            defaultCursors = olegivefeedbackEvent.defaultCursors;
        }
        
        public virtual void OLESetData(ref MSComctlLib.DataObject data, ref short dataFormat) {
            ISliderEvents_OLESetDataEvent olesetdataEvent = new ISliderEvents_OLESetDataEvent(data, dataFormat);
            this.parent.RaiseOnOLESetData(this.parent, olesetdataEvent);
            data = olesetdataEvent.data;
            dataFormat = olesetdataEvent.dataFormat;
        }
        
        public virtual void OLECompleteDrag(ref int effect) {
            ISliderEvents_OLECompleteDragEvent olecompletedragEvent = new ISliderEvents_OLECompleteDragEvent(effect);
            this.parent.RaiseOnOLECompleteDrag(this.parent, olecompletedragEvent);
            effect = olecompletedragEvent.effect;
        }
        
        public virtual void OLEDragOver(ref MSComctlLib.DataObject data, ref int effect, ref short button, ref short shift, ref float x, ref float y, ref short state) {
            ISliderEvents_OLEDragOverEvent oledragoverEvent = new ISliderEvents_OLEDragOverEvent(data, effect, button, shift, x, y, state);
            this.parent.RaiseOnOLEDragOver(this.parent, oledragoverEvent);
            data = oledragoverEvent.data;
            effect = oledragoverEvent.effect;
            button = oledragoverEvent.button;
            shift = oledragoverEvent.shift;
            x = oledragoverEvent.x;
            y = oledragoverEvent.y;
            state = oledragoverEvent.state;
        }
        
        public virtual void OLEDragDrop(ref MSComctlLib.DataObject data, ref int effect, ref short button, ref short shift, ref float x, ref float y) {
            ISliderEvents_OLEDragDropEvent oledragdropEvent = new ISliderEvents_OLEDragDropEvent(data, effect, button, shift, x, y);
            this.parent.RaiseOnOLEDragDrop(this.parent, oledragdropEvent);
            data = oledragdropEvent.data;
            effect = oledragdropEvent.effect;
            button = oledragdropEvent.button;
            shift = oledragdropEvent.shift;
            x = oledragdropEvent.x;
            y = oledragdropEvent.y;
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{dd9da666-8594-11d1-b16a-00c0f0283628}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("Change")]
    public class AxImageCombo : System.Windows.Forms.AxHost {
        
        private MSComctlLib.IImageCombo ocx;
        
        private AxImageComboEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxImageCombo() : 
                base("dd9da666-8594-11d1-b16a-00c0f0283628") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-517)]
        [System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Default)]
        public override string Text {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return this.ocx.Text;
                }
                else {
                    return base.Text;
                }
            }
            set {
                base.Text = value;
                if ((this.ocx != null)) {
                    this.ocx.Text = value;
                }
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-501)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public override System.Drawing.Color BackColor {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetColorFromOleColor(((uint)(this.ocx.BackColor)));
                }
                else {
                    return base.BackColor;
                }
            }
            set {
                base.BackColor = value;
                if ((this.ocx != null)) {
                    this.ocx.BackColor = ((uint)(GetOleColorFromColor(value)));
                }
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-514)]
        public override bool Enabled {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return this.ocx.Enabled;
                }
                else {
                    return base.Enabled;
                }
            }
            set {
                base.Enabled = value;
                if ((this.ocx != null)) {
                    this.ocx.Enabled = value;
                }
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-512)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IFontDisp")]
        public override System.Drawing.Font Font {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetFontFromIFont(this.ocx.Font);
                }
                else {
                    return base.Font;
                }
            }
            set {
                base.Font = value;
                if ((this.ocx != null)) {
                    this.ocx.Font = ((stdole.IFontDisp)(GetIFontFromFont(value)));
                }
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-513)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public override System.Drawing.Color ForeColor {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetColorFromOleColor(((uint)(this.ocx.ForeColor)));
                }
                else {
                    return base.ForeColor;
                }
            }
            set {
                base.ForeColor = value;
                if ((this.ocx != null)) {
                    this.ocx.ForeColor = ((uint)(GetOleColorFromColor(value)));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-515)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.Int32")]
        public virtual int hWnd {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("hWnd", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return (this.ocx.hWnd);
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("hWnd", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.hWnd = ((int)((value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual object ImageList {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImageList", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ImageList;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImageList", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ImageList = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual short Indentation {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Indentation", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Indentation;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Indentation", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Indentation = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual MSComctlLib.ComboItems ComboItems {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ComboItems", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ComboItems;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ComboItems", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ComboItems = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual bool Locked {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Locked", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Locked;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Locked", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Locked = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IPictureDisp")]
        public virtual System.Drawing.Image MouseIcon {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MouseIcon", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetPictureFromIPicture(this.ocx.MouseIcon);
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MouseIcon", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MouseIcon = ((stdole.IPictureDisp)(GetIPictureFromPicture(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        public virtual MSComctlLib.MousePointerConstants MousePointer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MousePointer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MousePointer;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MousePointer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MousePointer = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1550)]
        public virtual MSComctlLib.OLEDragConstants OLEDragMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDragMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.OLEDragMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDragMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.OLEDragMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1551)]
        public virtual MSComctlLib.OLEDropConstants OLEDropMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDropMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.OLEDropMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDropMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.OLEDropMode = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(14)]
        public virtual MSComctlLib.ComboItem SelectedItem {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelectedItem", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SelectedItem;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelectedItem", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SelectedItem = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(16)]
        public virtual int SelLength {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelLength", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SelLength;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelLength", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SelLength = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(17)]
        public virtual int SelStart {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelStart", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SelStart;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelStart", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SelStart = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(18)]
        public virtual string SelText {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelText", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SelText;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelText", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SelText = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(20)]
        public virtual MSComctlLib.ImageComboStyleConstants Style {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Style", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Style;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Style", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Style = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(24)]
        public virtual bool UsePathSep {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UsePathSep", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.UsePathSep;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UsePathSep", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.UsePathSep = value;
            }
        }
        
        public event System.EventHandler Change;
        
        public event System.EventHandler Dropdown;
        
        public event System.EventHandler ClickEvent;
        
        public event DImageComboEvents_KeyDownEventHandler KeyDownEvent;
        
        public event DImageComboEvents_KeyUpEventHandler KeyUpEvent;
        
        public event DImageComboEvents_KeyPressEventHandler KeyPressEvent;
        
        public event DImageComboEvents_OLEStartDragEventHandler OLEStartDrag;
        
        public event DImageComboEvents_OLEGiveFeedbackEventHandler OLEGiveFeedback;
        
        public event DImageComboEvents_OLESetDataEventHandler OLESetData;
        
        public event DImageComboEvents_OLECompleteDragEventHandler OLECompleteDrag;
        
        public event DImageComboEvents_OLEDragOverEventHandler OLEDragOver;
        
        public event DImageComboEvents_OLEDragDropEventHandler OLEDragDrop;
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        public virtual MSComctlLib.ComboItem GetFirstVisible() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetFirstVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MSComctlLib.ComboItem returnValue = ((MSComctlLib.ComboItem)(this.ocx.GetFirstVisible()));
            return returnValue;
        }
        
        public virtual void Refresh() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Refresh", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Refresh();
        }
        
        public virtual void OLEDrag() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDrag", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.OLEDrag();
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxImageComboEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(MSComctlLib.DImageComboEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((MSComctlLib.IImageCombo)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnChange(object sender, System.EventArgs e) {
            if ((this.Change != null)) {
                this.Change(sender, e);
            }
        }
        
        internal void RaiseOnDropdown(object sender, System.EventArgs e) {
            if ((this.Dropdown != null)) {
                this.Dropdown(sender, e);
            }
        }
        
        internal void RaiseOnClickEvent(object sender, System.EventArgs e) {
            if ((this.ClickEvent != null)) {
                this.ClickEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyDownEvent(object sender, DImageComboEvents_KeyDownEvent e) {
            if ((this.KeyDownEvent != null)) {
                this.KeyDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyUpEvent(object sender, DImageComboEvents_KeyUpEvent e) {
            if ((this.KeyUpEvent != null)) {
                this.KeyUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyPressEvent(object sender, DImageComboEvents_KeyPressEvent e) {
            if ((this.KeyPressEvent != null)) {
                this.KeyPressEvent(sender, e);
            }
        }
        
        internal void RaiseOnOLEStartDrag(object sender, DImageComboEvents_OLEStartDragEvent e) {
            if ((this.OLEStartDrag != null)) {
                this.OLEStartDrag(sender, e);
            }
        }
        
        internal void RaiseOnOLEGiveFeedback(object sender, DImageComboEvents_OLEGiveFeedbackEvent e) {
            if ((this.OLEGiveFeedback != null)) {
                this.OLEGiveFeedback(sender, e);
            }
        }
        
        internal void RaiseOnOLESetData(object sender, DImageComboEvents_OLESetDataEvent e) {
            if ((this.OLESetData != null)) {
                this.OLESetData(sender, e);
            }
        }
        
        internal void RaiseOnOLECompleteDrag(object sender, DImageComboEvents_OLECompleteDragEvent e) {
            if ((this.OLECompleteDrag != null)) {
                this.OLECompleteDrag(sender, e);
            }
        }
        
        internal void RaiseOnOLEDragOver(object sender, DImageComboEvents_OLEDragOverEvent e) {
            if ((this.OLEDragOver != null)) {
                this.OLEDragOver(sender, e);
            }
        }
        
        internal void RaiseOnOLEDragDrop(object sender, DImageComboEvents_OLEDragDropEvent e) {
            if ((this.OLEDragDrop != null)) {
                this.OLEDragDrop(sender, e);
            }
        }
    }
    
    public delegate void DImageComboEvents_KeyDownEventHandler(object sender, DImageComboEvents_KeyDownEvent e);
    
    public class DImageComboEvents_KeyDownEvent {
        
        public short keyCode;
        
        public short shift;
        
        public DImageComboEvents_KeyDownEvent(short keyCode, short shift) {
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void DImageComboEvents_KeyUpEventHandler(object sender, DImageComboEvents_KeyUpEvent e);
    
    public class DImageComboEvents_KeyUpEvent {
        
        public short keyCode;
        
        public short shift;
        
        public DImageComboEvents_KeyUpEvent(short keyCode, short shift) {
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void DImageComboEvents_KeyPressEventHandler(object sender, DImageComboEvents_KeyPressEvent e);
    
    public class DImageComboEvents_KeyPressEvent {
        
        public short keyAscii;
        
        public DImageComboEvents_KeyPressEvent(short keyAscii) {
            this.keyAscii = keyAscii;
        }
    }
    
    public delegate void DImageComboEvents_OLEStartDragEventHandler(object sender, DImageComboEvents_OLEStartDragEvent e);
    
    public class DImageComboEvents_OLEStartDragEvent {
        
        public MSComctlLib.DataObject data;
        
        public int allowedEffects;
        
        public DImageComboEvents_OLEStartDragEvent(MSComctlLib.DataObject data, int allowedEffects) {
            this.data = data;
            this.allowedEffects = allowedEffects;
        }
    }
    
    public delegate void DImageComboEvents_OLEGiveFeedbackEventHandler(object sender, DImageComboEvents_OLEGiveFeedbackEvent e);
    
    public class DImageComboEvents_OLEGiveFeedbackEvent {
        
        public int effect;
        
        public bool defaultCursors;
        
        public DImageComboEvents_OLEGiveFeedbackEvent(int effect, bool defaultCursors) {
            this.effect = effect;
            this.defaultCursors = defaultCursors;
        }
    }
    
    public delegate void DImageComboEvents_OLESetDataEventHandler(object sender, DImageComboEvents_OLESetDataEvent e);
    
    public class DImageComboEvents_OLESetDataEvent {
        
        public MSComctlLib.DataObject data;
        
        public short dataFormat;
        
        public DImageComboEvents_OLESetDataEvent(MSComctlLib.DataObject data, short dataFormat) {
            this.data = data;
            this.dataFormat = dataFormat;
        }
    }
    
    public delegate void DImageComboEvents_OLECompleteDragEventHandler(object sender, DImageComboEvents_OLECompleteDragEvent e);
    
    public class DImageComboEvents_OLECompleteDragEvent {
        
        public int effect;
        
        public DImageComboEvents_OLECompleteDragEvent(int effect) {
            this.effect = effect;
        }
    }
    
    public delegate void DImageComboEvents_OLEDragOverEventHandler(object sender, DImageComboEvents_OLEDragOverEvent e);
    
    public class DImageComboEvents_OLEDragOverEvent {
        
        public MSComctlLib.DataObject data;
        
        public int effect;
        
        public short button;
        
        public short shift;
        
        public float x;
        
        public float y;
        
        public short state;
        
        public DImageComboEvents_OLEDragOverEvent(MSComctlLib.DataObject data, int effect, short button, short shift, float x, float y, short state) {
            this.data = data;
            this.effect = effect;
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
            this.state = state;
        }
    }
    
    public delegate void DImageComboEvents_OLEDragDropEventHandler(object sender, DImageComboEvents_OLEDragDropEvent e);
    
    public class DImageComboEvents_OLEDragDropEvent {
        
        public MSComctlLib.DataObject data;
        
        public int effect;
        
        public short button;
        
        public short shift;
        
        public float x;
        
        public float y;
        
        public DImageComboEvents_OLEDragDropEvent(MSComctlLib.DataObject data, int effect, short button, short shift, float x, float y) {
            this.data = data;
            this.effect = effect;
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxImageComboEventMulticaster : MSComctlLib.DImageComboEvents {
        
        private AxImageCombo parent;
        
        public AxImageComboEventMulticaster(AxImageCombo parent) {
            this.parent = parent;
        }
        
        public virtual void Change() {
            System.EventArgs changeEvent = new System.EventArgs();
            this.parent.RaiseOnChange(this.parent, changeEvent);
        }
        
        public virtual void Dropdown() {
            System.EventArgs dropdownEvent = new System.EventArgs();
            this.parent.RaiseOnDropdown(this.parent, dropdownEvent);
        }
        
        public virtual void Click() {
            System.EventArgs clickEvent = new System.EventArgs();
            this.parent.RaiseOnClickEvent(this.parent, clickEvent);
        }
        
        public virtual void KeyDown(short keyCode, short shift) {
            DImageComboEvents_KeyDownEvent keydownEvent = new DImageComboEvents_KeyDownEvent(keyCode, shift);
            this.parent.RaiseOnKeyDownEvent(this.parent, keydownEvent);
        }
        
        public virtual void KeyUp(short keyCode, short shift) {
            DImageComboEvents_KeyUpEvent keyupEvent = new DImageComboEvents_KeyUpEvent(keyCode, shift);
            this.parent.RaiseOnKeyUpEvent(this.parent, keyupEvent);
        }
        
        public virtual void KeyPress(ref short keyAscii) {
            DImageComboEvents_KeyPressEvent keypressEvent = new DImageComboEvents_KeyPressEvent(keyAscii);
            this.parent.RaiseOnKeyPressEvent(this.parent, keypressEvent);
            keyAscii = keypressEvent.keyAscii;
        }
        
        public virtual void OLEStartDrag(ref MSComctlLib.DataObject data, ref int allowedEffects) {
            DImageComboEvents_OLEStartDragEvent olestartdragEvent = new DImageComboEvents_OLEStartDragEvent(data, allowedEffects);
            this.parent.RaiseOnOLEStartDrag(this.parent, olestartdragEvent);
            data = olestartdragEvent.data;
            allowedEffects = olestartdragEvent.allowedEffects;
        }
        
        public virtual void OLEGiveFeedback(ref int effect, ref bool defaultCursors) {
            DImageComboEvents_OLEGiveFeedbackEvent olegivefeedbackEvent = new DImageComboEvents_OLEGiveFeedbackEvent(effect, defaultCursors);
            this.parent.RaiseOnOLEGiveFeedback(this.parent, olegivefeedbackEvent);
            effect = olegivefeedbackEvent.effect;
            defaultCursors = olegivefeedbackEvent.defaultCursors;
        }
        
        public virtual void OLESetData(ref MSComctlLib.DataObject data, ref short dataFormat) {
            DImageComboEvents_OLESetDataEvent olesetdataEvent = new DImageComboEvents_OLESetDataEvent(data, dataFormat);
            this.parent.RaiseOnOLESetData(this.parent, olesetdataEvent);
            data = olesetdataEvent.data;
            dataFormat = olesetdataEvent.dataFormat;
        }
        
        public virtual void OLECompleteDrag(ref int effect) {
            DImageComboEvents_OLECompleteDragEvent olecompletedragEvent = new DImageComboEvents_OLECompleteDragEvent(effect);
            this.parent.RaiseOnOLECompleteDrag(this.parent, olecompletedragEvent);
            effect = olecompletedragEvent.effect;
        }
        
        public virtual void OLEDragOver(ref MSComctlLib.DataObject data, ref int effect, ref short button, ref short shift, ref float x, ref float y, ref short state) {
            DImageComboEvents_OLEDragOverEvent oledragoverEvent = new DImageComboEvents_OLEDragOverEvent(data, effect, button, shift, x, y, state);
            this.parent.RaiseOnOLEDragOver(this.parent, oledragoverEvent);
            data = oledragoverEvent.data;
            effect = oledragoverEvent.effect;
            button = oledragoverEvent.button;
            shift = oledragoverEvent.shift;
            x = oledragoverEvent.x;
            y = oledragoverEvent.y;
            state = oledragoverEvent.state;
        }
        
        public virtual void OLEDragDrop(ref MSComctlLib.DataObject data, ref int effect, ref short button, ref short shift, ref float x, ref float y) {
            DImageComboEvents_OLEDragDropEvent oledragdropEvent = new DImageComboEvents_OLEDragDropEvent(data, effect, button, shift, x, y);
            this.parent.RaiseOnOLEDragDrop(this.parent, oledragdropEvent);
            data = oledragdropEvent.data;
            effect = oledragdropEvent.effect;
            button = oledragdropEvent.button;
            shift = oledragdropEvent.shift;
            x = oledragdropEvent.x;
            y = oledragdropEvent.y;
        }
    }
}
