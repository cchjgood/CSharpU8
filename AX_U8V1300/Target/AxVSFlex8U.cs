//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Reflection.AssemblyVersion("1.0.0.0")]
[assembly: System.Windows.Forms.AxHost.TypeLibraryTimeStamp("09/30/2011 10:57:06")]

namespace AxVSFlex8U {
    
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{3705b4e2-8fcb-4a21-8cce-5d6a98c32456}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("SelChange")]
    [System.ComponentModel.DefaultProperty("Text")]
    public class AxVSFlexGrid : System.Windows.Forms.AxHost {
        
        private VSFlex8U.IVSFlexGrid ocx;
        
        private AxVSFlexGridEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        private msdatasrc.DataSource axDataSource;
        
        public AxVSFlexGrid() : 
                base("3705b4e2-8fcb-4a21-8cce-5d6a98c32456") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(About));
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual string FontName {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FontName", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FontName;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FontName", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FontName = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual float FontSize {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FontSize", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FontSize;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FontSize", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FontSize = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual bool FontBold {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FontBold", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FontBold;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FontBold", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FontBold = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual bool FontItalic {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FontItalic", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FontItalic;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FontItalic", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FontItalic = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual bool FontStrikethru {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FontStrikethru", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FontStrikethru;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FontStrikethru", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FontStrikethru = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual bool FontUnderline {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FontUnderline", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FontUnderline;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FontUnderline", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FontUnderline = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual int Rows {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Rows", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Rows;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Rows", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Rows = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        public virtual int Cols {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Cols", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Cols;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Cols", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Cols = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual short Version {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Version", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Version;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Version", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Version = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        public virtual string FormatString {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FormatString", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FormatString;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FormatString", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FormatString = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        public virtual int FixedRows {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FixedRows", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FixedRows;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FixedRows", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FixedRows = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(12)]
        public virtual int FixedCols {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FixedCols", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FixedCols;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FixedCols", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FixedCols = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        public virtual int TopRow {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TopRow", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.TopRow;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TopRow", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.TopRow = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(14)]
        public virtual int LeftCol {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LeftCol", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.LeftCol;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LeftCol", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.LeftCol = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(15)]
        public virtual int RowSel {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RowSel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.RowSel;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RowSel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.RowSel = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(16)]
        public virtual int ColSel {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ColSel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ColSel;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ColSel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ColSel = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(17)]
        public virtual int Row {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Row", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Row;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Row", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Row = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(18)]
        public virtual int Col {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Col", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Col;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Col", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Col = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(0)]
        public override string Text {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return this.ocx.Text;
                }
                else {
                    return base.Text;
                }
            }
            set {
                base.Text = value;
                if ((this.ocx != null)) {
                    this.ocx.Text = value;
                }
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-501)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public override System.Drawing.Color BackColor {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetColorFromOleColor(((uint)(this.ocx.BackColor)));
                }
                else {
                    return base.BackColor;
                }
            }
            set {
                base.BackColor = value;
                if ((this.ocx != null)) {
                    this.ocx.BackColor = ((uint)(GetOleColorFromColor(value)));
                }
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-513)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public override System.Drawing.Color ForeColor {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetColorFromOleColor(((uint)(this.ocx.ForeColor)));
                }
                else {
                    return base.ForeColor;
                }
            }
            set {
                base.ForeColor = value;
                if ((this.ocx != null)) {
                    this.ocx.ForeColor = ((uint)(GetOleColorFromColor(value)));
                }
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(20)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color BackColorFixed {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BackColorFixed", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.BackColorFixed)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BackColorFixed", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BackColorFixed = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(21)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color ForeColorFixed {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ForeColorFixed", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.ForeColorFixed)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ForeColorFixed", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ForeColorFixed = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(22)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color BackColorSel {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BackColorSel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.BackColorSel)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BackColorSel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BackColorSel = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(23)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color ForeColorSel {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ForeColorSel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.ForeColorSel)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ForeColorSel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ForeColorSel = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(24)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color BackColorBkg {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BackColorBkg", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.BackColorBkg)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BackColorBkg", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BackColorBkg = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(25)]
        public virtual bool WordWrap {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("WordWrap", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.WordWrap;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("WordWrap", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.WordWrap = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(26)]
        public virtual VSFlex8U.TextStyleSettings TextStyle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TextStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.TextStyle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TextStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.TextStyle = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(27)]
        public virtual VSFlex8U.TextStyleSettings TextStyleFixed {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TextStyleFixed", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.TextStyleFixed;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TextStyleFixed", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.TextStyleFixed = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(28)]
        public virtual bool ScrollTrack {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ScrollTrack", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ScrollTrack;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ScrollTrack", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ScrollTrack = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(29)]
        public virtual VSFlex8U.FocusRectSettings FocusRect {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FocusRect", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FocusRect;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FocusRect", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FocusRect = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(30)]
        public virtual VSFlex8U.ShowSelSettings HighLight {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HighLight", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.HighLight;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HighLight", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.HighLight = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(31)]
        public virtual VSFlex8U.RedrawSettings Redraw {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Redraw", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Redraw;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Redraw", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Redraw = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(32)]
        public virtual VSFlex8U.ScrollBarsSettings ScrollBars {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ScrollBars", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ScrollBars;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ScrollBars", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ScrollBars = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(33)]
        public virtual int MouseRow {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MouseRow", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MouseRow;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(34)]
        public virtual int MouseCol {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MouseCol", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MouseCol;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(35)]
        public virtual int CellLeft {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellLeft", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CellLeft;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(36)]
        public virtual int CellTop {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellTop", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CellTop;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(37)]
        public virtual int CellWidth {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CellWidth;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(38)]
        public virtual int CellHeight {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellHeight", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CellHeight;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(39)]
        public virtual int RowHeightMin {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RowHeightMin", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.RowHeightMin;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RowHeightMin", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.RowHeightMin = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(40)]
        public virtual VSFlex8U.FillStyleSettings FillStyle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FillStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FillStyle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FillStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FillStyle = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(41)]
        public virtual VSFlex8U.GridStyleSettings GridLines {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridLines", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.GridLines;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridLines", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.GridLines = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(42)]
        public virtual VSFlex8U.GridStyleSettings GridLinesFixed {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridLinesFixed", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.GridLinesFixed;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridLinesFixed", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.GridLinesFixed = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(43)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color GridColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.GridColor)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.GridColor = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(44)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color GridColorFixed {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridColorFixed", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.GridColorFixed)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridColorFixed", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.GridColorFixed = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(45)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color CellBackColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellBackColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.CellBackColor)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellBackColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CellBackColor = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(46)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color CellForeColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellForeColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.CellForeColor)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellForeColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CellForeColor = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(47)]
        public virtual VSFlex8U.AlignmentSettings CellAlignment {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellAlignment", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CellAlignment;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellAlignment", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CellAlignment = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(48)]
        public virtual VSFlex8U.TextStyleSettings CellTextStyle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellTextStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CellTextStyle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellTextStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CellTextStyle = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(49)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IPictureDisp")]
        public virtual System.Drawing.Image CellPicture {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellPicture", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetPictureFromIPicture(this.ocx.CellPicture);
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellPicture", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CellPicture = ((stdole.IPictureDisp)(GetIPictureFromPicture(value)));
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(50)]
        public virtual VSFlex8U.PictureAlignmentSettings CellPictureAlignment {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellPictureAlignment", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CellPictureAlignment;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellPictureAlignment", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CellPictureAlignment = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(51)]
        public virtual string CellFontName {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFontName", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CellFontName;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFontName", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CellFontName = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(52)]
        public virtual float CellFontSize {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFontSize", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CellFontSize;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFontSize", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CellFontSize = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(53)]
        public virtual bool CellFontBold {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFontBold", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CellFontBold;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFontBold", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CellFontBold = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(54)]
        public virtual bool CellFontItalic {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFontItalic", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CellFontItalic;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFontItalic", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CellFontItalic = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(55)]
        public virtual float CellFontWidth {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFontWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CellFontWidth;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFontWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CellFontWidth = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(56)]
        public virtual bool CellFontUnderline {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFontUnderline", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CellFontUnderline;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFontUnderline", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CellFontUnderline = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(57)]
        public virtual bool CellFontStrikethru {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFontStrikethru", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CellFontStrikethru;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFontStrikethru", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CellFontStrikethru = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(58)]
        public virtual float FontWidth {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FontWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FontWidth;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FontWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FontWidth = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(59)]
        public virtual string Clip {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Clip", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Clip;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Clip", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Clip = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(60)]
        public virtual VSFlex8U.SortSettings Sort {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Sort", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Sort = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(61)]
        public virtual VSFlex8U.SelModeSettings SelectionMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelectionMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SelectionMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelectionMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SelectionMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(62)]
        public virtual VSFlex8U.MergeSettings MergeCells {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MergeCells", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MergeCells;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MergeCells", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MergeCells = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-523)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IPictureDisp")]
        public virtual System.Drawing.Image Picture {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Picture", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetPictureFromIPicture(this.ocx.Picture);
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(64)]
        public virtual VSFlex8U.PictureTypeSettings PictureType {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PictureType", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.PictureType;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PictureType", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.PictureType = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(65)]
        public virtual bool AllowBigSelection {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AllowBigSelection", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AllowBigSelection;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AllowBigSelection", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AllowBigSelection = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(66)]
        public virtual VSFlex8U.AllowUserResizeSettings AllowUserResizing {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AllowUserResizing", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AllowUserResizing;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AllowUserResizing", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AllowUserResizing = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-521)]
        public virtual VSFlex8U.MousePointerSettings MousePointer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MousePointer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MousePointer;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MousePointer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MousePointer = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-522)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IPictureDisp")]
        public virtual System.Drawing.Image MouseIcon {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MouseIcon", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetPictureFromIPicture(this.ocx.MouseIcon);
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MouseIcon", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MouseIcon = ((stdole.IPictureDisp)(GetIPictureFromPicture(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(68)]
        [System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
        public virtual string DataMember {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DataMember", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DataMember;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DataMember", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.DataMember = value;
            }
        }
        
        [System.Runtime.InteropServices.DispIdAttribute(69)]
        public virtual msdatasrc.DataSource DataSource {
            get {
                return this.axDataSource;
            }
            set {
                this.axDataSource = value;
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    this.ocx.DataSource = value;
                }
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(70)]
        public virtual bool VirtualData {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("VirtualData", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.VirtualData;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("VirtualData", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.VirtualData = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(71)]
        public virtual VSFlex8U.EditableSettings Editable {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Editable", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Editable;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Editable", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Editable = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(72)]
        public virtual string ComboList {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ComboList", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ComboList;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ComboList", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ComboList = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(73)]
        public virtual double Value {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Value", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(74)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color FloodColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FloodColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.FloodColor)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FloodColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FloodColor = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(75)]
        public virtual short CellFloodPercent {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFloodPercent", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CellFloodPercent;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFloodPercent", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CellFloodPercent = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(76)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color CellFloodColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFloodColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.CellFloodColor)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellFloodColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CellFloodColor = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(77)]
        public virtual VSFlex8U.SubtotalPositionSettings SubtotalPosition {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SubtotalPosition", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SubtotalPosition;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SubtotalPosition", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SubtotalPosition = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-504)]
        public virtual VSFlex8U.BorderStyleSettings BorderStyle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BorderStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.BorderStyle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BorderStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BorderStyle = value;
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-512)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IFontDisp")]
        public override System.Drawing.Font Font {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetFontFromIFont(this.ocx.Font);
                }
                else {
                    return base.Font;
                }
            }
            set {
                base.Font = value;
                if ((this.ocx != null)) {
                    this.ocx.Font = ((stdole.IFontDisp)(GetIFontFromFont(value)));
                }
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-514)]
        public override bool Enabled {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return this.ocx.Enabled;
                }
                else {
                    return base.Enabled;
                }
            }
            set {
                base.Enabled = value;
                if ((this.ocx != null)) {
                    this.ocx.Enabled = value;
                }
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-520)]
        public virtual VSFlex8U.AppearanceSettings Appearance {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Appearance", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Appearance;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Appearance", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Appearance = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(82)]
        public virtual VSFlex8U.OutlineBarSettings OutlineBar {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OutlineBar", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.OutlineBar;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OutlineBar", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.OutlineBar = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(83)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color TreeColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TreeColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.TreeColor)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TreeColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.TreeColor = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(84)]
        public virtual short GridLineWidth {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridLineWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.GridLineWidth;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridLineWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.GridLineWidth = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(85)]
        public virtual bool AutoResize {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoResize", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AutoResize;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoResize", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AutoResize = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(86)]
        public virtual int BottomRow {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BottomRow", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.BottomRow;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(87)]
        public virtual int RightCol {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RightCol", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.RightCol;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(88)]
        public virtual bool ExtendLastCol {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ExtendLastCol", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ExtendLastCol;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ExtendLastCol", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ExtendLastCol = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(89)]
        public virtual int ClientWidth {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClientWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ClientWidth;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(90)]
        public virtual int ClientHeight {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClientHeight", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ClientHeight;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(91)]
        public virtual string EditText {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EditText", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.EditText;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EditText", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.EditText = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-515)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.Int32")]
        public virtual int hWnd {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("hWnd", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return (this.ocx.hWnd);
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(93)]
        public virtual VSFlex8U.AutoSizeSettings AutoSizeMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoSizeMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AutoSizeMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoSizeMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AutoSizeMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(94)]
        public virtual bool CtlRightToLeft {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlRightToLeft", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.RightToLeft;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlRightToLeft", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.RightToLeft = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(95)]
        public virtual bool MultiTotals {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiTotals", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MultiTotals;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultiTotals", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MultiTotals = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(96)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color BackColorAlternate {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BackColorAlternate", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.BackColorAlternate)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BackColorAlternate", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BackColorAlternate = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(97)]
        public virtual VSFlex8U.OwnerDrawSettings OwnerDraw {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OwnerDraw", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.OwnerDraw;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OwnerDraw", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.OwnerDraw = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(98)]
        public virtual VSFlex8U.DataModeSettings DataMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DataMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DataMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DataMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.DataMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(99)]
        public virtual VSFlex8U.OLEDragModeSettings OLEDragMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDragMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.OLEDragMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDragMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.OLEDragMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(100)]
        public virtual VSFlex8U.OLEDropModeSettings OLEDropMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDropMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.OLEDropMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDropMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.OLEDropMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(101)]
        public virtual VSFlex8U.TabBehaviorSettings TabBehavior {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TabBehavior", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.TabBehavior;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TabBehavior", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.TabBehavior = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(102)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color SheetBorder {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SheetBorder", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.SheetBorder)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SheetBorder", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SheetBorder = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(103)]
        public virtual bool AllowSelection {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AllowSelection", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AllowSelection;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AllowSelection", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AllowSelection = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(104)]
        public virtual bool PicturesOver {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PicturesOver", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.PicturesOver;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PicturesOver", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.PicturesOver = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(105)]
        public virtual VSFlex8U.CellCheckedSettings CellChecked {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellChecked", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CellChecked;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellChecked", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CellChecked = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(106)]
        public virtual VSFlex8U.MergeCompareSettings MergeCompare {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MergeCompare", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MergeCompare;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MergeCompare", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MergeCompare = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(107)]
        public virtual VSFlex8U.EllipsisSettings Ellipsis {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Ellipsis", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Ellipsis;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Ellipsis", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Ellipsis = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(108)]
        public virtual int OutlineCol {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OutlineCol", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.OutlineCol;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OutlineCol", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.OutlineCol = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(109)]
        public virtual int RowHeightMax {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RowHeightMax", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.RowHeightMax;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RowHeightMax", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.RowHeightMax = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(110)]
        public virtual VSFlex8U.AutoSearchSettings AutoSearch {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoSearch", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AutoSearch;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoSearch", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AutoSearch = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(111)]
        public virtual VSFlex8U.ExplorerBarSettings ExplorerBar {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ExplorerBar", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ExplorerBar;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ExplorerBar", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ExplorerBar = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(112)]
        public virtual string EditMask {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EditMask", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.EditMask;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EditMask", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.EditMask = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(113)]
        public virtual int EditSelStart {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EditSelStart", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.EditSelStart;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EditSelStart", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.EditSelStart = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(114)]
        public virtual int EditSelLength {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EditSelLength", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.EditSelLength;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EditSelLength", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.EditSelLength = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(115)]
        public virtual string EditSelText {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EditSelText", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.EditSelText;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EditSelText", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.EditSelText = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(116)]
        public virtual int EditMaxLength {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EditMaxLength", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.EditMaxLength;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EditMaxLength", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.EditMaxLength = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(117)]
        public virtual int ComboIndex {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ComboIndex", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ComboIndex;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ComboIndex", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ComboIndex = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(118)]
        public virtual int ComboCount {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ComboCount", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ComboCount;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(167)]
        public virtual int SelectedRows {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelectedRows", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SelectedRows;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(169)]
        public virtual bool ScrollTips {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ScrollTips", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ScrollTips;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ScrollTips", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ScrollTips = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(170)]
        public virtual string ScrollTipText {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ScrollTipText", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ScrollTipText;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ScrollTipText", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ScrollTipText = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(173)]
        public virtual int ColWidthMin {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ColWidthMin", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ColWidthMin;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ColWidthMin", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ColWidthMin = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(174)]
        public virtual int ColWidthMax {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ColWidthMax", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ColWidthMax;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ColWidthMax", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ColWidthMax = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(176)]
        public virtual VSFlex8U.ShowButtonSettings ShowComboButton {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowComboButton", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ShowComboButton;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowComboButton", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ShowComboButton = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(177)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IPictureDisp")]
        public virtual System.Drawing.Image CellButtonPicture {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellButtonPicture", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetPictureFromIPicture(this.ocx.CellButtonPicture);
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellButtonPicture", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CellButtonPicture = ((stdole.IPictureDisp)(GetIPictureFromPicture(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(178)]
        public virtual VSFlex8U.ComboSearchSettings ComboSearch {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ComboSearch", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ComboSearch;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ComboSearch", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ComboSearch = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(180)]
        public virtual bool AutoSizeMouse {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoSizeMouse", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AutoSizeMouse;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoSizeMouse", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AutoSizeMouse = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(182)]
        public virtual string ClipSeparators {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClipSeparators", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ClipSeparators;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClipSeparators", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ClipSeparators = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(188)]
        public virtual int FrozenRows {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FrozenRows", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FrozenRows;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FrozenRows", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FrozenRows = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(189)]
        public virtual int FrozenCols {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FrozenCols", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FrozenCols;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FrozenCols", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FrozenCols = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(190)]
        public virtual VSFlex8U.AllowUserFreezeSettings AllowUserFreezing {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AllowUserFreezing", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AllowUserFreezing;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AllowUserFreezing", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AllowUserFreezing = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(191)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color BackColorFrozen {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BackColorFrozen", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.BackColorFrozen)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BackColorFrozen", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BackColorFrozen = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(192)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color ForeColorFrozen {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ForeColorFrozen", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.ForeColorFrozen)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ForeColorFrozen", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ForeColorFrozen = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(193)]
        public virtual VSFlex8U.IVSFlexDataSource FlexDataSource {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FlexDataSource", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FlexDataSource;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FlexDataSource", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FlexDataSource = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(196)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IPictureDisp")]
        public virtual System.Drawing.Image NodeOpenPicture {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("NodeOpenPicture", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetPictureFromIPicture(this.ocx.NodeOpenPicture);
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("NodeOpenPicture", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.NodeOpenPicture = ((stdole.IPictureDisp)(GetIPictureFromPicture(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(197)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IPictureDisp")]
        public virtual System.Drawing.Image NodeClosedPicture {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("NodeClosedPicture", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetPictureFromIPicture(this.ocx.NodeClosedPicture);
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("NodeClosedPicture", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.NodeClosedPicture = ((stdole.IPictureDisp)(GetIPictureFromPicture(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(199)]
        public virtual float AutoSearchDelay {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoSearchDelay", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AutoSearchDelay;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoSearchDelay", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AutoSearchDelay = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(200)]
        public virtual int EditWindow {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EditWindow", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.EditWindow;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(201)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IPictureDisp")]
        public virtual System.Drawing.Image WallPaper {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("WallPaper", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetPictureFromIPicture(this.ocx.WallPaper);
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("WallPaper", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.WallPaper = ((stdole.IPictureDisp)(GetIPictureFromPicture(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(202)]
        public virtual VSFlex8U.PictureAlignmentSettings WallPaperAlignment {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("WallPaperAlignment", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.WallPaperAlignment;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("WallPaperAlignment", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.WallPaperAlignment = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(212)]
        public virtual string CtlAccessibleName {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlAccessibleName", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AccessibleName;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlAccessibleName", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AccessibleName = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(213)]
        public virtual string CtlAccessibleDescription {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlAccessibleDescription", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AccessibleDescription;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlAccessibleDescription", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AccessibleDescription = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(214)]
        public virtual string AccessibleValue {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AccessibleValue", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AccessibleValue;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AccessibleValue", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AccessibleValue = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(215)]
        public virtual object CtlAccessibleRole {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlAccessibleRole", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AccessibleRole;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlAccessibleRole", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AccessibleRole = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(216)]
        public virtual bool IsSearching {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsSearching", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IsSearching;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(217)]
        public virtual VSFlex8U.ControlFlagsSettings Flags {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Flags", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Flags;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Flags", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Flags = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(218)]
        public virtual VSFlex8U.MergeSettings MergeCellsFixed {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MergeCellsFixed", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MergeCellsFixed;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MergeCellsFixed", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MergeCellsFixed = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(219)]
        public virtual VSFlex8U.MergeCompareSettings GroupCompare {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GroupCompare", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.GroupCompare;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GroupCompare", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.GroupCompare = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(220)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IPictureDisp")]
        public virtual System.Drawing.Image SortAscendingPicture {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SortAscendingPicture", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetPictureFromIPicture(this.ocx.SortAscendingPicture);
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SortAscendingPicture", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SortAscendingPicture = ((stdole.IPictureDisp)(GetIPictureFromPicture(value)));
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(221)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IPictureDisp")]
        public virtual System.Drawing.Image SortDescendingPicture {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SortDescendingPicture", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetPictureFromIPicture(this.ocx.SortDescendingPicture);
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SortDescendingPicture", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SortDescendingPicture = ((stdole.IPictureDisp)(GetIPictureFromPicture(value)));
            }
        }
        
        public event System.EventHandler ClickEvent;
        
        public event System.EventHandler DblClick;
        
        public event _IVSFlexGridEvents_KeyDownEventHandler KeyDownEvent;
        
        public event _IVSFlexGridEvents_KeyPressEventHandler KeyPressEvent;
        
        public event _IVSFlexGridEvents_KeyUpEventHandler KeyUpEvent;
        
        public event _IVSFlexGridEvents_MouseDownEventHandler MouseDownEvent;
        
        public event _IVSFlexGridEvents_MouseMoveEventHandler MouseMoveEvent;
        
        public event _IVSFlexGridEvents_MouseUpEventHandler MouseUpEvent;
        
        public event System.EventHandler SelChange;
        
        public event System.EventHandler RowColChange;
        
        public event System.EventHandler EnterCell;
        
        public event System.EventHandler LeaveCell;
        
        public event _IVSFlexGridEvents_BeforeMouseDownEventHandler BeforeMouseDown;
        
        public event _IVSFlexGridEvents_BeforeRowColChangeEventHandler BeforeRowColChange;
        
        public event _IVSFlexGridEvents_AfterRowColChangeEventHandler AfterRowColChange;
        
        public event _IVSFlexGridEvents_BeforeSelChangeEventHandler BeforeSelChange;
        
        public event _IVSFlexGridEvents_AfterSelChangeEventHandler AfterSelChange;
        
        public event _IVSFlexGridEvents_BeforeScrollEventHandler BeforeScroll;
        
        public event _IVSFlexGridEvents_AfterScrollEventHandler AfterScroll;
        
        public event _IVSFlexGridEvents_CompareEventHandler Compare;
        
        public event _IVSFlexGridEvents_BeforeSortEventHandler BeforeSort;
        
        public event _IVSFlexGridEvents_AfterSortEventHandler AfterSort;
        
        public event _IVSFlexGridEvents_BeforeMoveColumnEventHandler BeforeMoveColumn;
        
        public event _IVSFlexGridEvents_AfterMoveColumnEventHandler AfterMoveColumn;
        
        public event _IVSFlexGridEvents_BeforeUserResizeEventHandler BeforeUserResize;
        
        public event _IVSFlexGridEvents_AfterUserResizeEventHandler AfterUserResize;
        
        public event _IVSFlexGridEvents_BeforeCollapseEventHandler BeforeCollapse;
        
        public event _IVSFlexGridEvents_AfterCollapseEventHandler AfterCollapse;
        
        public event _IVSFlexGridEvents_BeforeEditEventHandler BeforeEdit;
        
        public event _IVSFlexGridEvents_StartEditEventHandler StartEdit;
        
        public event _IVSFlexGridEvents_ValidateEditEventHandler ValidateEdit;
        
        public event _IVSFlexGridEvents_AfterEditEventHandler AfterEdit;
        
        public event _IVSFlexGridEvents_KeyPressEditEventHandler KeyPressEdit;
        
        public event _IVSFlexGridEvents_KeyDownEditEventHandler KeyDownEdit;
        
        public event _IVSFlexGridEvents_KeyUpEditEventHandler KeyUpEdit;
        
        public event System.EventHandler ChangeEdit;
        
        public event _IVSFlexGridEvents_BeforePageBreakEventHandler BeforePageBreak;
        
        public event _IVSFlexGridEvents_GetHeaderRowEventHandler GetHeaderRow;
        
        public event _IVSFlexGridEvents_StartPageEventHandler StartPage;
        
        public event _IVSFlexGridEvents_DrawCellEventHandler DrawCell;
        
        public event _IVSFlexGridEvents_ErrorEventHandler Error;
        
        public event _IVSFlexGridEvents_CellButtonClickEventHandler CellButtonClick;
        
        public event _IVSFlexGridEvents_BeforeScrollTipEventHandler BeforeScrollTip;
        
        public event System.EventHandler AfterUserFreeze;
        
        public event _IVSFlexGridEvents_OLEStartDragEventHandler OLEStartDrag;
        
        public event _IVSFlexGridEvents_OLEGiveFeedbackEventHandler OLEGiveFeedback;
        
        public event _IVSFlexGridEvents_OLESetDataEventHandler OLESetData;
        
        public event _IVSFlexGridEvents_OLECompleteDragEventHandler OLECompleteDrag;
        
        public event _IVSFlexGridEvents_OLEDragOverEventHandler OLEDragOver;
        
        public event _IVSFlexGridEvents_OLEDragDropEventHandler OLEDragDrop;
        
        public event _IVSFlexGridEvents_OLESetCustomDataObjectEventHandler OLESetCustomDataObject;
        
        public event _IVSFlexGridEvents_CellChangedEventHandler CellChanged;
        
        public event _IVSFlexGridEvents_BeforeMoveRowEventHandler BeforeMoveRow;
        
        public event _IVSFlexGridEvents_AfterMoveRowEventHandler AfterMoveRow;
        
        public event _IVSFlexGridEvents_SetupEditWindowEventHandler SetupEditWindow;
        
        public event _IVSFlexGridEvents_SetupEditStyleEventHandler SetupEditStyle;
        
        public event _IVSFlexGridEvents_ComboDropDownEventHandler ComboDropDown;
        
        public event _IVSFlexGridEvents_ComboCloseUpEventHandler ComboCloseUp;
        
        public event System.EventHandler StartAutoSearch;
        
        public event System.EventHandler EndAutoSearch;
        
        public event _IVSFlexGridEvents_FilterDataEventHandler FilterData;
        
        public event _IVSFlexGridEvents_BeforeDataRefreshEventHandler BeforeDataRefresh;
        
        public event System.EventHandler AfterDataRefresh;
        
        public virtual int GetNodeRow(int row, VSFlex8U.NodeTypeSettings which) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetNodeRow", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetNodeRow(row, which)));
            return returnValue;
        }
        
        public virtual string BuildComboList(object rs, string fieldList) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BuildComboList", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    rs,
                    fieldList,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(VSFlex8U.IVSFlexGrid);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("BuildComboList");
            string returnValue = ((string)(methodToInvoke.Invoke(this.ocx, paramArray)));
            return returnValue;
        }
        
        public virtual string BuildComboList(object rs, string fieldList, object keyField, object backColor) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BuildComboList", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.BuildComboList(rs, fieldList, keyField, backColor)));
            return returnValue;
        }
        
        public virtual void ShowCell(int row, int col) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowCell", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ShowCell(row, col);
        }
        
        public virtual double get_Aggregate(VSFlex8U.SubtotalSettings aggregate, int row1, int col1, int row2, int col2) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_Aggregate", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.get_Aggregate(aggregate, row1, col1, row2, col2)));
            return returnValue;
        }
        
        public virtual int DragRow(int row) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DragRow", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.DragRow(row)));
            return returnValue;
        }
        
        public virtual VSFlex8U.VSFlexNode GetNode() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetNode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(VSFlex8U.IVSFlexGrid);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("GetNode");
            VSFlex8U.VSFlexNode returnValue = ((VSFlex8U.VSFlexNode)(methodToInvoke.Invoke(this.ocx, paramArray)));
            return returnValue;
        }
        
        public virtual VSFlex8U.VSFlexNode GetNode(object row) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetNode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            VSFlex8U.VSFlexNode returnValue = ((VSFlex8U.VSFlexNode)(this.ocx.GetNode(row)));
            return returnValue;
        }
        
        public virtual object get_Bookmark(int row) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_Bookmark", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.get_Bookmark(row)));
            return returnValue;
        }
        
        public virtual int get_ColIndent(int col) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ColIndent", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_ColIndent(col)));
            return returnValue;
        }
        
        public virtual void set_ColIndent(int col, int pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ColIndent", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ColIndent(col, pVal);
        }
        
        public virtual void LoadGridURL(string uRL, VSFlex8U.SaveLoadSettings loadWhat) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LoadGridURL", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    uRL,
                    loadWhat,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(VSFlex8U.IVSFlexGrid);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("LoadGridURL");
            methodToInvoke.Invoke(this.ocx, paramArray);
        }
        
        public virtual void LoadGridURL(string uRL, VSFlex8U.SaveLoadSettings loadWhat, object options) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LoadGridURL", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.LoadGridURL(uRL, loadWhat, options);
        }
        
        public virtual void FinishEditing(bool cancel) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FinishEditing", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.FinishEditing(cancel);
        }
        
        public virtual int get_FindRowRegex(string pattern, int row, int col) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_FindRowRegex", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_FindRowRegex(pattern, row, col)));
            return returnValue;
        }
        
        public virtual void CellBorderRange(int row1, int col1, int row2, int col2, uint color, short left, short top, short right, short bottom, short vertical, short horizontal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellBorderRange", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.CellBorderRange(row1, col1, row2, col2, color, left, top, right, bottom, vertical, horizontal);
        }
        
        public virtual void Cut() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Cut", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Cut();
        }
        
        public virtual void Copy() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Copy", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Copy();
        }
        
        public virtual void Paste() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Paste", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Paste();
        }
        
        public virtual void Delete() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Delete", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Delete();
        }
        
        public virtual void set_IsSubtotal(int row, bool pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_IsSubtotal", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_IsSubtotal(row, pVal);
        }
        
        public virtual void Subtotal(VSFlex8U.SubtotalSettings function) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Subtotal", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    function,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(VSFlex8U.IVSFlexGrid);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("Subtotal");
            methodToInvoke.Invoke(this.ocx, paramArray);
        }
        
        public virtual void Subtotal(VSFlex8U.SubtotalSettings function, object groupOn, object totalOn, object format, object backColor, object foreColor, object fontBold, object caption, object matchFrom, object totalOnly) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Subtotal", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Subtotal(function, groupOn, totalOn, format, backColor, foreColor, fontBold, caption, matchFrom, totalOnly);
        }
        
        public virtual void Refresh() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Refresh", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Refresh();
        }
        
        public virtual void Outline(short level) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Outline", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Outline(level);
        }
        
        public virtual VSFlex8U.AlignmentSettings get_FixedAlignment(int col) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_FixedAlignment", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            VSFlex8U.AlignmentSettings returnValue = ((VSFlex8U.AlignmentSettings)(this.ocx.get_FixedAlignment(col)));
            return returnValue;
        }
        
        public virtual void set_FixedAlignment(int col, VSFlex8U.AlignmentSettings pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_FixedAlignment", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_FixedAlignment(col, pVal);
        }
        
        public virtual bool get_RowIsVisible(int row) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_RowIsVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_RowIsVisible(row)));
            return returnValue;
        }
        
        public virtual bool get_ColIsVisible(int col) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ColIsVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_ColIsVisible(col)));
            return returnValue;
        }
        
        public virtual int get_RowPos(int row) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_RowPos", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_RowPos(row)));
            return returnValue;
        }
        
        public virtual int get_ColPos(int col) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ColPos", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_ColPos(col)));
            return returnValue;
        }
        
        public virtual bool get_IsSelected(int row) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_IsSelected", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_IsSelected(row)));
            return returnValue;
        }
        
        public virtual void set_IsSelected(int row, bool pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_IsSelected", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_IsSelected(row, pVal);
        }
        
        public virtual string get_TextArray(int index) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_TextArray", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_TextArray(index)));
            return returnValue;
        }
        
        public virtual void set_TextArray(int index, string pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_TextArray", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_TextArray(index, pVal);
        }
        
        public virtual VSFlex8U.CollapsedSettings get_IsCollapsed(int row) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_IsCollapsed", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            VSFlex8U.CollapsedSettings returnValue = ((VSFlex8U.CollapsedSettings)(this.ocx.get_IsCollapsed(row)));
            return returnValue;
        }
        
        public virtual void set_IsCollapsed(int row, VSFlex8U.CollapsedSettings pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_IsCollapsed", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_IsCollapsed(row, pVal);
        }
        
        public virtual void Select(int row, int col) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Select", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    row,
                    col,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(VSFlex8U.IVSFlexGrid);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("Select");
            methodToInvoke.Invoke(this.ocx, paramArray);
        }
        
        public virtual void Select(int row, int col, object rowSel, object colSel) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Select", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Select(row, col, rowSel, colSel);
        }
        
        public virtual void AutoSize(int col1) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoSize", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    col1,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(VSFlex8U.IVSFlexGrid);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("AutoSize");
            methodToInvoke.Invoke(this.ocx, paramArray);
        }
        
        public virtual void AutoSize(int col1, object col2, object equal, object extraSpace) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoSize", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AutoSize(col1, col2, equal, extraSpace);
        }
        
        public virtual void DataRefresh() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DataRefresh", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DataRefresh();
        }
        
        public virtual void CellBorder(uint color, short left, short top, short right, short bottom, short vertical, short horizontal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CellBorder", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.CellBorder(color, left, top, right, bottom, vertical, horizontal);
        }
        
        public virtual void OLEDrag() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDrag", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.OLEDrag();
        }
        
        public virtual void SaveGrid(string fileName, VSFlex8U.SaveLoadSettings saveWhat) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SaveGrid", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    fileName,
                    saveWhat,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(VSFlex8U.IVSFlexGrid);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("SaveGrid");
            methodToInvoke.Invoke(this.ocx, paramArray);
        }
        
        public virtual void SaveGrid(string fileName, VSFlex8U.SaveLoadSettings saveWhat, object options) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SaveGrid", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SaveGrid(fileName, saveWhat, options);
        }
        
        public virtual void LoadGrid(string fileName, VSFlex8U.SaveLoadSettings loadWhat) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LoadGrid", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    fileName,
                    loadWhat,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(VSFlex8U.IVSFlexGrid);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("LoadGrid");
            methodToInvoke.Invoke(this.ocx, paramArray);
        }
        
        public virtual void LoadGrid(string fileName, VSFlex8U.SaveLoadSettings loadWhat, object options) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LoadGrid", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.LoadGrid(fileName, loadWhat, options);
        }
        
        public virtual void Archive(string arcFileName, string fileName, VSFlex8U.ArchiveSettings action) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Archive", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Archive(arcFileName, fileName, action);
        }
        
        public virtual object get_ArchiveInfo(string arcFileName, VSFlex8U.ArchiveInfoSettings infoType) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ArchiveInfo", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    arcFileName,
                    infoType,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(VSFlex8U.IVSFlexGrid);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("get_ArchiveInfo");
            object returnValue = ((object)(methodToInvoke.Invoke(this.ocx, paramArray)));
            return returnValue;
        }
        
        public virtual object get_ArchiveInfo(string arcFileName, VSFlex8U.ArchiveInfoSettings infoType, object index) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ArchiveInfo", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.get_ArchiveInfo(arcFileName, infoType, index)));
            return returnValue;
        }
        
        public virtual VSFlex8U.SortSettings get_ColSort(int col) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ColSort", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            VSFlex8U.SortSettings returnValue = ((VSFlex8U.SortSettings)(this.ocx.get_ColSort(col)));
            return returnValue;
        }
        
        public virtual void set_ColSort(int col, VSFlex8U.SortSettings pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ColSort", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ColSort(col, pVal);
        }
        
        public virtual string get_ColFormat(int col) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ColFormat", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_ColFormat(col)));
            return returnValue;
        }
        
        public virtual void set_ColFormat(int col, string pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ColFormat", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ColFormat(col, pVal);
        }
        
        public virtual VSFlex8U.DataTypeSettings get_ColDataType(int col) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ColDataType", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            VSFlex8U.DataTypeSettings returnValue = ((VSFlex8U.DataTypeSettings)(this.ocx.get_ColDataType(col)));
            return returnValue;
        }
        
        public virtual void set_ColDataType(int col, VSFlex8U.DataTypeSettings pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ColDataType", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ColDataType(col, pVal);
        }
        
        public virtual object get_Cell(VSFlex8U.CellPropertySettings setting) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_Cell", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    setting,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(VSFlex8U.IVSFlexGrid);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("get_Cell");
            object returnValue = ((object)(methodToInvoke.Invoke(this.ocx, paramArray)));
            return returnValue;
        }
        
        public virtual object get_Cell(VSFlex8U.CellPropertySettings setting, object row1, object col1, object row2, object col2) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_Cell", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.get_Cell(setting, row1, col1, row2, col2)));
            return returnValue;
        }
        
        public virtual void let_Cell(VSFlex8U.CellPropertySettings setting, object pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("let_Cell", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    setting,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    pVal};
            System.Type typeVar = typeof(VSFlex8U.IVSFlexGrid);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("let_Cell");
            methodToInvoke.Invoke(this.ocx, paramArray);
        }
        
        public virtual void let_Cell(VSFlex8U.CellPropertySettings setting, object row1, object col1, object row2, object col2, object pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("let_Cell", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.let_Cell(setting, row1, col1, row2, col2, pVal);
        }
        
        public virtual void set_Cell(VSFlex8U.CellPropertySettings setting, object pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_Cell", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    setting,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    pVal};
            System.Type typeVar = typeof(VSFlex8U.IVSFlexGrid);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("set_Cell");
            methodToInvoke.Invoke(this.ocx, paramArray);
        }
        
        public virtual void set_Cell(VSFlex8U.CellPropertySettings setting, object row1, object col1, object row2, object col2, object pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_Cell", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_Cell(setting, row1, col1, row2, col2, pVal);
        }
        
        public virtual VSFlex8U.RowStatusSettings get_RowStatus(int row) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_RowStatus", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            VSFlex8U.RowStatusSettings returnValue = ((VSFlex8U.RowStatusSettings)(this.ocx.get_RowStatus(row)));
            return returnValue;
        }
        
        public virtual void set_RowStatus(int row, VSFlex8U.RowStatusSettings pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_RowStatus", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_RowStatus(row, pVal);
        }
        
        public virtual int get_FindRow(object item) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_FindRow", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    item,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(VSFlex8U.IVSFlexGrid);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("get_FindRow");
            int returnValue = ((int)(methodToInvoke.Invoke(this.ocx, paramArray)));
            return returnValue;
        }
        
        public virtual int get_FindRow(object item, object row, object col, object caseSensitive, object fullMatch) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_FindRow", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_FindRow(item, row, col, caseSensitive, fullMatch)));
            return returnValue;
        }
        
        public virtual string get_ComboItem() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ComboItem", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(VSFlex8U.IVSFlexGrid);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("get_ComboItem");
            string returnValue = ((string)(methodToInvoke.Invoke(this.ocx, paramArray)));
            return returnValue;
        }
        
        public virtual string get_ComboItem(object index) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ComboItem", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_ComboItem(index)));
            return returnValue;
        }
        
        public virtual string get_ComboData() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ComboData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(VSFlex8U.IVSFlexGrid);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("get_ComboData");
            string returnValue = ((string)(methodToInvoke.Invoke(this.ocx, paramArray)));
            return returnValue;
        }
        
        public virtual string get_ComboData(object index) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ComboData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_ComboData(index)));
            return returnValue;
        }
        
        public virtual void BindToArray() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BindToArray", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(VSFlex8U.IVSFlexGrid);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("BindToArray");
            methodToInvoke.Invoke(this.ocx, paramArray);
        }
        
        public virtual void BindToArray(object variantArray, object rowDim, object colDim, object pageDim, object currentPage) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BindToArray", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.BindToArray(variantArray, rowDim, colDim, pageDim, currentPage);
        }
        
        public virtual string get_ColEditMask(int col) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ColEditMask", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_ColEditMask(col)));
            return returnValue;
        }
        
        public virtual void set_ColEditMask(int col, string pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ColEditMask", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ColEditMask(col, pVal);
        }
        
        public virtual string get_ColComboList(int col) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ColComboList", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_ColComboList(col)));
            return returnValue;
        }
        
        public virtual void set_ColComboList(int col, string pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ColComboList", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ColComboList(col, pVal);
        }
        
        public virtual short get_RowOutlineLevel(int row) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_RowOutlineLevel", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.get_RowOutlineLevel(row)));
            return returnValue;
        }
        
        public virtual void set_RowOutlineLevel(int row, short pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_RowOutlineLevel", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_RowOutlineLevel(row, pVal);
        }
        
        public virtual int get_SelectedRow(int index) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_SelectedRow", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_SelectedRow(index)));
            return returnValue;
        }
        
        public virtual bool get_RowHidden(int row) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_RowHidden", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_RowHidden(row)));
            return returnValue;
        }
        
        public virtual void set_RowHidden(int row, bool pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_RowHidden", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_RowHidden(row, pVal);
        }
        
        public virtual bool get_ColHidden(int col) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ColHidden", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_ColHidden(col)));
            return returnValue;
        }
        
        public virtual void set_ColHidden(int col, bool pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ColHidden", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ColHidden(col, pVal);
        }
        
        public virtual void GetMergedRange(int row, int col, ref int r1, ref int c1, ref int r2, ref int c2) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetMergedRange", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.GetMergedRange(row, col, ref r1, ref c1, ref r2, ref c2);
        }
        
        public virtual void LoadArray() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LoadArray", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(VSFlex8U.IVSFlexGrid);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("LoadArray");
            methodToInvoke.Invoke(this.ocx, paramArray);
        }
        
        public virtual void LoadArray(object variantArray, object rowDim, object colDim, object pageDim, object currentPage) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LoadArray", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.LoadArray(variantArray, rowDim, colDim, pageDim, currentPage);
        }
        
        public virtual void GetSelection(ref int row1, ref int col1, ref int row2, ref int col2) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetSelection", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.GetSelection(ref row1, ref col1, ref row2, ref col2);
        }
        
        public virtual void PrintGrid() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PrintGrid", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(VSFlex8U.IVSFlexGrid);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("PrintGrid");
            methodToInvoke.Invoke(this.ocx, paramArray);
        }
        
        public virtual void PrintGrid(object docName, object showDialog, object orientation, object marginLR, object marginTB) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PrintGrid", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.PrintGrid(docName, showDialog, orientation, marginLR, marginTB);
        }
        
        public virtual int get_ColImageList(int col) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ColImageList", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_ColImageList(col)));
            return returnValue;
        }
        
        public virtual void set_ColImageList(int col, int pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ColImageList", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ColImageList(col, pVal);
        }
        
        public virtual string get_ColKey(int col) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ColKey", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_ColKey(col)));
            return returnValue;
        }
        
        public virtual void set_ColKey(int col, string pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ColKey", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ColKey(col, pVal);
        }
        
        public virtual int get_ColIndex(string key) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ColIndex", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_ColIndex(key)));
            return returnValue;
        }
        
        public virtual VSFlex8U.AlignmentSettings get_ColAlignment(int col) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ColAlignment", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            VSFlex8U.AlignmentSettings returnValue = ((VSFlex8U.AlignmentSettings)(this.ocx.get_ColAlignment(col)));
            return returnValue;
        }
        
        public virtual void set_ColAlignment(int col, VSFlex8U.AlignmentSettings pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ColAlignment", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ColAlignment(col, pVal);
        }
        
        public virtual int get_ColWidth(int col) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ColWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_ColWidth(col)));
            return returnValue;
        }
        
        public virtual void set_ColWidth(int col, int pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ColWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ColWidth(col, pVal);
        }
        
        public virtual int get_RowHeight(int row) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_RowHeight", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_RowHeight(row)));
            return returnValue;
        }
        
        public virtual void set_RowHeight(int row, int pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_RowHeight", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_RowHeight(row, pVal);
        }
        
        public virtual bool get_MergeRow(int row) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_MergeRow", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_MergeRow(row)));
            return returnValue;
        }
        
        public virtual void set_MergeRow(int row, bool pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_MergeRow", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_MergeRow(row, pVal);
        }
        
        public virtual bool get_MergeCol(int col) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_MergeCol", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_MergeCol(col)));
            return returnValue;
        }
        
        public virtual void set_MergeCol(int col, bool pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_MergeCol", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_MergeCol(col, pVal);
        }
        
        public virtual void set_RowPosition(int row, int param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_RowPosition", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_RowPosition(row, param0);
        }
        
        public virtual void set_ColPosition(int col, int param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ColPosition", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ColPosition(col, param0);
        }
        
        public virtual object get_RowData(int row) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_RowData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.get_RowData(row)));
            return returnValue;
        }
        
        public virtual void set_RowData(int row, object pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_RowData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_RowData(row, pVal);
        }
        
        public virtual object get_ColData(int col) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ColData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.get_ColData(col)));
            return returnValue;
        }
        
        public virtual void set_ColData(int col, object pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ColData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ColData(col, pVal);
        }
        
        public virtual void AddItem(string item) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddItem", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    item,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(VSFlex8U.IVSFlexGrid);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("AddItem");
            methodToInvoke.Invoke(this.ocx, paramArray);
        }
        
        public virtual void AddItem(string item, object row) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddItem", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AddItem(item, row);
        }
        
        public virtual void RemoveItem() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RemoveItem", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(VSFlex8U.IVSFlexGrid);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("RemoveItem");
            methodToInvoke.Invoke(this.ocx, paramArray);
        }
        
        public virtual void RemoveItem(object row) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RemoveItem", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.RemoveItem(row);
        }
        
        public virtual string get_TextMatrix(int row, int col) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_TextMatrix", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_TextMatrix(row, col)));
            return returnValue;
        }
        
        public virtual void set_TextMatrix(int row, int col, string pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_TextMatrix", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_TextMatrix(row, col, pVal);
        }
        
        public virtual void Clear() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Clear", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    System.Reflection.Missing.Value,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(VSFlex8U.IVSFlexGrid);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("Clear");
            methodToInvoke.Invoke(this.ocx, paramArray);
        }
        
        public virtual void Clear(object where, object what) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Clear", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Clear(where, what);
        }
        
        public virtual void EditCell() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EditCell", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.EditCell();
        }
        
        public virtual double get_ValueMatrix(int row, int col) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ValueMatrix", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.get_ValueMatrix(row, col)));
            return returnValue;
        }
        
        public virtual bool get_IsSubtotal(int row) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_IsSubtotal", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_IsSubtotal(row)));
            return returnValue;
        }
        
        public virtual void About() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("About", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.About();
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxVSFlexGridEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(VSFlex8U._IVSFlexGridEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((VSFlex8U.IVSFlexGrid)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnClickEvent(object sender, System.EventArgs e) {
            if ((this.ClickEvent != null)) {
                this.ClickEvent(sender, e);
            }
        }
        
        internal void RaiseOnDblClick(object sender, System.EventArgs e) {
            if ((this.DblClick != null)) {
                this.DblClick(sender, e);
            }
        }
        
        internal void RaiseOnKeyDownEvent(object sender, _IVSFlexGridEvents_KeyDownEvent e) {
            if ((this.KeyDownEvent != null)) {
                this.KeyDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyPressEvent(object sender, _IVSFlexGridEvents_KeyPressEvent e) {
            if ((this.KeyPressEvent != null)) {
                this.KeyPressEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyUpEvent(object sender, _IVSFlexGridEvents_KeyUpEvent e) {
            if ((this.KeyUpEvent != null)) {
                this.KeyUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseDownEvent(object sender, _IVSFlexGridEvents_MouseDownEvent e) {
            if ((this.MouseDownEvent != null)) {
                this.MouseDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseMoveEvent(object sender, _IVSFlexGridEvents_MouseMoveEvent e) {
            if ((this.MouseMoveEvent != null)) {
                this.MouseMoveEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseUpEvent(object sender, _IVSFlexGridEvents_MouseUpEvent e) {
            if ((this.MouseUpEvent != null)) {
                this.MouseUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnSelChange(object sender, System.EventArgs e) {
            if ((this.SelChange != null)) {
                this.SelChange(sender, e);
            }
        }
        
        internal void RaiseOnRowColChange(object sender, System.EventArgs e) {
            if ((this.RowColChange != null)) {
                this.RowColChange(sender, e);
            }
        }
        
        internal void RaiseOnEnterCell(object sender, System.EventArgs e) {
            if ((this.EnterCell != null)) {
                this.EnterCell(sender, e);
            }
        }
        
        internal void RaiseOnLeaveCell(object sender, System.EventArgs e) {
            if ((this.LeaveCell != null)) {
                this.LeaveCell(sender, e);
            }
        }
        
        internal void RaiseOnBeforeMouseDown(object sender, _IVSFlexGridEvents_BeforeMouseDownEvent e) {
            if ((this.BeforeMouseDown != null)) {
                this.BeforeMouseDown(sender, e);
            }
        }
        
        internal void RaiseOnBeforeRowColChange(object sender, _IVSFlexGridEvents_BeforeRowColChangeEvent e) {
            if ((this.BeforeRowColChange != null)) {
                this.BeforeRowColChange(sender, e);
            }
        }
        
        internal void RaiseOnAfterRowColChange(object sender, _IVSFlexGridEvents_AfterRowColChangeEvent e) {
            if ((this.AfterRowColChange != null)) {
                this.AfterRowColChange(sender, e);
            }
        }
        
        internal void RaiseOnBeforeSelChange(object sender, _IVSFlexGridEvents_BeforeSelChangeEvent e) {
            if ((this.BeforeSelChange != null)) {
                this.BeforeSelChange(sender, e);
            }
        }
        
        internal void RaiseOnAfterSelChange(object sender, _IVSFlexGridEvents_AfterSelChangeEvent e) {
            if ((this.AfterSelChange != null)) {
                this.AfterSelChange(sender, e);
            }
        }
        
        internal void RaiseOnBeforeScroll(object sender, _IVSFlexGridEvents_BeforeScrollEvent e) {
            if ((this.BeforeScroll != null)) {
                this.BeforeScroll(sender, e);
            }
        }
        
        internal void RaiseOnAfterScroll(object sender, _IVSFlexGridEvents_AfterScrollEvent e) {
            if ((this.AfterScroll != null)) {
                this.AfterScroll(sender, e);
            }
        }
        
        internal void RaiseOnCompare(object sender, _IVSFlexGridEvents_CompareEvent e) {
            if ((this.Compare != null)) {
                this.Compare(sender, e);
            }
        }
        
        internal void RaiseOnBeforeSort(object sender, _IVSFlexGridEvents_BeforeSortEvent e) {
            if ((this.BeforeSort != null)) {
                this.BeforeSort(sender, e);
            }
        }
        
        internal void RaiseOnAfterSort(object sender, _IVSFlexGridEvents_AfterSortEvent e) {
            if ((this.AfterSort != null)) {
                this.AfterSort(sender, e);
            }
        }
        
        internal void RaiseOnBeforeMoveColumn(object sender, _IVSFlexGridEvents_BeforeMoveColumnEvent e) {
            if ((this.BeforeMoveColumn != null)) {
                this.BeforeMoveColumn(sender, e);
            }
        }
        
        internal void RaiseOnAfterMoveColumn(object sender, _IVSFlexGridEvents_AfterMoveColumnEvent e) {
            if ((this.AfterMoveColumn != null)) {
                this.AfterMoveColumn(sender, e);
            }
        }
        
        internal void RaiseOnBeforeUserResize(object sender, _IVSFlexGridEvents_BeforeUserResizeEvent e) {
            if ((this.BeforeUserResize != null)) {
                this.BeforeUserResize(sender, e);
            }
        }
        
        internal void RaiseOnAfterUserResize(object sender, _IVSFlexGridEvents_AfterUserResizeEvent e) {
            if ((this.AfterUserResize != null)) {
                this.AfterUserResize(sender, e);
            }
        }
        
        internal void RaiseOnBeforeCollapse(object sender, _IVSFlexGridEvents_BeforeCollapseEvent e) {
            if ((this.BeforeCollapse != null)) {
                this.BeforeCollapse(sender, e);
            }
        }
        
        internal void RaiseOnAfterCollapse(object sender, _IVSFlexGridEvents_AfterCollapseEvent e) {
            if ((this.AfterCollapse != null)) {
                this.AfterCollapse(sender, e);
            }
        }
        
        internal void RaiseOnBeforeEdit(object sender, _IVSFlexGridEvents_BeforeEditEvent e) {
            if ((this.BeforeEdit != null)) {
                this.BeforeEdit(sender, e);
            }
        }
        
        internal void RaiseOnStartEdit(object sender, _IVSFlexGridEvents_StartEditEvent e) {
            if ((this.StartEdit != null)) {
                this.StartEdit(sender, e);
            }
        }
        
        internal void RaiseOnValidateEdit(object sender, _IVSFlexGridEvents_ValidateEditEvent e) {
            if ((this.ValidateEdit != null)) {
                this.ValidateEdit(sender, e);
            }
        }
        
        internal void RaiseOnAfterEdit(object sender, _IVSFlexGridEvents_AfterEditEvent e) {
            if ((this.AfterEdit != null)) {
                this.AfterEdit(sender, e);
            }
        }
        
        internal void RaiseOnKeyPressEdit(object sender, _IVSFlexGridEvents_KeyPressEditEvent e) {
            if ((this.KeyPressEdit != null)) {
                this.KeyPressEdit(sender, e);
            }
        }
        
        internal void RaiseOnKeyDownEdit(object sender, _IVSFlexGridEvents_KeyDownEditEvent e) {
            if ((this.KeyDownEdit != null)) {
                this.KeyDownEdit(sender, e);
            }
        }
        
        internal void RaiseOnKeyUpEdit(object sender, _IVSFlexGridEvents_KeyUpEditEvent e) {
            if ((this.KeyUpEdit != null)) {
                this.KeyUpEdit(sender, e);
            }
        }
        
        internal void RaiseOnChangeEdit(object sender, System.EventArgs e) {
            if ((this.ChangeEdit != null)) {
                this.ChangeEdit(sender, e);
            }
        }
        
        internal void RaiseOnBeforePageBreak(object sender, _IVSFlexGridEvents_BeforePageBreakEvent e) {
            if ((this.BeforePageBreak != null)) {
                this.BeforePageBreak(sender, e);
            }
        }
        
        internal void RaiseOnGetHeaderRow(object sender, _IVSFlexGridEvents_GetHeaderRowEvent e) {
            if ((this.GetHeaderRow != null)) {
                this.GetHeaderRow(sender, e);
            }
        }
        
        internal void RaiseOnStartPage(object sender, _IVSFlexGridEvents_StartPageEvent e) {
            if ((this.StartPage != null)) {
                this.StartPage(sender, e);
            }
        }
        
        internal void RaiseOnDrawCell(object sender, _IVSFlexGridEvents_DrawCellEvent e) {
            if ((this.DrawCell != null)) {
                this.DrawCell(sender, e);
            }
        }
        
        internal void RaiseOnError(object sender, _IVSFlexGridEvents_ErrorEvent e) {
            if ((this.Error != null)) {
                this.Error(sender, e);
            }
        }
        
        internal void RaiseOnCellButtonClick(object sender, _IVSFlexGridEvents_CellButtonClickEvent e) {
            if ((this.CellButtonClick != null)) {
                this.CellButtonClick(sender, e);
            }
        }
        
        internal void RaiseOnBeforeScrollTip(object sender, _IVSFlexGridEvents_BeforeScrollTipEvent e) {
            if ((this.BeforeScrollTip != null)) {
                this.BeforeScrollTip(sender, e);
            }
        }
        
        internal void RaiseOnAfterUserFreeze(object sender, System.EventArgs e) {
            if ((this.AfterUserFreeze != null)) {
                this.AfterUserFreeze(sender, e);
            }
        }
        
        internal void RaiseOnOLEStartDrag(object sender, _IVSFlexGridEvents_OLEStartDragEvent e) {
            if ((this.OLEStartDrag != null)) {
                this.OLEStartDrag(sender, e);
            }
        }
        
        internal void RaiseOnOLEGiveFeedback(object sender, _IVSFlexGridEvents_OLEGiveFeedbackEvent e) {
            if ((this.OLEGiveFeedback != null)) {
                this.OLEGiveFeedback(sender, e);
            }
        }
        
        internal void RaiseOnOLESetData(object sender, _IVSFlexGridEvents_OLESetDataEvent e) {
            if ((this.OLESetData != null)) {
                this.OLESetData(sender, e);
            }
        }
        
        internal void RaiseOnOLECompleteDrag(object sender, _IVSFlexGridEvents_OLECompleteDragEvent e) {
            if ((this.OLECompleteDrag != null)) {
                this.OLECompleteDrag(sender, e);
            }
        }
        
        internal void RaiseOnOLEDragOver(object sender, _IVSFlexGridEvents_OLEDragOverEvent e) {
            if ((this.OLEDragOver != null)) {
                this.OLEDragOver(sender, e);
            }
        }
        
        internal void RaiseOnOLEDragDrop(object sender, _IVSFlexGridEvents_OLEDragDropEvent e) {
            if ((this.OLEDragDrop != null)) {
                this.OLEDragDrop(sender, e);
            }
        }
        
        internal void RaiseOnOLESetCustomDataObject(object sender, _IVSFlexGridEvents_OLESetCustomDataObjectEvent e) {
            if ((this.OLESetCustomDataObject != null)) {
                this.OLESetCustomDataObject(sender, e);
            }
        }
        
        internal void RaiseOnCellChanged(object sender, _IVSFlexGridEvents_CellChangedEvent e) {
            if ((this.CellChanged != null)) {
                this.CellChanged(sender, e);
            }
        }
        
        internal void RaiseOnBeforeMoveRow(object sender, _IVSFlexGridEvents_BeforeMoveRowEvent e) {
            if ((this.BeforeMoveRow != null)) {
                this.BeforeMoveRow(sender, e);
            }
        }
        
        internal void RaiseOnAfterMoveRow(object sender, _IVSFlexGridEvents_AfterMoveRowEvent e) {
            if ((this.AfterMoveRow != null)) {
                this.AfterMoveRow(sender, e);
            }
        }
        
        internal void RaiseOnSetupEditWindow(object sender, _IVSFlexGridEvents_SetupEditWindowEvent e) {
            if ((this.SetupEditWindow != null)) {
                this.SetupEditWindow(sender, e);
            }
        }
        
        internal void RaiseOnSetupEditStyle(object sender, _IVSFlexGridEvents_SetupEditStyleEvent e) {
            if ((this.SetupEditStyle != null)) {
                this.SetupEditStyle(sender, e);
            }
        }
        
        internal void RaiseOnComboDropDown(object sender, _IVSFlexGridEvents_ComboDropDownEvent e) {
            if ((this.ComboDropDown != null)) {
                this.ComboDropDown(sender, e);
            }
        }
        
        internal void RaiseOnComboCloseUp(object sender, _IVSFlexGridEvents_ComboCloseUpEvent e) {
            if ((this.ComboCloseUp != null)) {
                this.ComboCloseUp(sender, e);
            }
        }
        
        internal void RaiseOnStartAutoSearch(object sender, System.EventArgs e) {
            if ((this.StartAutoSearch != null)) {
                this.StartAutoSearch(sender, e);
            }
        }
        
        internal void RaiseOnEndAutoSearch(object sender, System.EventArgs e) {
            if ((this.EndAutoSearch != null)) {
                this.EndAutoSearch(sender, e);
            }
        }
        
        internal void RaiseOnFilterData(object sender, _IVSFlexGridEvents_FilterDataEvent e) {
            if ((this.FilterData != null)) {
                this.FilterData(sender, e);
            }
        }
        
        internal void RaiseOnBeforeDataRefresh(object sender, _IVSFlexGridEvents_BeforeDataRefreshEvent e) {
            if ((this.BeforeDataRefresh != null)) {
                this.BeforeDataRefresh(sender, e);
            }
        }
        
        internal void RaiseOnAfterDataRefresh(object sender, System.EventArgs e) {
            if ((this.AfterDataRefresh != null)) {
                this.AfterDataRefresh(sender, e);
            }
        }
        
        protected override void OnInPlaceActive() {
            base.OnInPlaceActive();
            if ((this.axDataSource != null)) {
                this.ocx.DataSource = this.axDataSource;
            }
        }
    }
    
    public delegate void _IVSFlexGridEvents_KeyDownEventHandler(object sender, _IVSFlexGridEvents_KeyDownEvent e);
    
    public class _IVSFlexGridEvents_KeyDownEvent {
        
        public short keyCode;
        
        public short shift;
        
        public _IVSFlexGridEvents_KeyDownEvent(short keyCode, short shift) {
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void _IVSFlexGridEvents_KeyPressEventHandler(object sender, _IVSFlexGridEvents_KeyPressEvent e);
    
    public class _IVSFlexGridEvents_KeyPressEvent {
        
        public short keyAscii;
        
        public _IVSFlexGridEvents_KeyPressEvent(short keyAscii) {
            this.keyAscii = keyAscii;
        }
    }
    
    public delegate void _IVSFlexGridEvents_KeyUpEventHandler(object sender, _IVSFlexGridEvents_KeyUpEvent e);
    
    public class _IVSFlexGridEvents_KeyUpEvent {
        
        public short keyCode;
        
        public short shift;
        
        public _IVSFlexGridEvents_KeyUpEvent(short keyCode, short shift) {
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void _IVSFlexGridEvents_MouseDownEventHandler(object sender, _IVSFlexGridEvents_MouseDownEvent e);
    
    public class _IVSFlexGridEvents_MouseDownEvent {
        
        public short button;
        
        public short shift;
        
        public float x;
        
        public float y;
        
        public _IVSFlexGridEvents_MouseDownEvent(short button, short shift, float x, float y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _IVSFlexGridEvents_MouseMoveEventHandler(object sender, _IVSFlexGridEvents_MouseMoveEvent e);
    
    public class _IVSFlexGridEvents_MouseMoveEvent {
        
        public short button;
        
        public short shift;
        
        public float x;
        
        public float y;
        
        public _IVSFlexGridEvents_MouseMoveEvent(short button, short shift, float x, float y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _IVSFlexGridEvents_MouseUpEventHandler(object sender, _IVSFlexGridEvents_MouseUpEvent e);
    
    public class _IVSFlexGridEvents_MouseUpEvent {
        
        public short button;
        
        public short shift;
        
        public float x;
        
        public float y;
        
        public _IVSFlexGridEvents_MouseUpEvent(short button, short shift, float x, float y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _IVSFlexGridEvents_BeforeMouseDownEventHandler(object sender, _IVSFlexGridEvents_BeforeMouseDownEvent e);
    
    public class _IVSFlexGridEvents_BeforeMouseDownEvent {
        
        public short button;
        
        public short shift;
        
        public float x;
        
        public float y;
        
        public bool cancel;
        
        public _IVSFlexGridEvents_BeforeMouseDownEvent(short button, short shift, float x, float y, bool cancel) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
            this.cancel = cancel;
        }
    }
    
    public delegate void _IVSFlexGridEvents_BeforeRowColChangeEventHandler(object sender, _IVSFlexGridEvents_BeforeRowColChangeEvent e);
    
    public class _IVSFlexGridEvents_BeforeRowColChangeEvent {
        
        public int oldRow;
        
        public int oldCol;
        
        public int newRow;
        
        public int newCol;
        
        public bool cancel;
        
        public _IVSFlexGridEvents_BeforeRowColChangeEvent(int oldRow, int oldCol, int newRow, int newCol, bool cancel) {
            this.oldRow = oldRow;
            this.oldCol = oldCol;
            this.newRow = newRow;
            this.newCol = newCol;
            this.cancel = cancel;
        }
    }
    
    public delegate void _IVSFlexGridEvents_AfterRowColChangeEventHandler(object sender, _IVSFlexGridEvents_AfterRowColChangeEvent e);
    
    public class _IVSFlexGridEvents_AfterRowColChangeEvent {
        
        public int oldRow;
        
        public int oldCol;
        
        public int newRow;
        
        public int newCol;
        
        public _IVSFlexGridEvents_AfterRowColChangeEvent(int oldRow, int oldCol, int newRow, int newCol) {
            this.oldRow = oldRow;
            this.oldCol = oldCol;
            this.newRow = newRow;
            this.newCol = newCol;
        }
    }
    
    public delegate void _IVSFlexGridEvents_BeforeSelChangeEventHandler(object sender, _IVSFlexGridEvents_BeforeSelChangeEvent e);
    
    public class _IVSFlexGridEvents_BeforeSelChangeEvent {
        
        public int oldRowSel;
        
        public int oldColSel;
        
        public int newRowSel;
        
        public int newColSel;
        
        public bool cancel;
        
        public _IVSFlexGridEvents_BeforeSelChangeEvent(int oldRowSel, int oldColSel, int newRowSel, int newColSel, bool cancel) {
            this.oldRowSel = oldRowSel;
            this.oldColSel = oldColSel;
            this.newRowSel = newRowSel;
            this.newColSel = newColSel;
            this.cancel = cancel;
        }
    }
    
    public delegate void _IVSFlexGridEvents_AfterSelChangeEventHandler(object sender, _IVSFlexGridEvents_AfterSelChangeEvent e);
    
    public class _IVSFlexGridEvents_AfterSelChangeEvent {
        
        public int oldRowSel;
        
        public int oldColSel;
        
        public int newRowSel;
        
        public int newColSel;
        
        public _IVSFlexGridEvents_AfterSelChangeEvent(int oldRowSel, int oldColSel, int newRowSel, int newColSel) {
            this.oldRowSel = oldRowSel;
            this.oldColSel = oldColSel;
            this.newRowSel = newRowSel;
            this.newColSel = newColSel;
        }
    }
    
    public delegate void _IVSFlexGridEvents_BeforeScrollEventHandler(object sender, _IVSFlexGridEvents_BeforeScrollEvent e);
    
    public class _IVSFlexGridEvents_BeforeScrollEvent {
        
        public int oldTopRow;
        
        public int oldLeftCol;
        
        public int newTopRow;
        
        public int newLeftCol;
        
        public bool cancel;
        
        public _IVSFlexGridEvents_BeforeScrollEvent(int oldTopRow, int oldLeftCol, int newTopRow, int newLeftCol, bool cancel) {
            this.oldTopRow = oldTopRow;
            this.oldLeftCol = oldLeftCol;
            this.newTopRow = newTopRow;
            this.newLeftCol = newLeftCol;
            this.cancel = cancel;
        }
    }
    
    public delegate void _IVSFlexGridEvents_AfterScrollEventHandler(object sender, _IVSFlexGridEvents_AfterScrollEvent e);
    
    public class _IVSFlexGridEvents_AfterScrollEvent {
        
        public int oldTopRow;
        
        public int oldLeftCol;
        
        public int newTopRow;
        
        public int newLeftCol;
        
        public _IVSFlexGridEvents_AfterScrollEvent(int oldTopRow, int oldLeftCol, int newTopRow, int newLeftCol) {
            this.oldTopRow = oldTopRow;
            this.oldLeftCol = oldLeftCol;
            this.newTopRow = newTopRow;
            this.newLeftCol = newLeftCol;
        }
    }
    
    public delegate void _IVSFlexGridEvents_CompareEventHandler(object sender, _IVSFlexGridEvents_CompareEvent e);
    
    public class _IVSFlexGridEvents_CompareEvent {
        
        public int row1;
        
        public int row2;
        
        public short cmp;
        
        public _IVSFlexGridEvents_CompareEvent(int row1, int row2, short cmp) {
            this.row1 = row1;
            this.row2 = row2;
            this.cmp = cmp;
        }
    }
    
    public delegate void _IVSFlexGridEvents_BeforeSortEventHandler(object sender, _IVSFlexGridEvents_BeforeSortEvent e);
    
    public class _IVSFlexGridEvents_BeforeSortEvent {
        
        public int col;
        
        public short order;
        
        public _IVSFlexGridEvents_BeforeSortEvent(int col, short order) {
            this.col = col;
            this.order = order;
        }
    }
    
    public delegate void _IVSFlexGridEvents_AfterSortEventHandler(object sender, _IVSFlexGridEvents_AfterSortEvent e);
    
    public class _IVSFlexGridEvents_AfterSortEvent {
        
        public int col;
        
        public short order;
        
        public _IVSFlexGridEvents_AfterSortEvent(int col, short order) {
            this.col = col;
            this.order = order;
        }
    }
    
    public delegate void _IVSFlexGridEvents_BeforeMoveColumnEventHandler(object sender, _IVSFlexGridEvents_BeforeMoveColumnEvent e);
    
    public class _IVSFlexGridEvents_BeforeMoveColumnEvent {
        
        public int col;
        
        public int position;
        
        public _IVSFlexGridEvents_BeforeMoveColumnEvent(int col, int position) {
            this.col = col;
            this.position = position;
        }
    }
    
    public delegate void _IVSFlexGridEvents_AfterMoveColumnEventHandler(object sender, _IVSFlexGridEvents_AfterMoveColumnEvent e);
    
    public class _IVSFlexGridEvents_AfterMoveColumnEvent {
        
        public int col;
        
        public int position;
        
        public _IVSFlexGridEvents_AfterMoveColumnEvent(int col, int position) {
            this.col = col;
            this.position = position;
        }
    }
    
    public delegate void _IVSFlexGridEvents_BeforeUserResizeEventHandler(object sender, _IVSFlexGridEvents_BeforeUserResizeEvent e);
    
    public class _IVSFlexGridEvents_BeforeUserResizeEvent {
        
        public int row;
        
        public int col;
        
        public bool cancel;
        
        public _IVSFlexGridEvents_BeforeUserResizeEvent(int row, int col, bool cancel) {
            this.row = row;
            this.col = col;
            this.cancel = cancel;
        }
    }
    
    public delegate void _IVSFlexGridEvents_AfterUserResizeEventHandler(object sender, _IVSFlexGridEvents_AfterUserResizeEvent e);
    
    public class _IVSFlexGridEvents_AfterUserResizeEvent {
        
        public int row;
        
        public int col;
        
        public _IVSFlexGridEvents_AfterUserResizeEvent(int row, int col) {
            this.row = row;
            this.col = col;
        }
    }
    
    public delegate void _IVSFlexGridEvents_BeforeCollapseEventHandler(object sender, _IVSFlexGridEvents_BeforeCollapseEvent e);
    
    public class _IVSFlexGridEvents_BeforeCollapseEvent {
        
        public int row;
        
        public short state;
        
        public bool cancel;
        
        public _IVSFlexGridEvents_BeforeCollapseEvent(int row, short state, bool cancel) {
            this.row = row;
            this.state = state;
            this.cancel = cancel;
        }
    }
    
    public delegate void _IVSFlexGridEvents_AfterCollapseEventHandler(object sender, _IVSFlexGridEvents_AfterCollapseEvent e);
    
    public class _IVSFlexGridEvents_AfterCollapseEvent {
        
        public int row;
        
        public short state;
        
        public _IVSFlexGridEvents_AfterCollapseEvent(int row, short state) {
            this.row = row;
            this.state = state;
        }
    }
    
    public delegate void _IVSFlexGridEvents_BeforeEditEventHandler(object sender, _IVSFlexGridEvents_BeforeEditEvent e);
    
    public class _IVSFlexGridEvents_BeforeEditEvent {
        
        public int row;
        
        public int col;
        
        public bool cancel;
        
        public _IVSFlexGridEvents_BeforeEditEvent(int row, int col, bool cancel) {
            this.row = row;
            this.col = col;
            this.cancel = cancel;
        }
    }
    
    public delegate void _IVSFlexGridEvents_StartEditEventHandler(object sender, _IVSFlexGridEvents_StartEditEvent e);
    
    public class _IVSFlexGridEvents_StartEditEvent {
        
        public int row;
        
        public int col;
        
        public bool cancel;
        
        public _IVSFlexGridEvents_StartEditEvent(int row, int col, bool cancel) {
            this.row = row;
            this.col = col;
            this.cancel = cancel;
        }
    }
    
    public delegate void _IVSFlexGridEvents_ValidateEditEventHandler(object sender, _IVSFlexGridEvents_ValidateEditEvent e);
    
    public class _IVSFlexGridEvents_ValidateEditEvent {
        
        public int row;
        
        public int col;
        
        public bool cancel;
        
        public _IVSFlexGridEvents_ValidateEditEvent(int row, int col, bool cancel) {
            this.row = row;
            this.col = col;
            this.cancel = cancel;
        }
    }
    
    public delegate void _IVSFlexGridEvents_AfterEditEventHandler(object sender, _IVSFlexGridEvents_AfterEditEvent e);
    
    public class _IVSFlexGridEvents_AfterEditEvent {
        
        public int row;
        
        public int col;
        
        public _IVSFlexGridEvents_AfterEditEvent(int row, int col) {
            this.row = row;
            this.col = col;
        }
    }
    
    public delegate void _IVSFlexGridEvents_KeyPressEditEventHandler(object sender, _IVSFlexGridEvents_KeyPressEditEvent e);
    
    public class _IVSFlexGridEvents_KeyPressEditEvent {
        
        public int row;
        
        public int col;
        
        public short keyAscii;
        
        public _IVSFlexGridEvents_KeyPressEditEvent(int row, int col, short keyAscii) {
            this.row = row;
            this.col = col;
            this.keyAscii = keyAscii;
        }
    }
    
    public delegate void _IVSFlexGridEvents_KeyDownEditEventHandler(object sender, _IVSFlexGridEvents_KeyDownEditEvent e);
    
    public class _IVSFlexGridEvents_KeyDownEditEvent {
        
        public int row;
        
        public int col;
        
        public short keyCode;
        
        public short shift;
        
        public _IVSFlexGridEvents_KeyDownEditEvent(int row, int col, short keyCode, short shift) {
            this.row = row;
            this.col = col;
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void _IVSFlexGridEvents_KeyUpEditEventHandler(object sender, _IVSFlexGridEvents_KeyUpEditEvent e);
    
    public class _IVSFlexGridEvents_KeyUpEditEvent {
        
        public int row;
        
        public int col;
        
        public short keyCode;
        
        public short shift;
        
        public _IVSFlexGridEvents_KeyUpEditEvent(int row, int col, short keyCode, short shift) {
            this.row = row;
            this.col = col;
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void _IVSFlexGridEvents_BeforePageBreakEventHandler(object sender, _IVSFlexGridEvents_BeforePageBreakEvent e);
    
    public class _IVSFlexGridEvents_BeforePageBreakEvent {
        
        public int row;
        
        public bool breakOK;
        
        public _IVSFlexGridEvents_BeforePageBreakEvent(int row, bool breakOK) {
            this.row = row;
            this.breakOK = breakOK;
        }
    }
    
    public delegate void _IVSFlexGridEvents_GetHeaderRowEventHandler(object sender, _IVSFlexGridEvents_GetHeaderRowEvent e);
    
    public class _IVSFlexGridEvents_GetHeaderRowEvent {
        
        public int row;
        
        public int headerRow;
        
        public _IVSFlexGridEvents_GetHeaderRowEvent(int row, int headerRow) {
            this.row = row;
            this.headerRow = headerRow;
        }
    }
    
    public delegate void _IVSFlexGridEvents_StartPageEventHandler(object sender, _IVSFlexGridEvents_StartPageEvent e);
    
    public class _IVSFlexGridEvents_StartPageEvent {
        
        public int hDC;
        
        public int page;
        
        public bool cancel;
        
        public _IVSFlexGridEvents_StartPageEvent(int hDC, int page, bool cancel) {
            this.hDC = hDC;
            this.page = page;
            this.cancel = cancel;
        }
    }
    
    public delegate void _IVSFlexGridEvents_DrawCellEventHandler(object sender, _IVSFlexGridEvents_DrawCellEvent e);
    
    public class _IVSFlexGridEvents_DrawCellEvent {
        
        public int hDC;
        
        public int row;
        
        public int col;
        
        public int left;
        
        public int top;
        
        public int right;
        
        public int bottom;
        
        public bool done;
        
        public _IVSFlexGridEvents_DrawCellEvent(int hDC, int row, int col, int left, int top, int right, int bottom, bool done) {
            this.hDC = hDC;
            this.row = row;
            this.col = col;
            this.left = left;
            this.top = top;
            this.right = right;
            this.bottom = bottom;
            this.done = done;
        }
    }
    
    public delegate void _IVSFlexGridEvents_ErrorEventHandler(object sender, _IVSFlexGridEvents_ErrorEvent e);
    
    public class _IVSFlexGridEvents_ErrorEvent {
        
        public int errorCode;
        
        public bool showMsgBox;
        
        public _IVSFlexGridEvents_ErrorEvent(int errorCode, bool showMsgBox) {
            this.errorCode = errorCode;
            this.showMsgBox = showMsgBox;
        }
    }
    
    public delegate void _IVSFlexGridEvents_CellButtonClickEventHandler(object sender, _IVSFlexGridEvents_CellButtonClickEvent e);
    
    public class _IVSFlexGridEvents_CellButtonClickEvent {
        
        public int row;
        
        public int col;
        
        public _IVSFlexGridEvents_CellButtonClickEvent(int row, int col) {
            this.row = row;
            this.col = col;
        }
    }
    
    public delegate void _IVSFlexGridEvents_BeforeScrollTipEventHandler(object sender, _IVSFlexGridEvents_BeforeScrollTipEvent e);
    
    public class _IVSFlexGridEvents_BeforeScrollTipEvent {
        
        public int row;
        
        public _IVSFlexGridEvents_BeforeScrollTipEvent(int row) {
            this.row = row;
        }
    }
    
    public delegate void _IVSFlexGridEvents_OLEStartDragEventHandler(object sender, _IVSFlexGridEvents_OLEStartDragEvent e);
    
    public class _IVSFlexGridEvents_OLEStartDragEvent {
        
        public VSFlex8U.VSDataObject data;
        
        public int allowedEffects;
        
        public _IVSFlexGridEvents_OLEStartDragEvent(VSFlex8U.VSDataObject data, int allowedEffects) {
            this.data = data;
            this.allowedEffects = allowedEffects;
        }
    }
    
    public delegate void _IVSFlexGridEvents_OLEGiveFeedbackEventHandler(object sender, _IVSFlexGridEvents_OLEGiveFeedbackEvent e);
    
    public class _IVSFlexGridEvents_OLEGiveFeedbackEvent {
        
        public int effect;
        
        public bool defaultCursors;
        
        public _IVSFlexGridEvents_OLEGiveFeedbackEvent(int effect, bool defaultCursors) {
            this.effect = effect;
            this.defaultCursors = defaultCursors;
        }
    }
    
    public delegate void _IVSFlexGridEvents_OLESetDataEventHandler(object sender, _IVSFlexGridEvents_OLESetDataEvent e);
    
    public class _IVSFlexGridEvents_OLESetDataEvent {
        
        public VSFlex8U.VSDataObject data;
        
        public short dataFormat;
        
        public _IVSFlexGridEvents_OLESetDataEvent(VSFlex8U.VSDataObject data, short dataFormat) {
            this.data = data;
            this.dataFormat = dataFormat;
        }
    }
    
    public delegate void _IVSFlexGridEvents_OLECompleteDragEventHandler(object sender, _IVSFlexGridEvents_OLECompleteDragEvent e);
    
    public class _IVSFlexGridEvents_OLECompleteDragEvent {
        
        public int effect;
        
        public _IVSFlexGridEvents_OLECompleteDragEvent(int effect) {
            this.effect = effect;
        }
    }
    
    public delegate void _IVSFlexGridEvents_OLEDragOverEventHandler(object sender, _IVSFlexGridEvents_OLEDragOverEvent e);
    
    public class _IVSFlexGridEvents_OLEDragOverEvent {
        
        public VSFlex8U.VSDataObject data;
        
        public int effect;
        
        public short button;
        
        public short shift;
        
        public float x;
        
        public float y;
        
        public short state;
        
        public _IVSFlexGridEvents_OLEDragOverEvent(VSFlex8U.VSDataObject data, int effect, short button, short shift, float x, float y, short state) {
            this.data = data;
            this.effect = effect;
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
            this.state = state;
        }
    }
    
    public delegate void _IVSFlexGridEvents_OLEDragDropEventHandler(object sender, _IVSFlexGridEvents_OLEDragDropEvent e);
    
    public class _IVSFlexGridEvents_OLEDragDropEvent {
        
        public VSFlex8U.VSDataObject data;
        
        public int effect;
        
        public short button;
        
        public short shift;
        
        public float x;
        
        public float y;
        
        public _IVSFlexGridEvents_OLEDragDropEvent(VSFlex8U.VSDataObject data, int effect, short button, short shift, float x, float y) {
            this.data = data;
            this.effect = effect;
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _IVSFlexGridEvents_OLESetCustomDataObjectEventHandler(object sender, _IVSFlexGridEvents_OLESetCustomDataObjectEvent e);
    
    public class _IVSFlexGridEvents_OLESetCustomDataObjectEvent {
        
        public object customDataObject;
        
        public _IVSFlexGridEvents_OLESetCustomDataObjectEvent(object customDataObject) {
            this.customDataObject = customDataObject;
        }
    }
    
    public delegate void _IVSFlexGridEvents_CellChangedEventHandler(object sender, _IVSFlexGridEvents_CellChangedEvent e);
    
    public class _IVSFlexGridEvents_CellChangedEvent {
        
        public int row;
        
        public int col;
        
        public _IVSFlexGridEvents_CellChangedEvent(int row, int col) {
            this.row = row;
            this.col = col;
        }
    }
    
    public delegate void _IVSFlexGridEvents_BeforeMoveRowEventHandler(object sender, _IVSFlexGridEvents_BeforeMoveRowEvent e);
    
    public class _IVSFlexGridEvents_BeforeMoveRowEvent {
        
        public int row;
        
        public int position;
        
        public _IVSFlexGridEvents_BeforeMoveRowEvent(int row, int position) {
            this.row = row;
            this.position = position;
        }
    }
    
    public delegate void _IVSFlexGridEvents_AfterMoveRowEventHandler(object sender, _IVSFlexGridEvents_AfterMoveRowEvent e);
    
    public class _IVSFlexGridEvents_AfterMoveRowEvent {
        
        public int row;
        
        public int position;
        
        public _IVSFlexGridEvents_AfterMoveRowEvent(int row, int position) {
            this.row = row;
            this.position = position;
        }
    }
    
    public delegate void _IVSFlexGridEvents_SetupEditWindowEventHandler(object sender, _IVSFlexGridEvents_SetupEditWindowEvent e);
    
    public class _IVSFlexGridEvents_SetupEditWindowEvent {
        
        public int row;
        
        public int col;
        
        public int editWindow;
        
        public bool isCombo;
        
        public _IVSFlexGridEvents_SetupEditWindowEvent(int row, int col, int editWindow, bool isCombo) {
            this.row = row;
            this.col = col;
            this.editWindow = editWindow;
            this.isCombo = isCombo;
        }
    }
    
    public delegate void _IVSFlexGridEvents_SetupEditStyleEventHandler(object sender, _IVSFlexGridEvents_SetupEditStyleEvent e);
    
    public class _IVSFlexGridEvents_SetupEditStyleEvent {
        
        public int row;
        
        public int col;
        
        public bool isCombo;
        
        public int style;
        
        public int styleEx;
        
        public _IVSFlexGridEvents_SetupEditStyleEvent(int row, int col, bool isCombo, int style, int styleEx) {
            this.row = row;
            this.col = col;
            this.isCombo = isCombo;
            this.style = style;
            this.styleEx = styleEx;
        }
    }
    
    public delegate void _IVSFlexGridEvents_ComboDropDownEventHandler(object sender, _IVSFlexGridEvents_ComboDropDownEvent e);
    
    public class _IVSFlexGridEvents_ComboDropDownEvent {
        
        public int row;
        
        public int col;
        
        public _IVSFlexGridEvents_ComboDropDownEvent(int row, int col) {
            this.row = row;
            this.col = col;
        }
    }
    
    public delegate void _IVSFlexGridEvents_ComboCloseUpEventHandler(object sender, _IVSFlexGridEvents_ComboCloseUpEvent e);
    
    public class _IVSFlexGridEvents_ComboCloseUpEvent {
        
        public int row;
        
        public int col;
        
        public bool finishEdit;
        
        public _IVSFlexGridEvents_ComboCloseUpEvent(int row, int col, bool finishEdit) {
            this.row = row;
            this.col = col;
            this.finishEdit = finishEdit;
        }
    }
    
    public delegate void _IVSFlexGridEvents_FilterDataEventHandler(object sender, _IVSFlexGridEvents_FilterDataEvent e);
    
    public class _IVSFlexGridEvents_FilterDataEvent {
        
        public int row;
        
        public int col;
        
        public string value;
        
        public bool savingToDB;
        
        public bool wantThisCol;
        
        public _IVSFlexGridEvents_FilterDataEvent(int row, int col, string value, bool savingToDB, bool wantThisCol) {
            this.row = row;
            this.col = col;
            this.value = value;
            this.savingToDB = savingToDB;
            this.wantThisCol = wantThisCol;
        }
    }
    
    public delegate void _IVSFlexGridEvents_BeforeDataRefreshEventHandler(object sender, _IVSFlexGridEvents_BeforeDataRefreshEvent e);
    
    public class _IVSFlexGridEvents_BeforeDataRefreshEvent {
        
        public bool cancel;
        
        public _IVSFlexGridEvents_BeforeDataRefreshEvent(bool cancel) {
            this.cancel = cancel;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxVSFlexGridEventMulticaster : VSFlex8U._IVSFlexGridEvents {
        
        private AxVSFlexGrid parent;
        
        public AxVSFlexGridEventMulticaster(AxVSFlexGrid parent) {
            this.parent = parent;
        }
        
        public virtual void Click() {
            System.EventArgs clickEvent = new System.EventArgs();
            this.parent.RaiseOnClickEvent(this.parent, clickEvent);
        }
        
        public virtual void DblClick() {
            System.EventArgs dblclickEvent = new System.EventArgs();
            this.parent.RaiseOnDblClick(this.parent, dblclickEvent);
        }
        
        public virtual void KeyDown(ref short keyCode, short shift) {
            _IVSFlexGridEvents_KeyDownEvent keydownEvent = new _IVSFlexGridEvents_KeyDownEvent(keyCode, shift);
            this.parent.RaiseOnKeyDownEvent(this.parent, keydownEvent);
            keyCode = keydownEvent.keyCode;
        }
        
        public virtual void KeyPress(ref short keyAscii) {
            _IVSFlexGridEvents_KeyPressEvent keypressEvent = new _IVSFlexGridEvents_KeyPressEvent(keyAscii);
            this.parent.RaiseOnKeyPressEvent(this.parent, keypressEvent);
            keyAscii = keypressEvent.keyAscii;
        }
        
        public virtual void KeyUp(ref short keyCode, short shift) {
            _IVSFlexGridEvents_KeyUpEvent keyupEvent = new _IVSFlexGridEvents_KeyUpEvent(keyCode, shift);
            this.parent.RaiseOnKeyUpEvent(this.parent, keyupEvent);
            keyCode = keyupEvent.keyCode;
        }
        
        public virtual void MouseDown(short button, short shift, float x, float y) {
            _IVSFlexGridEvents_MouseDownEvent mousedownEvent = new _IVSFlexGridEvents_MouseDownEvent(button, shift, x, y);
            this.parent.RaiseOnMouseDownEvent(this.parent, mousedownEvent);
        }
        
        public virtual void MouseMove(short button, short shift, float x, float y) {
            _IVSFlexGridEvents_MouseMoveEvent mousemoveEvent = new _IVSFlexGridEvents_MouseMoveEvent(button, shift, x, y);
            this.parent.RaiseOnMouseMoveEvent(this.parent, mousemoveEvent);
        }
        
        public virtual void MouseUp(short button, short shift, float x, float y) {
            _IVSFlexGridEvents_MouseUpEvent mouseupEvent = new _IVSFlexGridEvents_MouseUpEvent(button, shift, x, y);
            this.parent.RaiseOnMouseUpEvent(this.parent, mouseupEvent);
        }
        
        public virtual void SelChange() {
            System.EventArgs selchangeEvent = new System.EventArgs();
            this.parent.RaiseOnSelChange(this.parent, selchangeEvent);
        }
        
        public virtual void RowColChange() {
            System.EventArgs rowcolchangeEvent = new System.EventArgs();
            this.parent.RaiseOnRowColChange(this.parent, rowcolchangeEvent);
        }
        
        public virtual void EnterCell() {
            System.EventArgs entercellEvent = new System.EventArgs();
            this.parent.RaiseOnEnterCell(this.parent, entercellEvent);
        }
        
        public virtual void LeaveCell() {
            System.EventArgs leavecellEvent = new System.EventArgs();
            this.parent.RaiseOnLeaveCell(this.parent, leavecellEvent);
        }
        
        public virtual void BeforeMouseDown(short button, short shift, float x, float y, ref bool cancel) {
            _IVSFlexGridEvents_BeforeMouseDownEvent beforemousedownEvent = new _IVSFlexGridEvents_BeforeMouseDownEvent(button, shift, x, y, cancel);
            this.parent.RaiseOnBeforeMouseDown(this.parent, beforemousedownEvent);
            cancel = beforemousedownEvent.cancel;
        }
        
        public virtual void BeforeRowColChange(int oldRow, int oldCol, int newRow, int newCol, ref bool cancel) {
            _IVSFlexGridEvents_BeforeRowColChangeEvent beforerowcolchangeEvent = new _IVSFlexGridEvents_BeforeRowColChangeEvent(oldRow, oldCol, newRow, newCol, cancel);
            this.parent.RaiseOnBeforeRowColChange(this.parent, beforerowcolchangeEvent);
            cancel = beforerowcolchangeEvent.cancel;
        }
        
        public virtual void AfterRowColChange(int oldRow, int oldCol, int newRow, int newCol) {
            _IVSFlexGridEvents_AfterRowColChangeEvent afterrowcolchangeEvent = new _IVSFlexGridEvents_AfterRowColChangeEvent(oldRow, oldCol, newRow, newCol);
            this.parent.RaiseOnAfterRowColChange(this.parent, afterrowcolchangeEvent);
        }
        
        public virtual void BeforeSelChange(int oldRowSel, int oldColSel, int newRowSel, int newColSel, ref bool cancel) {
            _IVSFlexGridEvents_BeforeSelChangeEvent beforeselchangeEvent = new _IVSFlexGridEvents_BeforeSelChangeEvent(oldRowSel, oldColSel, newRowSel, newColSel, cancel);
            this.parent.RaiseOnBeforeSelChange(this.parent, beforeselchangeEvent);
            cancel = beforeselchangeEvent.cancel;
        }
        
        public virtual void AfterSelChange(int oldRowSel, int oldColSel, int newRowSel, int newColSel) {
            _IVSFlexGridEvents_AfterSelChangeEvent afterselchangeEvent = new _IVSFlexGridEvents_AfterSelChangeEvent(oldRowSel, oldColSel, newRowSel, newColSel);
            this.parent.RaiseOnAfterSelChange(this.parent, afterselchangeEvent);
        }
        
        public virtual void BeforeScroll(int oldTopRow, int oldLeftCol, int newTopRow, int newLeftCol, ref bool cancel) {
            _IVSFlexGridEvents_BeforeScrollEvent beforescrollEvent = new _IVSFlexGridEvents_BeforeScrollEvent(oldTopRow, oldLeftCol, newTopRow, newLeftCol, cancel);
            this.parent.RaiseOnBeforeScroll(this.parent, beforescrollEvent);
            cancel = beforescrollEvent.cancel;
        }
        
        public virtual void AfterScroll(int oldTopRow, int oldLeftCol, int newTopRow, int newLeftCol) {
            _IVSFlexGridEvents_AfterScrollEvent afterscrollEvent = new _IVSFlexGridEvents_AfterScrollEvent(oldTopRow, oldLeftCol, newTopRow, newLeftCol);
            this.parent.RaiseOnAfterScroll(this.parent, afterscrollEvent);
        }
        
        public virtual void Compare(int row1, int row2, ref short cmp) {
            _IVSFlexGridEvents_CompareEvent compareEvent = new _IVSFlexGridEvents_CompareEvent(row1, row2, cmp);
            this.parent.RaiseOnCompare(this.parent, compareEvent);
            cmp = compareEvent.cmp;
        }
        
        public virtual void BeforeSort(int col, ref short order) {
            _IVSFlexGridEvents_BeforeSortEvent beforesortEvent = new _IVSFlexGridEvents_BeforeSortEvent(col, order);
            this.parent.RaiseOnBeforeSort(this.parent, beforesortEvent);
            order = beforesortEvent.order;
        }
        
        public virtual void AfterSort(int col, ref short order) {
            _IVSFlexGridEvents_AfterSortEvent aftersortEvent = new _IVSFlexGridEvents_AfterSortEvent(col, order);
            this.parent.RaiseOnAfterSort(this.parent, aftersortEvent);
            order = aftersortEvent.order;
        }
        
        public virtual void BeforeMoveColumn(int col, ref int position) {
            _IVSFlexGridEvents_BeforeMoveColumnEvent beforemovecolumnEvent = new _IVSFlexGridEvents_BeforeMoveColumnEvent(col, position);
            this.parent.RaiseOnBeforeMoveColumn(this.parent, beforemovecolumnEvent);
            position = beforemovecolumnEvent.position;
        }
        
        public virtual void AfterMoveColumn(int col, ref int position) {
            _IVSFlexGridEvents_AfterMoveColumnEvent aftermovecolumnEvent = new _IVSFlexGridEvents_AfterMoveColumnEvent(col, position);
            this.parent.RaiseOnAfterMoveColumn(this.parent, aftermovecolumnEvent);
            position = aftermovecolumnEvent.position;
        }
        
        public virtual void BeforeUserResize(int row, int col, ref bool cancel) {
            _IVSFlexGridEvents_BeforeUserResizeEvent beforeuserresizeEvent = new _IVSFlexGridEvents_BeforeUserResizeEvent(row, col, cancel);
            this.parent.RaiseOnBeforeUserResize(this.parent, beforeuserresizeEvent);
            cancel = beforeuserresizeEvent.cancel;
        }
        
        public virtual void AfterUserResize(int row, int col) {
            _IVSFlexGridEvents_AfterUserResizeEvent afteruserresizeEvent = new _IVSFlexGridEvents_AfterUserResizeEvent(row, col);
            this.parent.RaiseOnAfterUserResize(this.parent, afteruserresizeEvent);
        }
        
        public virtual void BeforeCollapse(int row, short state, ref bool cancel) {
            _IVSFlexGridEvents_BeforeCollapseEvent beforecollapseEvent = new _IVSFlexGridEvents_BeforeCollapseEvent(row, state, cancel);
            this.parent.RaiseOnBeforeCollapse(this.parent, beforecollapseEvent);
            cancel = beforecollapseEvent.cancel;
        }
        
        public virtual void AfterCollapse(int row, short state) {
            _IVSFlexGridEvents_AfterCollapseEvent aftercollapseEvent = new _IVSFlexGridEvents_AfterCollapseEvent(row, state);
            this.parent.RaiseOnAfterCollapse(this.parent, aftercollapseEvent);
        }
        
        public virtual void BeforeEdit(int row, int col, ref bool cancel) {
            _IVSFlexGridEvents_BeforeEditEvent beforeeditEvent = new _IVSFlexGridEvents_BeforeEditEvent(row, col, cancel);
            this.parent.RaiseOnBeforeEdit(this.parent, beforeeditEvent);
            cancel = beforeeditEvent.cancel;
        }
        
        public virtual void StartEdit(int row, int col, ref bool cancel) {
            _IVSFlexGridEvents_StartEditEvent starteditEvent = new _IVSFlexGridEvents_StartEditEvent(row, col, cancel);
            this.parent.RaiseOnStartEdit(this.parent, starteditEvent);
            cancel = starteditEvent.cancel;
        }
        
        public virtual void ValidateEdit(int row, int col, ref bool cancel) {
            _IVSFlexGridEvents_ValidateEditEvent validateeditEvent = new _IVSFlexGridEvents_ValidateEditEvent(row, col, cancel);
            this.parent.RaiseOnValidateEdit(this.parent, validateeditEvent);
            cancel = validateeditEvent.cancel;
        }
        
        public virtual void AfterEdit(int row, int col) {
            _IVSFlexGridEvents_AfterEditEvent aftereditEvent = new _IVSFlexGridEvents_AfterEditEvent(row, col);
            this.parent.RaiseOnAfterEdit(this.parent, aftereditEvent);
        }
        
        public virtual void KeyPressEdit(int row, int col, ref short keyAscii) {
            _IVSFlexGridEvents_KeyPressEditEvent keypresseditEvent = new _IVSFlexGridEvents_KeyPressEditEvent(row, col, keyAscii);
            this.parent.RaiseOnKeyPressEdit(this.parent, keypresseditEvent);
            keyAscii = keypresseditEvent.keyAscii;
        }
        
        public virtual void KeyDownEdit(int row, int col, ref short keyCode, short shift) {
            _IVSFlexGridEvents_KeyDownEditEvent keydowneditEvent = new _IVSFlexGridEvents_KeyDownEditEvent(row, col, keyCode, shift);
            this.parent.RaiseOnKeyDownEdit(this.parent, keydowneditEvent);
            keyCode = keydowneditEvent.keyCode;
        }
        
        public virtual void KeyUpEdit(int row, int col, ref short keyCode, short shift) {
            _IVSFlexGridEvents_KeyUpEditEvent keyupeditEvent = new _IVSFlexGridEvents_KeyUpEditEvent(row, col, keyCode, shift);
            this.parent.RaiseOnKeyUpEdit(this.parent, keyupeditEvent);
            keyCode = keyupeditEvent.keyCode;
        }
        
        public virtual void ChangeEdit() {
            System.EventArgs changeeditEvent = new System.EventArgs();
            this.parent.RaiseOnChangeEdit(this.parent, changeeditEvent);
        }
        
        public virtual void BeforePageBreak(int row, ref bool breakOK) {
            _IVSFlexGridEvents_BeforePageBreakEvent beforepagebreakEvent = new _IVSFlexGridEvents_BeforePageBreakEvent(row, breakOK);
            this.parent.RaiseOnBeforePageBreak(this.parent, beforepagebreakEvent);
            breakOK = beforepagebreakEvent.breakOK;
        }
        
        public virtual void GetHeaderRow(int row, ref int headerRow) {
            _IVSFlexGridEvents_GetHeaderRowEvent getheaderrowEvent = new _IVSFlexGridEvents_GetHeaderRowEvent(row, headerRow);
            this.parent.RaiseOnGetHeaderRow(this.parent, getheaderrowEvent);
            headerRow = getheaderrowEvent.headerRow;
        }
        
        public virtual void StartPage(int hDC, int page, ref bool cancel) {
            _IVSFlexGridEvents_StartPageEvent startpageEvent = new _IVSFlexGridEvents_StartPageEvent(hDC, page, cancel);
            this.parent.RaiseOnStartPage(this.parent, startpageEvent);
            cancel = startpageEvent.cancel;
        }
        
        public virtual void DrawCell(int hDC, int row, int col, int left, int top, int right, int bottom, ref bool done) {
            _IVSFlexGridEvents_DrawCellEvent drawcellEvent = new _IVSFlexGridEvents_DrawCellEvent(hDC, row, col, left, top, right, bottom, done);
            this.parent.RaiseOnDrawCell(this.parent, drawcellEvent);
            done = drawcellEvent.done;
        }
        
        public virtual void Error(int errorCode, ref bool showMsgBox) {
            _IVSFlexGridEvents_ErrorEvent errorEvent = new _IVSFlexGridEvents_ErrorEvent(errorCode, showMsgBox);
            this.parent.RaiseOnError(this.parent, errorEvent);
            showMsgBox = errorEvent.showMsgBox;
        }
        
        public virtual void CellButtonClick(int row, int col) {
            _IVSFlexGridEvents_CellButtonClickEvent cellbuttonclickEvent = new _IVSFlexGridEvents_CellButtonClickEvent(row, col);
            this.parent.RaiseOnCellButtonClick(this.parent, cellbuttonclickEvent);
        }
        
        public virtual void BeforeScrollTip(int row) {
            _IVSFlexGridEvents_BeforeScrollTipEvent beforescrolltipEvent = new _IVSFlexGridEvents_BeforeScrollTipEvent(row);
            this.parent.RaiseOnBeforeScrollTip(this.parent, beforescrolltipEvent);
        }
        
        public virtual void AfterUserFreeze() {
            System.EventArgs afteruserfreezeEvent = new System.EventArgs();
            this.parent.RaiseOnAfterUserFreeze(this.parent, afteruserfreezeEvent);
        }
        
        public virtual void OLEStartDrag(ref VSFlex8U.VSDataObject data, ref int allowedEffects) {
            _IVSFlexGridEvents_OLEStartDragEvent olestartdragEvent = new _IVSFlexGridEvents_OLEStartDragEvent(data, allowedEffects);
            this.parent.RaiseOnOLEStartDrag(this.parent, olestartdragEvent);
            data = olestartdragEvent.data;
            allowedEffects = olestartdragEvent.allowedEffects;
        }
        
        public virtual void OLEGiveFeedback(ref int effect, ref bool defaultCursors) {
            _IVSFlexGridEvents_OLEGiveFeedbackEvent olegivefeedbackEvent = new _IVSFlexGridEvents_OLEGiveFeedbackEvent(effect, defaultCursors);
            this.parent.RaiseOnOLEGiveFeedback(this.parent, olegivefeedbackEvent);
            effect = olegivefeedbackEvent.effect;
            defaultCursors = olegivefeedbackEvent.defaultCursors;
        }
        
        public virtual void OLESetData(ref VSFlex8U.VSDataObject data, ref short dataFormat) {
            _IVSFlexGridEvents_OLESetDataEvent olesetdataEvent = new _IVSFlexGridEvents_OLESetDataEvent(data, dataFormat);
            this.parent.RaiseOnOLESetData(this.parent, olesetdataEvent);
            data = olesetdataEvent.data;
            dataFormat = olesetdataEvent.dataFormat;
        }
        
        public virtual void OLECompleteDrag(ref int effect) {
            _IVSFlexGridEvents_OLECompleteDragEvent olecompletedragEvent = new _IVSFlexGridEvents_OLECompleteDragEvent(effect);
            this.parent.RaiseOnOLECompleteDrag(this.parent, olecompletedragEvent);
            effect = olecompletedragEvent.effect;
        }
        
        public virtual void OLEDragOver(ref VSFlex8U.VSDataObject data, ref int effect, short button, short shift, float x, float y, ref short state) {
            _IVSFlexGridEvents_OLEDragOverEvent oledragoverEvent = new _IVSFlexGridEvents_OLEDragOverEvent(data, effect, button, shift, x, y, state);
            this.parent.RaiseOnOLEDragOver(this.parent, oledragoverEvent);
            data = oledragoverEvent.data;
            effect = oledragoverEvent.effect;
            state = oledragoverEvent.state;
        }
        
        public virtual void OLEDragDrop(ref VSFlex8U.VSDataObject data, ref int effect, short button, short shift, float x, float y) {
            _IVSFlexGridEvents_OLEDragDropEvent oledragdropEvent = new _IVSFlexGridEvents_OLEDragDropEvent(data, effect, button, shift, x, y);
            this.parent.RaiseOnOLEDragDrop(this.parent, oledragdropEvent);
            data = oledragdropEvent.data;
            effect = oledragdropEvent.effect;
        }
        
        public virtual void OLESetCustomDataObject(ref object customDataObject) {
            _IVSFlexGridEvents_OLESetCustomDataObjectEvent olesetcustomdataobjectEvent = new _IVSFlexGridEvents_OLESetCustomDataObjectEvent(customDataObject);
            this.parent.RaiseOnOLESetCustomDataObject(this.parent, olesetcustomdataobjectEvent);
            customDataObject = olesetcustomdataobjectEvent.customDataObject;
        }
        
        public virtual void CellChanged(int row, int col) {
            _IVSFlexGridEvents_CellChangedEvent cellchangedEvent = new _IVSFlexGridEvents_CellChangedEvent(row, col);
            this.parent.RaiseOnCellChanged(this.parent, cellchangedEvent);
        }
        
        public virtual void BeforeMoveRow(int row, ref int position) {
            _IVSFlexGridEvents_BeforeMoveRowEvent beforemoverowEvent = new _IVSFlexGridEvents_BeforeMoveRowEvent(row, position);
            this.parent.RaiseOnBeforeMoveRow(this.parent, beforemoverowEvent);
            position = beforemoverowEvent.position;
        }
        
        public virtual void AfterMoveRow(int row, ref int position) {
            _IVSFlexGridEvents_AfterMoveRowEvent aftermoverowEvent = new _IVSFlexGridEvents_AfterMoveRowEvent(row, position);
            this.parent.RaiseOnAfterMoveRow(this.parent, aftermoverowEvent);
            position = aftermoverowEvent.position;
        }
        
        public virtual void SetupEditWindow(int row, int col, int editWindow, bool isCombo) {
            _IVSFlexGridEvents_SetupEditWindowEvent setupeditwindowEvent = new _IVSFlexGridEvents_SetupEditWindowEvent(row, col, editWindow, isCombo);
            this.parent.RaiseOnSetupEditWindow(this.parent, setupeditwindowEvent);
        }
        
        public virtual void SetupEditStyle(int row, int col, bool isCombo, ref int style, ref int styleEx) {
            _IVSFlexGridEvents_SetupEditStyleEvent setupeditstyleEvent = new _IVSFlexGridEvents_SetupEditStyleEvent(row, col, isCombo, style, styleEx);
            this.parent.RaiseOnSetupEditStyle(this.parent, setupeditstyleEvent);
            style = setupeditstyleEvent.style;
            styleEx = setupeditstyleEvent.styleEx;
        }
        
        public virtual void ComboDropDown(int row, int col) {
            _IVSFlexGridEvents_ComboDropDownEvent combodropdownEvent = new _IVSFlexGridEvents_ComboDropDownEvent(row, col);
            this.parent.RaiseOnComboDropDown(this.parent, combodropdownEvent);
        }
        
        public virtual void ComboCloseUp(int row, int col, ref bool finishEdit) {
            _IVSFlexGridEvents_ComboCloseUpEvent combocloseupEvent = new _IVSFlexGridEvents_ComboCloseUpEvent(row, col, finishEdit);
            this.parent.RaiseOnComboCloseUp(this.parent, combocloseupEvent);
            finishEdit = combocloseupEvent.finishEdit;
        }
        
        public virtual void StartAutoSearch() {
            System.EventArgs startautosearchEvent = new System.EventArgs();
            this.parent.RaiseOnStartAutoSearch(this.parent, startautosearchEvent);
        }
        
        public virtual void EndAutoSearch() {
            System.EventArgs endautosearchEvent = new System.EventArgs();
            this.parent.RaiseOnEndAutoSearch(this.parent, endautosearchEvent);
        }
        
        public virtual void FilterData(int row, int col, ref string value, bool savingToDB, ref bool wantThisCol) {
            _IVSFlexGridEvents_FilterDataEvent filterdataEvent = new _IVSFlexGridEvents_FilterDataEvent(row, col, value, savingToDB, wantThisCol);
            this.parent.RaiseOnFilterData(this.parent, filterdataEvent);
            value = filterdataEvent.value;
            wantThisCol = filterdataEvent.wantThisCol;
        }
        
        public virtual void BeforeDataRefresh(ref bool cancel) {
            _IVSFlexGridEvents_BeforeDataRefreshEvent beforedatarefreshEvent = new _IVSFlexGridEvents_BeforeDataRefreshEvent(cancel);
            this.parent.RaiseOnBeforeDataRefresh(this.parent, beforedatarefreshEvent);
            cancel = beforedatarefreshEvent.cancel;
        }
        
        public virtual void AfterDataRefresh() {
            System.EventArgs afterdatarefreshEvent = new System.EventArgs();
            this.parent.RaiseOnAfterDataRefresh(this.parent, afterdatarefreshEvent);
        }
    }
}
