//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Reflection.AssemblyVersion("6.42.0.0")]
[assembly: System.Windows.Forms.AxHost.TypeLibraryTimeStamp("03/30/2018 09:57:06")]

namespace AxUFToolBarCtrl {
    
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{a472e8e0-8a62-4e84-a133-60e64cd43f1a}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("ButtonClick")]
    public class AxcToolbar : System.Windows.Forms.AxHost {
        
        private UFToolBarCtrl._cToolbar ocx;
        
        private AxcToolbarEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxcToolbar() : 
                base("a472e8e0-8a62-4e84-a133-60e64cd43f1a") {
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027120)]
        public virtual UFToolBarCtrl.ECTBToolbarDrawStyle DrawStyle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DrawStyle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.DrawStyle = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027116)]
        public virtual int AutosizeButtonPadding {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutosizeButtonPadding", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AutosizeButtonPadding;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutosizeButtonPadding", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AutosizeButtonPadding = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027115)]
        public virtual int ButtonCount {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ButtonCount", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ButtonCount;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027099)]
        public virtual int MaxButtonWidth {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MaxButtonWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MaxButtonWidth;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027098)]
        public virtual int MaxButtonHeight {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MaxButtonHeight", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MaxButtonHeight;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027088)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.Int32")]
        public virtual int hwnd {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("hwnd", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return (this.ocx.hwnd);
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027087)]
        public virtual bool TitleBarModifier {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TitleBarModifier", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.TitleBarModifier;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TitleBarModifier", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.TitleBarModifier = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027086)]
        public virtual UFToolBarCtrl.ECTBDropDownAlign DropDownAlign {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DropDownAlign", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DropDownAlign;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DropDownAlign", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.DropDownAlign = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027085)]
        public virtual bool ListStyle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ListStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ListStyle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ListStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ListStyle = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027084)]
        public virtual bool Wrappable {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Wrappable", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Wrappable;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Wrappable", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Wrappable = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027083)]
        public virtual UFToolBarCtrl.ECTBImageSourceTypes ImageSource {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImageSource", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ImageSource = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027082)]
        public virtual int ImageResourceID {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImageResourceID", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ImageResourceID = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027081)]
        public virtual int ImageResourcehInstance {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImageResourcehInstance", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ImageResourcehInstance = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027080)]
        public virtual string ImageFile {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImageFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ImageFile = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027079)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("stdole.StdPicture")]
        public virtual System.Drawing.Image ImagePicture {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImagePicture", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ImagePicture = ((stdole.StdPicture)(GetIPictureFromPicture(value)));
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027078)]
        public virtual UFToolBarCtrl.ECTBStandardImageSourceTypes ImageStandardBitmapType {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ImageStandardBitmapType", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ImageStandardBitmapType = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027076)]
        public virtual int ToolbarWidth {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ToolbarWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ToolbarWidth;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027074)]
        public virtual int ToolbarHeight {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ToolbarHeight", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ToolbarHeight;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027276)]
        public virtual int ToolbarHwnd {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ToolbarHwnd", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ToolbarHwnd;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027288)]
        public virtual int CtlBackColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlBackColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.BackColor;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlBackColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BackColor = value;
            }
        }
        
        public event @__cToolbar_ButtonClickEventHandler ButtonClick;
        
        public event @__cToolbar_FireCommandEventHandler FireCommand;
        
        public event @__cToolbar_FireCheckChangeEventHandler FireCheckChange;
        
        public event @__cToolbar_FireMenuCommandEventHandler FireMenuCommand;
        
        public event @__cToolbar_FireRefreshPortalEventHandler FireRefreshPortal;
        
        public event @__cToolbar_DropDownPressEventHandler DropDownPress;
        
        public event @__cToolbar_HotItemChangeEventHandler HotItemChange;
        
        public event System.EventHandler CustomiseBegin;
        
        public event @__cToolbar_CustomiseCanInsertBeforeEventHandler CustomiseCanInsertBefore;
        
        public event @__cToolbar_CustomiseCanDeleteEventHandler CustomiseCanDelete;
        
        public event System.EventHandler CustomiseHelpPressed;
        
        public event System.EventHandler CustomiseResetPressed;
        
        public event @__cToolbar_HotKeyPressEventHandler HotKeyPress;
        
        public event @__cToolbar_MouseDownEventHandler MouseDownEvent;
        
        public event @__cToolbar_MouseMoveEventHandler MouseMoveEvent;
        
        public event @__cToolbar_MouseUpEventHandler MouseUpEvent;
        
        public event @__cToolbar_ButtonChangeEventHandler ButtonChange;
        
        public virtual bool get_Enabled() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_Enabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_Enabled()));
            return returnValue;
        }
        
        public virtual void set_Enabled(ref bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_Enabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_Enabled(ref param0);
        }
        
        public virtual string GetHiddenCapton(object vButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetHiddenCapton", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetHiddenCapton(vButton)));
            return returnValue;
        }
        
        public virtual object SetHiddenCapton(object vButton, string sCaption) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetHiddenCapton", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.SetHiddenCapton(vButton, sCaption)));
            return returnValue;
        }
        
        public virtual void CloseChrevonWindow() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CloseChrevonWindow", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.CloseChrevonWindow();
        }
        
        public virtual string get_ButtonImageFile(object vButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ButtonImageFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_ButtonImageFile(vButton)));
            return returnValue;
        }
        
        public virtual void set_ButtonImageFile(object vButton, string param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ButtonImageFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ButtonImageFile(vButton, param0);
        }
        
        public virtual bool RegisterHotKeyForSql(string strHotKey, int lButtonIndex) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RegisterHotKeyForSql", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.RegisterHotKeyForSql(strHotKey, lButtonIndex)));
            return returnValue;
        }
        
        public virtual void ClearHotkeys() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClearHotkeys", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ClearHotkeys();
        }
        
        public virtual void ChevronPress(int x, int y) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ChevronPress", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ChevronPress(x, y);
        }
        
        public virtual bool get_ChevronButton(UFToolBarCtrl.ECTBChevronAdditionalButtons eButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ChevronButton", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_ChevronButton(eButton)));
            return returnValue;
        }
        
        public virtual void set_ChevronButton(UFToolBarCtrl.ECTBChevronAdditionalButtons eButton, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ChevronButton", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ChevronButton(eButton, param0);
        }
        
        public virtual string get_ChevronButtonCaption(UFToolBarCtrl.ECTBChevronAdditionalButtons eButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ChevronButtonCaption", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_ChevronButtonCaption(eButton)));
            return returnValue;
        }
        
        public virtual void set_ChevronButtonCaption(UFToolBarCtrl.ECTBChevronAdditionalButtons eButton, string param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ChevronButtonCaption", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ChevronButtonCaption(eButton, param0);
        }
        
        public virtual void GetComCtrlVersionInfo(ref int lMajor, ref int lMinor) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetComCtrlVersionInfo", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    lMajor,
                    lMinor,
                    ((int)(0))};
            System.Type typeVar = typeof(UFToolBarCtrl._cToolbar);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("GetComCtrlVersionInfo");
            methodToInvoke.Invoke(this.ocx, paramArray);
            lMajor = ((int)(paramArray[0]));
            lMinor = ((int)(paramArray[1]));
        }
        
        public virtual void GetComCtrlVersionInfo(ref int lMajor, ref int lMinor, ref int lBuild) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetComCtrlVersionInfo", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.GetComCtrlVersionInfo(ref lMajor, ref lMinor, ref lBuild);
        }
        
        public virtual string get_ButtonTooltip(object vButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ButtonTooltip", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_ButtonTooltip(vButton)));
            return returnValue;
        }
        
        public virtual void set_ButtonTooltip(object vButton, string param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ButtonTooltip", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ButtonTooltip(vButton, param0);
        }
        
        public virtual int get_ButtonImage(object vButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ButtonImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_ButtonImage(vButton)));
            return returnValue;
        }
        
        public virtual void set_ButtonImage(object vButton, int param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ButtonImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ButtonImage(vButton, param0);
        }
        
        public virtual string get_ButtonCaption(object vButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ButtonCaption", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_ButtonCaption(vButton)));
            return returnValue;
        }
        
        public virtual void set_ButtonCaption(object vButton, string param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ButtonCaption", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ButtonCaption(vButton, param0);
        }
        
        public virtual bool get_ButtonTextVisible(object vButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ButtonTextVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_ButtonTextVisible(vButton)));
            return returnValue;
        }
        
        public virtual void set_ButtonTextVisible(object vButton, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ButtonTextVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ButtonTextVisible(vButton, param0);
        }
        
        public virtual short get_ButtonIndex(object vButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ButtonIndex", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.get_ButtonIndex(vButton)));
            return returnValue;
        }
        
        public virtual string get_buttonKey(int iButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_buttonKey", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_buttonKey(iButton)));
            return returnValue;
        }
        
        public virtual bool get_ButtonEnabled(object vButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ButtonEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_ButtonEnabled(vButton)));
            return returnValue;
        }
        
        public virtual void set_ButtonEnabled(object vButton, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ButtonEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ButtonEnabled(vButton, param0);
        }
        
        public virtual bool get_ButtonVisible(object vButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ButtonVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_ButtonVisible(vButton)));
            return returnValue;
        }
        
        public virtual void set_ButtonVisible(object vButton, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ButtonVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ButtonVisible(vButton, param0);
        }
        
        public virtual object get_ButtonWidth(object vButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ButtonWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.get_ButtonWidth(vButton)));
            return returnValue;
        }
        
        public virtual void set_ButtonWidth(object vButton, object param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ButtonWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ButtonWidth(vButton, param0);
        }
        
        public virtual int get_ButtonHeight(object vButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ButtonHeight", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_ButtonHeight(vButton)));
            return returnValue;
        }
        
        public virtual int get_ButtonLeft(object vButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ButtonLeft", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_ButtonLeft(vButton)));
            return returnValue;
        }
        
        public virtual int get_ButtonTop(object vButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ButtonTop", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_ButtonTop(vButton)));
            return returnValue;
        }
        
        public virtual bool get_ButtonHot(object vButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ButtonHot", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_ButtonHot(vButton)));
            return returnValue;
        }
        
        public virtual void set_ButtonHot(object vButton, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ButtonHot", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ButtonHot(vButton, param0);
        }
        
        public virtual bool get_ButtonChecked(object vButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ButtonChecked", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_ButtonChecked(vButton)));
            return returnValue;
        }
        
        public virtual void set_ButtonChecked(object vButton, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ButtonChecked", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ButtonChecked(vButton, param0);
        }
        
        public virtual bool get_ButtonPressed(object vButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ButtonPressed", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_ButtonPressed(vButton)));
            return returnValue;
        }
        
        public virtual void set_ButtonPressed(object vButton, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ButtonPressed", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ButtonPressed(vButton, param0);
        }
        
        public virtual UFToolBarCtrl.ECTBToolButtonSyle get_ButtonsStyle() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ButtonsStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            UFToolBarCtrl.ECTBToolButtonSyle returnValue = ((UFToolBarCtrl.ECTBToolButtonSyle)(this.ocx.get_ButtonsStyle()));
            return returnValue;
        }
        
        public virtual void set_ButtonsStyle(ref UFToolBarCtrl.ECTBToolButtonSyle param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ButtonsStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ButtonsStyle(ref param0);
        }
        
        public virtual UFToolBarCtrl.ECTBToolButtonSyle get_ButtonStyle(object vButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ButtonStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            UFToolBarCtrl.ECTBToolButtonSyle returnValue = ((UFToolBarCtrl.ECTBToolButtonSyle)(this.ocx.get_ButtonStyle(vButton)));
            return returnValue;
        }
        
        public virtual void set_ButtonStyle(object vButton, UFToolBarCtrl.ECTBToolButtonSyle param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ButtonStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ButtonStyle(vButton, param0);
        }
        
        public virtual int get_ButtonControl(object vButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ButtonControl", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_ButtonControl(vButton)));
            return returnValue;
        }
        
        public virtual bool get_ButtonTextWrap(object vButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ButtonTextWrap", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_ButtonTextWrap(vButton)));
            return returnValue;
        }
        
        public virtual void set_ButtonTextWrap(object vButton, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ButtonTextWrap", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ButtonTextWrap(vButton, param0);
        }
        
        public virtual bool get_ButtonTextEllipses(object vButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ButtonTextEllipses", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_ButtonTextEllipses(vButton)));
            return returnValue;
        }
        
        public virtual void set_ButtonTextEllipses(object vButton, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ButtonTextEllipses", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ButtonTextEllipses(vButton, param0);
        }
        
        public virtual void DestroyToolBar() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DestroyToolBar", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DestroyToolBar();
        }
        
        public virtual void CreateFromMenu(ref object cMenu) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CreateFromMenu", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.CreateFromMenu(ref cMenu);
        }
        
        public virtual void CreateFromMenu2(ref object cMenu) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CreateFromMenu2", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    cMenu,
                    ((UFToolBarCtrl.ECTBToolbarFromMenuStyle)(0)),
                    ""};
            System.Type typeVar = typeof(UFToolBarCtrl._cToolbar);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("CreateFromMenu2");
            methodToInvoke.Invoke(this.ocx, paramArray);
            cMenu = ((object)(paramArray[0]));
        }
        
        public virtual void CreateFromMenu2(ref object cMenu, UFToolBarCtrl.ECTBToolbarFromMenuStyle eStyle, string sMenuParentKey) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CreateFromMenu2", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.CreateFromMenu2(ref cMenu, eStyle, sMenuParentKey);
        }
        
        public virtual void CreateToolbar() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CreateToolbar", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    ((short)(0)),
                    ((bool)(false)),
                    ((bool)(false)),
                    ((bool)(false)),
                    ((short)(0))};
            System.Type typeVar = typeof(UFToolBarCtrl._cToolbar);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("CreateToolbar");
            methodToInvoke.Invoke(this.ocx, paramArray);
        }
        
        public virtual void CreateToolbar(ref short buttonSize, ref bool styleList, ref bool withText, ref bool wrappable, ref short picSize) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CreateToolbar", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.CreateToolbar(ref buttonSize, ref styleList, ref withText, ref wrappable, ref picSize);
        }
        
        public virtual void SetImageList(object vThis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetImageList", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetImageList(vThis, ((UFToolBarCtrl.ECTBImageListTypes)(1072)));
        }
        
        public virtual void SetImageList(object vThis, UFToolBarCtrl.ECTBImageListTypes eType) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetImageList", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetImageList(vThis, eType);
        }
        
        public virtual void RemoveButton(object vButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RemoveButton", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.RemoveButton(vButton);
        }
        
        public virtual void AddControl(int lhWnd) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddControl", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    lhWnd,
                    System.Reflection.Missing.Value,
                    ""};
            System.Type typeVar = typeof(UFToolBarCtrl._cToolbar);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("AddControl");
            methodToInvoke.Invoke(this.ocx, paramArray);
        }
        
        public virtual void AddControl(int lhWnd, object vButtonBefore, string sKey) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddControl", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AddControl(lhWnd, vButtonBefore, sKey);
        }
        
        public virtual void SetControl(int lhWnd, object vButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetControl", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetControl(lhWnd, vButton);
        }
        
        public virtual bool get_ControlStretch(object vButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ControlStretch", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_ControlStretch(vButton)));
            return returnValue;
        }
        
        public virtual void set_ControlStretch(object vButton, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ControlStretch", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ControlStretch(vButton, param0);
        }
        
        public virtual int AddButton() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddButton", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    "",
                    ((short)(-1)),
                    System.Reflection.Missing.Value,
                    ((short)(0)),
                    "",
                    ((UFToolBarCtrl.ECTBToolButtonSyle)(0)),
                    "",
                    ""};
            System.Type typeVar = typeof(UFToolBarCtrl._cToolbar);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("AddButton");
            int returnValue = ((int)(methodToInvoke.Invoke(this.ocx, paramArray)));
            return returnValue;
        }
        
        public virtual int AddButton(string sTip, short iImage, object vButtonBefore, short xLarge, string sButtonText, UFToolBarCtrl.ECTBToolButtonSyle eButtonStyle, string sKey, string sHiddenCaption) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddButton", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.AddButton(sTip, iImage, vButtonBefore, xLarge, sButtonText, eButtonStyle, sKey, sHiddenCaption)));
            return returnValue;
        }
        
        public virtual void ResizeToolbar() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ResizeToolbar", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ResizeToolbar();
        }
        
        public virtual void ButtonSize(ref short xWidth, ref short xHeight) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ButtonSize", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ButtonSize(ref xWidth, ref xHeight);
        }
        
        public virtual void GetDropDownPosition(short id, ref int x, ref int y) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetDropDownPosition", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.GetDropDownPosition(id, ref x, ref y);
        }
        
        public virtual object RaiseButtonClick(int iIDButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RaiseButtonClick", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.RaiseButtonClick(iIDButton)));
            return returnValue;
        }
        
        public virtual bool RegisterHotKey(ref UFToolBarCtrl.UFKeyType ufKey) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RegisterHotKey", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.RegisterHotKey(ref ufKey)));
            return returnValue;
        }
        
        public virtual bool RegisterHotKeyEx(ref string str) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RegisterHotKeyEx", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    str,
                    ((int)(0))};
            System.Type typeVar = typeof(UFToolBarCtrl._cToolbar);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("RegisterHotKeyEx");
            bool returnValue = ((bool)(methodToInvoke.Invoke(this.ocx, paramArray)));
            str = ((string)(paramArray[0]));
            return returnValue;
        }
        
        public virtual bool RegisterHotKeyEx(ref string str, ref int lButtonIndex) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RegisterHotKeyEx", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.RegisterHotKeyEx(ref str, ref lButtonIndex)));
            return returnValue;
        }
        
        public virtual bool RemoveHotKey(ref UFToolBarCtrl.UFKeyType ufKey) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RemoveHotKey", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.RemoveHotKey(ref ufKey)));
            return returnValue;
        }
        
        public virtual void AddButtonEx(ref UFToolBarCtrl.Button ufbtn) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddButtonEx", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AddButtonEx(ref ufbtn);
        }
        
        public virtual void set_buttonKey(int iButton, ref string param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_buttonKey", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_buttonKey(iButton, ref param0);
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxcToolbarEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(UFToolBarCtrl.@__cToolbar));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((UFToolBarCtrl._cToolbar)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnButtonClick(object sender, @__cToolbar_ButtonClickEvent e) {
            if ((this.ButtonClick != null)) {
                this.ButtonClick(sender, e);
            }
        }
        
        internal void RaiseOnFireCommand(object sender, @__cToolbar_FireCommandEvent e) {
            if ((this.FireCommand != null)) {
                this.FireCommand(sender, e);
            }
        }
        
        internal void RaiseOnFireCheckChange(object sender, @__cToolbar_FireCheckChangeEvent e) {
            if ((this.FireCheckChange != null)) {
                this.FireCheckChange(sender, e);
            }
        }
        
        internal void RaiseOnFireMenuCommand(object sender, @__cToolbar_FireMenuCommandEvent e) {
            if ((this.FireMenuCommand != null)) {
                this.FireMenuCommand(sender, e);
            }
        }
        
        internal void RaiseOnFireRefreshPortal(object sender, @__cToolbar_FireRefreshPortalEvent e) {
            if ((this.FireRefreshPortal != null)) {
                this.FireRefreshPortal(sender, e);
            }
        }
        
        internal void RaiseOnDropDownPress(object sender, @__cToolbar_DropDownPressEvent e) {
            if ((this.DropDownPress != null)) {
                this.DropDownPress(sender, e);
            }
        }
        
        internal void RaiseOnHotItemChange(object sender, @__cToolbar_HotItemChangeEvent e) {
            if ((this.HotItemChange != null)) {
                this.HotItemChange(sender, e);
            }
        }
        
        internal void RaiseOnCustomiseBegin(object sender, System.EventArgs e) {
            if ((this.CustomiseBegin != null)) {
                this.CustomiseBegin(sender, e);
            }
        }
        
        internal void RaiseOnCustomiseCanInsertBefore(object sender, @__cToolbar_CustomiseCanInsertBeforeEvent e) {
            if ((this.CustomiseCanInsertBefore != null)) {
                this.CustomiseCanInsertBefore(sender, e);
            }
        }
        
        internal void RaiseOnCustomiseCanDelete(object sender, @__cToolbar_CustomiseCanDeleteEvent e) {
            if ((this.CustomiseCanDelete != null)) {
                this.CustomiseCanDelete(sender, e);
            }
        }
        
        internal void RaiseOnCustomiseHelpPressed(object sender, System.EventArgs e) {
            if ((this.CustomiseHelpPressed != null)) {
                this.CustomiseHelpPressed(sender, e);
            }
        }
        
        internal void RaiseOnCustomiseResetPressed(object sender, System.EventArgs e) {
            if ((this.CustomiseResetPressed != null)) {
                this.CustomiseResetPressed(sender, e);
            }
        }
        
        internal void RaiseOnHotKeyPress(object sender, @__cToolbar_HotKeyPressEvent e) {
            if ((this.HotKeyPress != null)) {
                this.HotKeyPress(sender, e);
            }
        }
        
        internal void RaiseOnMouseDownEvent(object sender, @__cToolbar_MouseDownEvent e) {
            if ((this.MouseDownEvent != null)) {
                this.MouseDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseMoveEvent(object sender, @__cToolbar_MouseMoveEvent e) {
            if ((this.MouseMoveEvent != null)) {
                this.MouseMoveEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseUpEvent(object sender, @__cToolbar_MouseUpEvent e) {
            if ((this.MouseUpEvent != null)) {
                this.MouseUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnButtonChange(object sender, @__cToolbar_ButtonChangeEvent e) {
            if ((this.ButtonChange != null)) {
                this.ButtonChange(sender, e);
            }
        }
    }
    
    public delegate void @__cToolbar_ButtonClickEventHandler(object sender, @__cToolbar_ButtonClickEvent e);
    
    public class @__cToolbar_ButtonClickEvent {
        
        public int lButton;
        
        public @__cToolbar_ButtonClickEvent(int lButton) {
            this.lButton = lButton;
        }
    }
    
    public delegate void @__cToolbar_FireCommandEventHandler(object sender, @__cToolbar_FireCommandEvent e);
    
    public class @__cToolbar_FireCommandEvent {
        
        public string sButtonKey;
        
        public @__cToolbar_FireCommandEvent(string sButtonKey) {
            this.sButtonKey = sButtonKey;
        }
    }
    
    public delegate void @__cToolbar_FireCheckChangeEventHandler(object sender, @__cToolbar_FireCheckChangeEvent e);
    
    public class @__cToolbar_FireCheckChangeEvent {
        
        public string sButtonKey;
        
        public @__cToolbar_FireCheckChangeEvent(string sButtonKey) {
            this.sButtonKey = sButtonKey;
        }
    }
    
    public delegate void @__cToolbar_FireMenuCommandEventHandler(object sender, @__cToolbar_FireMenuCommandEvent e);
    
    public class @__cToolbar_FireMenuCommandEvent {
        
        public string sButtonKey;
        
        public @__cToolbar_FireMenuCommandEvent(string sButtonKey) {
            this.sButtonKey = sButtonKey;
        }
    }
    
    public delegate void @__cToolbar_FireRefreshPortalEventHandler(object sender, @__cToolbar_FireRefreshPortalEvent e);
    
    public class @__cToolbar_FireRefreshPortalEvent {
        
        public int lType;
        
        public @__cToolbar_FireRefreshPortalEvent(int lType) {
            this.lType = lType;
        }
    }
    
    public delegate void @__cToolbar_DropDownPressEventHandler(object sender, @__cToolbar_DropDownPressEvent e);
    
    public class @__cToolbar_DropDownPressEvent {
        
        public int lButton;
        
        public @__cToolbar_DropDownPressEvent(int lButton) {
            this.lButton = lButton;
        }
    }
    
    public delegate void @__cToolbar_HotItemChangeEventHandler(object sender, @__cToolbar_HotItemChangeEvent e);
    
    public class @__cToolbar_HotItemChangeEvent {
        
        public int iNew;
        
        public int iOld;
        
        public UFToolBarCtrl.ECTBHotItemChangeReasonConstants eReason;
        
        public @__cToolbar_HotItemChangeEvent(int iNew, int iOld, UFToolBarCtrl.ECTBHotItemChangeReasonConstants eReason) {
            this.iNew = iNew;
            this.iOld = iOld;
            this.eReason = eReason;
        }
    }
    
    public delegate void @__cToolbar_CustomiseCanInsertBeforeEventHandler(object sender, @__cToolbar_CustomiseCanInsertBeforeEvent e);
    
    public class @__cToolbar_CustomiseCanInsertBeforeEvent {
        
        public int lButton;
        
        public bool bCanInsert;
        
        public @__cToolbar_CustomiseCanInsertBeforeEvent(int lButton, bool bCanInsert) {
            this.lButton = lButton;
            this.bCanInsert = bCanInsert;
        }
    }
    
    public delegate void @__cToolbar_CustomiseCanDeleteEventHandler(object sender, @__cToolbar_CustomiseCanDeleteEvent e);
    
    public class @__cToolbar_CustomiseCanDeleteEvent {
        
        public int lButton;
        
        public bool bCanDelete;
        
        public @__cToolbar_CustomiseCanDeleteEvent(int lButton, bool bCanDelete) {
            this.lButton = lButton;
            this.bCanDelete = bCanDelete;
        }
    }
    
    public delegate void @__cToolbar_HotKeyPressEventHandler(object sender, @__cToolbar_HotKeyPressEvent e);
    
    public class @__cToolbar_HotKeyPressEvent {
        
        public VBRUN.KeyCodeConstants eKeyCode;
        
        public bool bKeyUp;
        
        public bool bAlt;
        
        public bool bShift;
        
        public bool bCtrl;
        
        public @__cToolbar_HotKeyPressEvent(VBRUN.KeyCodeConstants eKeyCode, bool bKeyUp, bool bAlt, bool bShift, bool bCtrl) {
            this.eKeyCode = eKeyCode;
            this.bKeyUp = bKeyUp;
            this.bAlt = bAlt;
            this.bShift = bShift;
            this.bCtrl = bCtrl;
        }
    }
    
    public delegate void @__cToolbar_MouseDownEventHandler(object sender, @__cToolbar_MouseDownEvent e);
    
    public class @__cToolbar_MouseDownEvent {
        
        public short button;
        
        public short shift;
        
        public float x;
        
        public float y;
        
        public @__cToolbar_MouseDownEvent(short button, short shift, float x, float y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void @__cToolbar_MouseMoveEventHandler(object sender, @__cToolbar_MouseMoveEvent e);
    
    public class @__cToolbar_MouseMoveEvent {
        
        public short button;
        
        public short shift;
        
        public float x;
        
        public float y;
        
        public @__cToolbar_MouseMoveEvent(short button, short shift, float x, float y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void @__cToolbar_MouseUpEventHandler(object sender, @__cToolbar_MouseUpEvent e);
    
    public class @__cToolbar_MouseUpEvent {
        
        public short button;
        
        public short shift;
        
        public float x;
        
        public float y;
        
        public @__cToolbar_MouseUpEvent(short button, short shift, float x, float y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void @__cToolbar_ButtonChangeEventHandler(object sender, @__cToolbar_ButtonChangeEvent e);
    
    public class @__cToolbar_ButtonChangeEvent {
        
        public int lIndex;
        
        public string sKey;
        
        public @__cToolbar_ButtonChangeEvent(int lIndex, string sKey) {
            this.lIndex = lIndex;
            this.sKey = sKey;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxcToolbarEventMulticaster : UFToolBarCtrl.@__cToolbar {
        
        private AxcToolbar parent;
        
        public AxcToolbarEventMulticaster(AxcToolbar parent) {
            this.parent = parent;
        }
        
        public virtual void ButtonClick(int lButton) {
            @__cToolbar_ButtonClickEvent buttonclickEvent = new @__cToolbar_ButtonClickEvent(lButton);
            this.parent.RaiseOnButtonClick(this.parent, buttonclickEvent);
        }
        
        public virtual void FireCommand(string sButtonKey) {
            @__cToolbar_FireCommandEvent firecommandEvent = new @__cToolbar_FireCommandEvent(sButtonKey);
            this.parent.RaiseOnFireCommand(this.parent, firecommandEvent);
        }
        
        public virtual void FireCheckChange(string sButtonKey) {
            @__cToolbar_FireCheckChangeEvent firecheckchangeEvent = new @__cToolbar_FireCheckChangeEvent(sButtonKey);
            this.parent.RaiseOnFireCheckChange(this.parent, firecheckchangeEvent);
        }
        
        public virtual void FireMenuCommand(string sButtonKey) {
            @__cToolbar_FireMenuCommandEvent firemenucommandEvent = new @__cToolbar_FireMenuCommandEvent(sButtonKey);
            this.parent.RaiseOnFireMenuCommand(this.parent, firemenucommandEvent);
        }
        
        public virtual void FireRefreshPortal(int lType) {
            @__cToolbar_FireRefreshPortalEvent firerefreshportalEvent = new @__cToolbar_FireRefreshPortalEvent(lType);
            this.parent.RaiseOnFireRefreshPortal(this.parent, firerefreshportalEvent);
        }
        
        public virtual void DropDownPress(int lButton) {
            @__cToolbar_DropDownPressEvent dropdownpressEvent = new @__cToolbar_DropDownPressEvent(lButton);
            this.parent.RaiseOnDropDownPress(this.parent, dropdownpressEvent);
        }
        
        public virtual void HotItemChange(int iNew, int iOld, UFToolBarCtrl.ECTBHotItemChangeReasonConstants eReason) {
            @__cToolbar_HotItemChangeEvent hotitemchangeEvent = new @__cToolbar_HotItemChangeEvent(iNew, iOld, eReason);
            this.parent.RaiseOnHotItemChange(this.parent, hotitemchangeEvent);
        }
        
        public virtual void CustomiseBegin() {
            System.EventArgs customisebeginEvent = new System.EventArgs();
            this.parent.RaiseOnCustomiseBegin(this.parent, customisebeginEvent);
        }
        
        public virtual void CustomiseCanInsertBefore(int lButton, ref bool bCanInsert) {
            @__cToolbar_CustomiseCanInsertBeforeEvent customisecaninsertbeforeEvent = new @__cToolbar_CustomiseCanInsertBeforeEvent(lButton, bCanInsert);
            this.parent.RaiseOnCustomiseCanInsertBefore(this.parent, customisecaninsertbeforeEvent);
            bCanInsert = customisecaninsertbeforeEvent.bCanInsert;
        }
        
        public virtual void CustomiseCanDelete(int lButton, ref bool bCanDelete) {
            @__cToolbar_CustomiseCanDeleteEvent customisecandeleteEvent = new @__cToolbar_CustomiseCanDeleteEvent(lButton, bCanDelete);
            this.parent.RaiseOnCustomiseCanDelete(this.parent, customisecandeleteEvent);
            bCanDelete = customisecandeleteEvent.bCanDelete;
        }
        
        public virtual void CustomiseHelpPressed() {
            System.EventArgs customisehelppressedEvent = new System.EventArgs();
            this.parent.RaiseOnCustomiseHelpPressed(this.parent, customisehelppressedEvent);
        }
        
        public virtual void CustomiseResetPressed() {
            System.EventArgs customiseresetpressedEvent = new System.EventArgs();
            this.parent.RaiseOnCustomiseResetPressed(this.parent, customiseresetpressedEvent);
        }
        
        public virtual void HotKeyPress(VBRUN.KeyCodeConstants eKeyCode, bool bKeyUp, bool bAlt, bool bShift, bool bCtrl) {
            @__cToolbar_HotKeyPressEvent hotkeypressEvent = new @__cToolbar_HotKeyPressEvent(eKeyCode, bKeyUp, bAlt, bShift, bCtrl);
            this.parent.RaiseOnHotKeyPress(this.parent, hotkeypressEvent);
        }
        
        public virtual void MouseDown(ref short button, ref short shift, ref float x, ref float y) {
            @__cToolbar_MouseDownEvent mousedownEvent = new @__cToolbar_MouseDownEvent(button, shift, x, y);
            this.parent.RaiseOnMouseDownEvent(this.parent, mousedownEvent);
            button = mousedownEvent.button;
            shift = mousedownEvent.shift;
            x = mousedownEvent.x;
            y = mousedownEvent.y;
        }
        
        public virtual void MouseMove(ref short button, ref short shift, ref float x, ref float y) {
            @__cToolbar_MouseMoveEvent mousemoveEvent = new @__cToolbar_MouseMoveEvent(button, shift, x, y);
            this.parent.RaiseOnMouseMoveEvent(this.parent, mousemoveEvent);
            button = mousemoveEvent.button;
            shift = mousemoveEvent.shift;
            x = mousemoveEvent.x;
            y = mousemoveEvent.y;
        }
        
        public virtual void MouseUp(ref short button, ref short shift, ref float x, ref float y) {
            @__cToolbar_MouseUpEvent mouseupEvent = new @__cToolbar_MouseUpEvent(button, shift, x, y);
            this.parent.RaiseOnMouseUpEvent(this.parent, mouseupEvent);
            button = mouseupEvent.button;
            shift = mouseupEvent.shift;
            x = mouseupEvent.x;
            y = mouseupEvent.y;
        }
        
        public virtual void ButtonChange(int lIndex, ref string sKey) {
            @__cToolbar_ButtonChangeEvent buttonchangeEvent = new @__cToolbar_ButtonChangeEvent(lIndex, sKey);
            this.parent.RaiseOnButtonChange(this.parent, buttonchangeEvent);
            sKey = buttonchangeEvent.sKey;
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{575d1633-6e38-4d55-9de3-3c0cd6678b96}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("OnCommand")]
    public class AxUFToolbar : System.Windows.Forms.AxHost {
        
        private UFToolBarCtrl._UFToolbar ocx;
        
        private AxUFToolbarEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxUFToolbar() : 
                base("575d1633-6e38-4d55-9de3-3c0cd6678b96") {
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027099)]
        public virtual int CtlBackColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlBackColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.BackColor;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlBackColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BackColor = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027098)]
        public virtual int CtlForeColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlForeColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ForeColor;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlForeColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ForeColor = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027097)]
        public virtual bool CtlEnabled {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Enabled;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Enabled = value;
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-512)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("stdole.StdFont")]
        public override System.Drawing.Font Font {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return GetFontFromIFont(this.ocx.Font);
                }
                else {
                    return base.Font;
                }
            }
            set {
                base.Font = value;
                if ((this.ocx != null)) {
                    this.ocx.Font = ((stdole.StdFont)(GetIFontFromFont(value)));
                }
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027096)]
        public virtual short BackStyle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BackStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.BackStyle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BackStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BackStyle = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027095)]
        public virtual short BorderStyle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BorderStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.BorderStyle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BorderStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BorderStyle = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027092)]
        public virtual short ToolbarHeight {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ToolbarHeight", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ToolbarHeight;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027091)]
        public virtual short ToolbarWidth {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ToolbarWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ToolbarWidth;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027160)]
        public virtual bool Wrappable {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Wrappable", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Wrappable;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Wrappable", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Wrappable = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027244)]
        public virtual object RealToolbar {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RealToolbar", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.RealToolbar;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027413)]
        public virtual int MsToolbarAddress {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MsToolbarAddress", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MsToolbarAddress;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027490)]
        public virtual string formCode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("formCode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.formCode;
            }
        }
        
        public event @__UFToolbar_OnSelectedIndexChangedEventHandler OnSelectedIndexChanged;
        
        public event @__UFToolbar_OnCommandEventHandler OnCommand;
        
        public event @__UFToolbar_OnPreCommandEventHandler OnPreCommand;
        
        public event System.EventHandler ClickEvent;
        
        public event System.EventHandler DblClick;
        
        public event @__UFToolbar_KeyDownEventHandler KeyDownEvent;
        
        public event @__UFToolbar_KeyPressEventHandler KeyPressEvent;
        
        public event @__UFToolbar_KeyUpEventHandler KeyUpEvent;
        
        public event @__UFToolbar_MouseDownEventHandler MouseDownEvent;
        
        public event @__UFToolbar_MouseMoveEventHandler MouseMoveEvent;
        
        public event @__UFToolbar_MouseUpEventHandler MouseUpEvent;
        
        public virtual UFToolBarCtrl.ECTBToolButtonSyle get_ButtonStyle() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ButtonStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            UFToolBarCtrl.ECTBToolButtonSyle returnValue = ((UFToolBarCtrl.ECTBToolButtonSyle)(this.ocx.get_ButtonStyle()));
            return returnValue;
        }
        
        public virtual void set_ButtonStyle(ref UFToolBarCtrl.ECTBToolButtonSyle param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ButtonStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ButtonStyle(ref param0);
        }
        
        public virtual UFToolBarCtrl.UFToolbarStyle get_ToolbarStyle() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ToolbarStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            UFToolBarCtrl.UFToolbarStyle returnValue = ((UFToolBarCtrl.UFToolbarStyle)(this.ocx.get_ToolbarStyle()));
            return returnValue;
        }
        
        public virtual void set_ToolbarStyle(ref UFToolBarCtrl.UFToolbarStyle param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ToolbarStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ToolbarStyle(ref param0);
        }
        
        public virtual string get_HotKeyTip() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_HotKeyTip", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_HotKeyTip()));
            return returnValue;
        }
        
        public virtual void set_HotKeyTip(ref string param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_HotKeyTip", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_HotKeyTip(ref param0);
        }
        
        public virtual object SetPopMenuImageList(ref object imglist) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetPopMenuImageList", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.SetPopMenuImageList(ref imglist)));
            return returnValue;
        }
        
        public virtual void Refresh() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Refresh", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Refresh();
        }
        
        public virtual void SetToolbar(object oToolbar) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetToolbar", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetToolbar(oToolbar);
        }
        
        public virtual void SetDisplayStyle(UFToolBarCtrl.ENUM_DISPLAYSTYLE enumStyle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetDisplayStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetDisplayStyle(enumStyle);
        }
        
        public virtual void RefreshVisible() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RefreshVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.RefreshVisible(((bool)(true)));
        }
        
        public virtual void RefreshVisible(bool bChangeEnableAndCheckState) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RefreshVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.RefreshVisible(bChangeEnableAndCheckState);
        }
        
        public virtual void RefreshEnable() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RefreshEnable", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.RefreshEnable();
        }
        
        public virtual void SaveToolbarStyle(ref UFToolBarCtrl.ENUM_DISPLAYSTYLE enumStyle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SaveToolbarStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SaveToolbarStyle(ref enumStyle);
        }
        
        public virtual void SetButtonEnable(ref int nIndex, ref bool bEnable) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetButtonEnable", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetButtonEnable(ref nIndex, ref bEnable);
        }
        
        public virtual void SetButtonVisible(ref int nIndex, ref bool bVisible) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetButtonVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetButtonVisible(ref nIndex, ref bVisible);
        }
        
        public virtual void SetStyle(ref int nIndex) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetStyle(ref nIndex);
        }
        
        public virtual UFToolBarCtrl.ENUM_DISPLAYSTYLE GetToolbarStyle() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetToolbarStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            UFToolBarCtrl.ENUM_DISPLAYSTYLE returnValue = ((UFToolBarCtrl.ENUM_DISPLAYSTYLE)(this.ocx.GetToolbarStyle()));
            return returnValue;
        }
        
        public virtual bool get_SpecialEffect() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_SpecialEffect", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_SpecialEffect()));
            return returnValue;
        }
        
        public virtual void set_SpecialEffect(ref bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_SpecialEffect", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_SpecialEffect(ref param0);
        }
        
        public virtual void RefreshChecked() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RefreshChecked", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.RefreshChecked();
        }
        
        public virtual void SetButtonChecked(ref int nIndex, ref bool bChecked) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetButtonChecked", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetButtonChecked(ref nIndex, ref bChecked);
        }
        
        public virtual string get_ButtonCaption(object vButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ButtonCaption", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_ButtonCaption(vButton)));
            return returnValue;
        }
        
        public virtual void set_ButtonCaption(object vButton, ref string param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ButtonCaption", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ButtonCaption(vButton, ref param0);
        }
        
        public virtual string get_ButtonTooltip(ref object vButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ButtonTooltip", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_ButtonTooltip(ref vButton)));
            return returnValue;
        }
        
        public virtual void set_ButtonTooltip(ref object vButton, ref string param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ButtonTooltip", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ButtonTooltip(ref vButton, ref param0);
        }
        
        public virtual int get_ButtonLeft(object vButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ButtonLeft", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_ButtonLeft(vButton)));
            return returnValue;
        }
        
        public virtual int get_ButtonHeight(object vButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ButtonHeight", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_ButtonHeight(vButton)));
            return returnValue;
        }
        
        public virtual int get_ButtonTop(object vButton) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ButtonTop", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_ButtonTop(vButton)));
            return returnValue;
        }
        
        public virtual void RefreshImages() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RefreshImages", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.RefreshImages();
        }
        
        public virtual void UFToolbarResize() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UFToolbarResize", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.UFToolbarResize();
        }
        
        public virtual string ConvertCaption(ref string sCap) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ConvertCaption", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.ConvertCaption(ref sCap)));
            return returnValue;
        }
        
        public virtual void set_CloseChevronWindowPriority(ref bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_CloseChevronWindowPriority", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_CloseChevronWindowPriority(ref param0);
        }
        
        public virtual void send() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("send", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.send();
        }
        
        public virtual void initBacchusRef() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("initBacchusRef", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.initBacchusRef();
        }
        
        public virtual void set_AlwaysDisplayButtonStr(ref string param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_AlwaysDisplayButtonStr", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_AlwaysDisplayButtonStr(ref param0);
        }
        
        public virtual string get_AlwaysDisplayButtonStr() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_AlwaysDisplayButtonStr", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_AlwaysDisplayButtonStr()));
            return returnValue;
        }
        
        public virtual void RaiseOnCommandEvent(UFToolBarCtrl.ENUM_MENU_OR_BUTTON enumType, string cButtonId, string cMenuId) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RaiseOnCommandEvent", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.RaiseOnCommandEvent(enumType, cButtonId, cMenuId);
        }
        
        public virtual object get_Business() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_Business", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.get_Business()));
            return returnValue;
        }
        
        public virtual void set_Business(ref object param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_Business", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_Business(ref param0);
        }
        
        public virtual bool get_IsLoadRefreshable() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_IsLoadRefreshable", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_IsLoadRefreshable()));
            return returnValue;
        }
        
        public virtual void set_IsLoadRefreshable(ref bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_IsLoadRefreshable", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_IsLoadRefreshable(ref param0);
        }
        
        public virtual bool InitExternalButton(string voucherCardNum, object oLogin) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("InitExternalButton", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    voucherCardNum,
                    oLogin,
                    "",
                    ((bool)(false))};
            System.Type typeVar = typeof(UFToolBarCtrl._UFToolbar);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("InitExternalButton");
            bool returnValue = ((bool)(methodToInvoke.Invoke(this.ocx, paramArray)));
            return returnValue;
        }
        
        public virtual bool InitExternalButton(string voucherCardNum, object oLogin, string formkey, ref bool isWeb) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("InitExternalButton", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.InitExternalButton(voucherCardNum, oLogin, formkey, ref isWeb)));
            return returnValue;
        }
        
        public virtual object SetFormInfo(object oVoucher, object oForm) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetFormInfo", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.SetFormInfo(oVoucher, oForm)));
            return returnValue;
        }
        
        public virtual string get_ButtonVariant(object key) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ButtonVariant", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_ButtonVariant(key)));
            return returnValue;
        }
        
        public virtual void InitExButtonCom() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("InitExButtonCom", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.InitExButtonCom();
        }
        
        public virtual void FireCommand(string sButtonKey) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FireCommand", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.FireCommand(sButtonKey);
        }
        
        public virtual void FireMenuCommand(string sMenuKey) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FireMenuCommand", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.FireMenuCommand(sMenuKey);
        }
        
        public virtual void ButtonClick(string buttonKey) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ButtonClick", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ButtonClick(buttonKey);
        }
        
        public virtual void MenuClick(string menuKey) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MenuClick", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.MenuClick(menuKey);
        }
        
        public virtual void Settoolbarfromdata(ref object oMSToolBar, ref ADODB.Connection cN, ref object oLogin, ref string sFormKey, ref string sSubKey) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Settoolbarfromdata", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    oMSToolBar,
                    cN,
                    oLogin,
                    sFormKey,
                    sSubKey,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(UFToolBarCtrl._UFToolbar);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("Settoolbarfromdata");
            methodToInvoke.Invoke(this.ocx, paramArray);
            oMSToolBar = ((object)(paramArray[0]));
            cN = ((ADODB.Connection)(paramArray[1]));
            oLogin = ((object)(paramArray[2]));
            sFormKey = ((string)(paramArray[3]));
            sSubKey = ((string)(paramArray[4]));
        }
        
        public virtual void Settoolbarfromdata(ref object oMSToolBar, ref ADODB.Connection cN, ref object oLogin, ref string sFormKey, ref string sSubKey, ref object oVouchers) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Settoolbarfromdata", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Settoolbarfromdata(ref oMSToolBar, ref cN, ref oLogin, ref sFormKey, ref sSubKey, ref oVouchers);
        }
        
        public virtual object GetTob(string key) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetTob", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.GetTob(key)));
            return returnValue;
        }
        
        public virtual object AddButton(ref UFToolBarCtrl.Button button) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddButton", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.AddButton(ref button)));
            return returnValue;
        }
        
        public virtual void BeginRefresh() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BeginRefresh", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.BeginRefresh();
        }
        
        public virtual void EndRefresh() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EndRefresh", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.EndRefresh();
        }
        
        public virtual object AddButtonMenu(string key, string caption, string parentKey, ref object varentMenus) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddButtonMenu", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    key,
                    caption,
                    parentKey,
                    varentMenus,
                    ((short)(-1)),
                    "",
                    ""};
            System.Type typeVar = typeof(UFToolBarCtrl._UFToolbar);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("AddButtonMenu");
            object returnValue = ((object)(methodToInvoke.Invoke(this.ocx, paramArray)));
            varentMenus = ((object)(paramArray[3]));
            return returnValue;
        }
        
        public virtual object AddButtonMenu(string key, string caption, string parentKey, ref object varentMenus, short index, string processObjectName, string functionKey) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddButtonMenu", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.AddButtonMenu(key, caption, parentKey, ref varentMenus, index, processObjectName, functionKey)));
            return returnValue;
        }
        
        public virtual void FireSysCommand(UFToolBarCtrl.ENUM_MENU_OR_BUTTON enumType, string sButtonKey) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FireSysCommand", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.FireSysCommand(enumType, sButtonKey);
        }
        
        public virtual void RefreshCombobox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RefreshCombobox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.RefreshCombobox();
        }
        
        public virtual void SimulateOnCommand(UFToolBarCtrl.ENUM_MENU_OR_BUTTON enumType, string sButtonKey) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SimulateOnCommand", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    enumType,
                    sButtonKey,
                    ""};
            System.Type typeVar = typeof(UFToolBarCtrl._UFToolbar);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("SimulateOnCommand");
            methodToInvoke.Invoke(this.ocx, paramArray);
        }
        
        public virtual void SimulateOnCommand(UFToolBarCtrl.ENUM_MENU_OR_BUTTON enumType, string sButtonKey, string sMenuKey) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SimulateOnCommand", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SimulateOnCommand(enumType, sButtonKey, sMenuKey);
        }
        
        public virtual void SetToolbarFromRecordSet(ref object oMSToolBar, ref object oLogin, ref object rs, ref string sFormKey, ref string sSubKey) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetToolbarFromRecordSet", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    oMSToolBar,
                    oLogin,
                    rs,
                    sFormKey,
                    sSubKey,
                    "",
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(UFToolBarCtrl._UFToolbar);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("SetToolbarFromRecordSet");
            methodToInvoke.Invoke(this.ocx, paramArray);
            oMSToolBar = ((object)(paramArray[0]));
            oLogin = ((object)(paramArray[1]));
            rs = ((object)(paramArray[2]));
            sFormKey = ((string)(paramArray[3]));
            sSubKey = ((string)(paramArray[4]));
        }
        
        public virtual void SetToolbarFromRecordSet(ref object oMSToolBar, ref object oLogin, ref object rs, ref string sFormKey, ref string sSubKey, ref string toolbarConfigXml, ref object oVouchers) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetToolbarFromRecordSet", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetToolbarFromRecordSet(ref oMSToolBar, ref oLogin, ref rs, ref sFormKey, ref sSubKey, ref toolbarConfigXml, ref oVouchers);
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxUFToolbarEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(UFToolBarCtrl.@__UFToolbar));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((UFToolBarCtrl._UFToolbar)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnOnSelectedIndexChanged(object sender, @__UFToolbar_OnSelectedIndexChangedEvent e) {
            if ((this.OnSelectedIndexChanged != null)) {
                this.OnSelectedIndexChanged(sender, e);
            }
        }
        
        internal void RaiseOnOnCommand(object sender, @__UFToolbar_OnCommandEvent e) {
            if ((this.OnCommand != null)) {
                this.OnCommand(sender, e);
            }
        }
        
        internal void RaiseOnOnPreCommand(object sender, @__UFToolbar_OnPreCommandEvent e) {
            if ((this.OnPreCommand != null)) {
                this.OnPreCommand(sender, e);
            }
        }
        
        internal void RaiseOnClickEvent(object sender, System.EventArgs e) {
            if ((this.ClickEvent != null)) {
                this.ClickEvent(sender, e);
            }
        }
        
        internal void RaiseOnDblClick(object sender, System.EventArgs e) {
            if ((this.DblClick != null)) {
                this.DblClick(sender, e);
            }
        }
        
        internal void RaiseOnKeyDownEvent(object sender, @__UFToolbar_KeyDownEvent e) {
            if ((this.KeyDownEvent != null)) {
                this.KeyDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyPressEvent(object sender, @__UFToolbar_KeyPressEvent e) {
            if ((this.KeyPressEvent != null)) {
                this.KeyPressEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyUpEvent(object sender, @__UFToolbar_KeyUpEvent e) {
            if ((this.KeyUpEvent != null)) {
                this.KeyUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseDownEvent(object sender, @__UFToolbar_MouseDownEvent e) {
            if ((this.MouseDownEvent != null)) {
                this.MouseDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseMoveEvent(object sender, @__UFToolbar_MouseMoveEvent e) {
            if ((this.MouseMoveEvent != null)) {
                this.MouseMoveEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseUpEvent(object sender, @__UFToolbar_MouseUpEvent e) {
            if ((this.MouseUpEvent != null)) {
                this.MouseUpEvent(sender, e);
            }
        }
    }
    
    public delegate void @__UFToolbar_OnSelectedIndexChangedEventHandler(object sender, @__UFToolbar_OnSelectedIndexChangedEvent e);
    
    public class @__UFToolbar_OnSelectedIndexChangedEvent {
        
        public UFToolBarCtrl.ENUM_MENU_OR_BUTTON enumType;
        
        public string cButtonId;
        
        public string cMenuId;
        
        public short iSelectedIndex;
        
        public @__UFToolbar_OnSelectedIndexChangedEvent(UFToolBarCtrl.ENUM_MENU_OR_BUTTON enumType, string cButtonId, string cMenuId, short iSelectedIndex) {
            this.enumType = enumType;
            this.cButtonId = cButtonId;
            this.cMenuId = cMenuId;
            this.iSelectedIndex = iSelectedIndex;
        }
    }
    
    public delegate void @__UFToolbar_OnCommandEventHandler(object sender, @__UFToolbar_OnCommandEvent e);
    
    public class @__UFToolbar_OnCommandEvent {
        
        public UFToolBarCtrl.ENUM_MENU_OR_BUTTON enumType;
        
        public string cButtonId;
        
        public string cMenuId;
        
        public @__UFToolbar_OnCommandEvent(UFToolBarCtrl.ENUM_MENU_OR_BUTTON enumType, string cButtonId, string cMenuId) {
            this.enumType = enumType;
            this.cButtonId = cButtonId;
            this.cMenuId = cMenuId;
        }
    }
    
    public delegate void @__UFToolbar_OnPreCommandEventHandler(object sender, @__UFToolbar_OnPreCommandEvent e);
    
    public class @__UFToolbar_OnPreCommandEvent {
        
        public UFToolBarCtrl.ENUM_MENU_OR_BUTTON enumType;
        
        public string cButtonId;
        
        public string cMenuId;
        
        public @__UFToolbar_OnPreCommandEvent(UFToolBarCtrl.ENUM_MENU_OR_BUTTON enumType, string cButtonId, string cMenuId) {
            this.enumType = enumType;
            this.cButtonId = cButtonId;
            this.cMenuId = cMenuId;
        }
    }
    
    public delegate void @__UFToolbar_KeyDownEventHandler(object sender, @__UFToolbar_KeyDownEvent e);
    
    public class @__UFToolbar_KeyDownEvent {
        
        public short keyCode;
        
        public short shift;
        
        public @__UFToolbar_KeyDownEvent(short keyCode, short shift) {
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void @__UFToolbar_KeyPressEventHandler(object sender, @__UFToolbar_KeyPressEvent e);
    
    public class @__UFToolbar_KeyPressEvent {
        
        public short keyAscii;
        
        public @__UFToolbar_KeyPressEvent(short keyAscii) {
            this.keyAscii = keyAscii;
        }
    }
    
    public delegate void @__UFToolbar_KeyUpEventHandler(object sender, @__UFToolbar_KeyUpEvent e);
    
    public class @__UFToolbar_KeyUpEvent {
        
        public short keyCode;
        
        public short shift;
        
        public @__UFToolbar_KeyUpEvent(short keyCode, short shift) {
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void @__UFToolbar_MouseDownEventHandler(object sender, @__UFToolbar_MouseDownEvent e);
    
    public class @__UFToolbar_MouseDownEvent {
        
        public short button;
        
        public short shift;
        
        public float x;
        
        public float y;
        
        public @__UFToolbar_MouseDownEvent(short button, short shift, float x, float y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void @__UFToolbar_MouseMoveEventHandler(object sender, @__UFToolbar_MouseMoveEvent e);
    
    public class @__UFToolbar_MouseMoveEvent {
        
        public short button;
        
        public short shift;
        
        public float x;
        
        public float y;
        
        public @__UFToolbar_MouseMoveEvent(short button, short shift, float x, float y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void @__UFToolbar_MouseUpEventHandler(object sender, @__UFToolbar_MouseUpEvent e);
    
    public class @__UFToolbar_MouseUpEvent {
        
        public short button;
        
        public short shift;
        
        public float x;
        
        public float y;
        
        public @__UFToolbar_MouseUpEvent(short button, short shift, float x, float y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxUFToolbarEventMulticaster : UFToolBarCtrl.@__UFToolbar {
        
        private AxUFToolbar parent;
        
        public AxUFToolbarEventMulticaster(AxUFToolbar parent) {
            this.parent = parent;
        }
        
        public virtual void OnSelectedIndexChanged(UFToolBarCtrl.ENUM_MENU_OR_BUTTON enumType, string cButtonId, string cMenuId, short iSelectedIndex) {
            @__UFToolbar_OnSelectedIndexChangedEvent onselectedindexchangedEvent = new @__UFToolbar_OnSelectedIndexChangedEvent(enumType, cButtonId, cMenuId, iSelectedIndex);
            this.parent.RaiseOnOnSelectedIndexChanged(this.parent, onselectedindexchangedEvent);
        }
        
        public virtual void OnCommand(UFToolBarCtrl.ENUM_MENU_OR_BUTTON enumType, string cButtonId, string cMenuId) {
            @__UFToolbar_OnCommandEvent oncommandEvent = new @__UFToolbar_OnCommandEvent(enumType, cButtonId, cMenuId);
            this.parent.RaiseOnOnCommand(this.parent, oncommandEvent);
        }
        
        public virtual void OnPreCommand(UFToolBarCtrl.ENUM_MENU_OR_BUTTON enumType, string cButtonId, string cMenuId) {
            @__UFToolbar_OnPreCommandEvent onprecommandEvent = new @__UFToolbar_OnPreCommandEvent(enumType, cButtonId, cMenuId);
            this.parent.RaiseOnOnPreCommand(this.parent, onprecommandEvent);
        }
        
        public virtual void Click() {
            System.EventArgs clickEvent = new System.EventArgs();
            this.parent.RaiseOnClickEvent(this.parent, clickEvent);
        }
        
        public virtual void DblClick() {
            System.EventArgs dblclickEvent = new System.EventArgs();
            this.parent.RaiseOnDblClick(this.parent, dblclickEvent);
        }
        
        public virtual void KeyDown(ref short keyCode, ref short shift) {
            @__UFToolbar_KeyDownEvent keydownEvent = new @__UFToolbar_KeyDownEvent(keyCode, shift);
            this.parent.RaiseOnKeyDownEvent(this.parent, keydownEvent);
            keyCode = keydownEvent.keyCode;
            shift = keydownEvent.shift;
        }
        
        public virtual void KeyPress(ref short keyAscii) {
            @__UFToolbar_KeyPressEvent keypressEvent = new @__UFToolbar_KeyPressEvent(keyAscii);
            this.parent.RaiseOnKeyPressEvent(this.parent, keypressEvent);
            keyAscii = keypressEvent.keyAscii;
        }
        
        public virtual void KeyUp(ref short keyCode, ref short shift) {
            @__UFToolbar_KeyUpEvent keyupEvent = new @__UFToolbar_KeyUpEvent(keyCode, shift);
            this.parent.RaiseOnKeyUpEvent(this.parent, keyupEvent);
            keyCode = keyupEvent.keyCode;
            shift = keyupEvent.shift;
        }
        
        public virtual void MouseDown(ref short button, ref short shift, ref float x, ref float y) {
            @__UFToolbar_MouseDownEvent mousedownEvent = new @__UFToolbar_MouseDownEvent(button, shift, x, y);
            this.parent.RaiseOnMouseDownEvent(this.parent, mousedownEvent);
            button = mousedownEvent.button;
            shift = mousedownEvent.shift;
            x = mousedownEvent.x;
            y = mousedownEvent.y;
        }
        
        public virtual void MouseMove(ref short button, ref short shift, ref float x, ref float y) {
            @__UFToolbar_MouseMoveEvent mousemoveEvent = new @__UFToolbar_MouseMoveEvent(button, shift, x, y);
            this.parent.RaiseOnMouseMoveEvent(this.parent, mousemoveEvent);
            button = mousemoveEvent.button;
            shift = mousemoveEvent.shift;
            x = mousemoveEvent.x;
            y = mousemoveEvent.y;
        }
        
        public virtual void MouseUp(ref short button, ref short shift, ref float x, ref float y) {
            @__UFToolbar_MouseUpEvent mouseupEvent = new @__UFToolbar_MouseUpEvent(button, shift, x, y);
            this.parent.RaiseOnMouseUpEvent(this.parent, mouseupEvent);
            button = mouseupEvent.button;
            shift = mouseupEvent.shift;
            x = mouseupEvent.x;
            y = mouseupEvent.y;
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{3f71e876-d55d-4944-a8db-500e1a77079c}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("OnCommand")]
    public class AxUFSubToolbar : System.Windows.Forms.AxHost {
        
        private UFToolBarCtrl._UFSubToolbar ocx;
        
        private AxUFSubToolbarEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxUFSubToolbar() : 
                base("3f71e876-d55d-4944-a8db-500e1a77079c") {
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027077)]
        public virtual int CtlBackColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlBackColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.BackColor;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlBackColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BackColor = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027076)]
        public virtual int CtlForeColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlForeColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ForeColor;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlForeColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ForeColor = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027075)]
        public virtual short BorderStyle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BorderStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.BorderStyle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BorderStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BorderStyle = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027074)]
        public virtual int tobAddress {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("tobAddress", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.tobAddress = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027072)]
        public virtual int MsToolbarAddress {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MsToolbarAddress", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MsToolbarAddress = value;
            }
        }
        
        public event @__UFSubToolbar_OnCommandEventHandler OnCommand;
        
        public event @__UFSubToolbar_CheckBoxButtonChangeEventHandler CheckBoxButtonChange;
        
        public virtual void SetToolbar(VBA.Collection buttons) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetToolbar", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    buttons,
                    ""};
            System.Type typeVar = typeof(UFToolBarCtrl._UFSubToolbar);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("SetToolbar");
            methodToInvoke.Invoke(this.ocx, paramArray);
        }
        
        public virtual void SetToolbar(VBA.Collection buttons, ref string strVoucherIndex) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetToolbar", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetToolbar(buttons, ref strVoucherIndex);
        }
        
        public virtual void RefreshButtons(VBA.Collection buttons) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RefreshButtons", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.RefreshButtons(buttons);
        }
        
        public virtual void set_CloseChevronWindowPriority(ref bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_CloseChevronWindowPriority", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_CloseChevronWindowPriority(ref param0);
        }
        
        public virtual void Resize() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Resize", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Resize();
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxUFSubToolbarEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(UFToolBarCtrl.@__UFSubToolbar));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((UFToolBarCtrl._UFSubToolbar)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnOnCommand(object sender, @__UFSubToolbar_OnCommandEvent e) {
            if ((this.OnCommand != null)) {
                this.OnCommand(sender, e);
            }
        }
        
        internal void RaiseOnCheckBoxButtonChange(object sender, @__UFSubToolbar_CheckBoxButtonChangeEvent e) {
            if ((this.CheckBoxButtonChange != null)) {
                this.CheckBoxButtonChange(sender, e);
            }
        }
    }
    
    public delegate void @__UFSubToolbar_OnCommandEventHandler(object sender, @__UFSubToolbar_OnCommandEvent e);
    
    public class @__UFSubToolbar_OnCommandEvent {
        
        public UFToolBarCtrl.ENUM_MENU_OR_BUTTON enumType;
        
        public string cButtonId;
        
        public string cMenuId;
        
        public @__UFSubToolbar_OnCommandEvent(UFToolBarCtrl.ENUM_MENU_OR_BUTTON enumType, string cButtonId, string cMenuId) {
            this.enumType = enumType;
            this.cButtonId = cButtonId;
            this.cMenuId = cMenuId;
        }
    }
    
    public delegate void @__UFSubToolbar_CheckBoxButtonChangeEventHandler(object sender, @__UFSubToolbar_CheckBoxButtonChangeEvent e);
    
    public class @__UFSubToolbar_CheckBoxButtonChangeEvent {
        
        public UFToolBarCtrl.ENUM_MENU_OR_BUTTON enumType;
        
        public string cButtonKey;
        
        public string cMenuKey;
        
        public object cVarientValue;
        
        public object bMenu;
        
        public bool bCheck;
        
        public @__UFSubToolbar_CheckBoxButtonChangeEvent(UFToolBarCtrl.ENUM_MENU_OR_BUTTON enumType, string cButtonKey, string cMenuKey, object cVarientValue, object bMenu, bool bCheck) {
            this.enumType = enumType;
            this.cButtonKey = cButtonKey;
            this.cMenuKey = cMenuKey;
            this.cVarientValue = cVarientValue;
            this.bMenu = bMenu;
            this.bCheck = bCheck;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxUFSubToolbarEventMulticaster : UFToolBarCtrl.@__UFSubToolbar {
        
        private AxUFSubToolbar parent;
        
        public AxUFSubToolbarEventMulticaster(AxUFSubToolbar parent) {
            this.parent = parent;
        }
        
        public virtual void OnCommand(UFToolBarCtrl.ENUM_MENU_OR_BUTTON enumType, string cButtonId, string cMenuId) {
            @__UFSubToolbar_OnCommandEvent oncommandEvent = new @__UFSubToolbar_OnCommandEvent(enumType, cButtonId, cMenuId);
            this.parent.RaiseOnOnCommand(this.parent, oncommandEvent);
        }
        
        public virtual void CheckBoxButtonChange(UFToolBarCtrl.ENUM_MENU_OR_BUTTON enumType, string cButtonKey, string cMenuKey, object cVarientValue, ref object bMenu, ref bool bCheck) {
            @__UFSubToolbar_CheckBoxButtonChangeEvent checkboxbuttonchangeEvent = new @__UFSubToolbar_CheckBoxButtonChangeEvent(enumType, cButtonKey, cMenuKey, cVarientValue, bMenu, bCheck);
            this.parent.RaiseOnCheckBoxButtonChange(this.parent, checkboxbuttonchangeEvent);
            bMenu = checkboxbuttonchangeEvent.bMenu;
            bCheck = checkboxbuttonchangeEvent.bCheck;
        }
    }
}
